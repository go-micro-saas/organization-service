// Package data
// Code generated by ikaiguang. <https://github.com/ikaiguang>
package data

import (
	"bytes"
	context "context"
	"database/sql"
	"github.com/go-micro-saas/organization-service/app/org-service/internal/data/po"
	datarepos "github.com/go-micro-saas/organization-service/app/org-service/internal/data/repo"
	schemas "github.com/go-micro-saas/organization-service/app/org-service/internal/data/schema/org_invite_record"
	gormpkg "github.com/ikaiguang/go-srv-kit/data/gorm"
	errorpkg "github.com/ikaiguang/go-srv-kit/kratos/error"
	gorm "gorm.io/gorm"
	"strings"
)

// orgInviteRecordRepo repo
type orgInviteRecordRepo struct {
	dbConn                *gorm.DB                // *gorm.DB
	OrgInviteRecordSchema schemas.OrgInviteRecord // OrgInviteRecord
}

// NewOrgInviteRecordRepo new data repo
func NewOrgInviteRecordRepo(dbConn *gorm.DB) datarepos.OrgInviteRecordRepo {
	return &orgInviteRecordRepo{
		dbConn: dbConn,
	}
}

func (s *orgInviteRecordRepo) NewTransaction(ctx context.Context, opts ...*sql.TxOptions) gormpkg.TransactionInterface {
	return gormpkg.NewTransaction(ctx, s.dbConn, opts...)
}

// =============== 创建 ===============

// create insert one
func (s *orgInviteRecordRepo) create(ctx context.Context, dbConn *gorm.DB, dataModel *po.OrgInviteRecord) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.OrgInviteRecordSchema.TableName()).
		Create(dataModel).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		return errorpkg.Wrap(e, err)
	}
	return
}

// Create insert one
func (s *orgInviteRecordRepo) Create(ctx context.Context, dataModel *po.OrgInviteRecord) error {
	return s.create(ctx, s.dbConn, dataModel)
}

// CreateWithDBConn create
func (s *orgInviteRecordRepo) CreateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *po.OrgInviteRecord) error {
	return s.create(ctx, dbConn, dataModel)
}

// existCreate exist create
func (s *orgInviteRecordRepo) existCreate(ctx context.Context, dbConn *gorm.DB, dataModel *po.OrgInviteRecord) (anotherModel *po.OrgInviteRecord, isNotFound bool, err error) {
	anotherModel = new(po.OrgInviteRecord)
	err = dbConn.WithContext(ctx).
		Table(s.OrgInviteRecordSchema.TableName()).
		Where(schemas.FieldId+" = ?", dataModel.Id).
		First(anotherModel).Error
	if err != nil {
		if gormpkg.IsErrRecordNotFound(err) {
			isNotFound = true
			err = nil
		} else {
			e := errorpkg.ErrorInternalServer("")
			err = errorpkg.Wrap(e, err)
		}
		return
	}
	return
}

// ExistCreate exist create
func (s *orgInviteRecordRepo) ExistCreate(ctx context.Context, dataModel *po.OrgInviteRecord) (anotherModel *po.OrgInviteRecord, isNotFound bool, err error) {
	return s.existCreate(ctx, s.dbConn, dataModel)
}

// ExistCreateWithDBConn exist create
func (s *orgInviteRecordRepo) ExistCreateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *po.OrgInviteRecord) (anotherModel *po.OrgInviteRecord, isNotFound bool, err error) {
	return s.existCreate(ctx, dbConn, dataModel)
}

// createInBatches create many
func (s *orgInviteRecordRepo) createInBatches(ctx context.Context, dbConn *gorm.DB, dataModels []*po.OrgInviteRecord, batchSize int) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.OrgInviteRecordSchema.TableName()).
		CreateInBatches(dataModels, batchSize).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		return errorpkg.Wrap(e, err)
	}
	return
}

// CreateInBatches create many
func (s *orgInviteRecordRepo) CreateInBatches(ctx context.Context, dataModels []*po.OrgInviteRecord, batchSize int) error {
	return s.createInBatches(ctx, s.dbConn, dataModels, batchSize)
}

// CreateInBatchesWithDBConn create many
func (s *orgInviteRecordRepo) CreateInBatchesWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModels []*po.OrgInviteRecord, batchSize int) error {
	return s.createInBatches(ctx, dbConn, dataModels, batchSize)
}

// =============== 更新 ===============

// update update
func (s *orgInviteRecordRepo) update(ctx context.Context, dbConn *gorm.DB, dataModel *po.OrgInviteRecord) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.OrgInviteRecordSchema.TableName()).
		// Where(schemas.FieldId+" = ?", dataModel.Id).
		Save(dataModel).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		return errorpkg.Wrap(e, err)
	}
	return
}

// Update update
func (s *orgInviteRecordRepo) Update(ctx context.Context, dataModel *po.OrgInviteRecord) error {
	return s.update(ctx, s.dbConn, dataModel)
}

// UpdateWithDBConn update
func (s *orgInviteRecordRepo) UpdateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *po.OrgInviteRecord) error {
	return s.update(ctx, dbConn, dataModel)
}

func (s *orgInviteRecordRepo) updateInviteStatus(ctx context.Context, dbConn *gorm.DB, dataModel *po.OrgInviteRecord) (err error) {
	updates := map[string]interface{}{
		schemas.FieldInviteStatus: dataModel.InviteStatus,
		schemas.FieldUpdatedTime:  dataModel.UpdatedTime,
	}
	err = s.dbConn.WithContext(ctx).
		Table(s.OrgInviteRecordSchema.TableName()).
		Where(schemas.FieldId+" = ?", dataModel.Id).
		UpdateColumns(updates).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		return errorpkg.Wrap(e, err)
	}
	return
}

func (s *orgInviteRecordRepo) UpdateInviteStatus(ctx context.Context, dataModel *po.OrgInviteRecord) (err error) {
	return s.updateInviteStatus(ctx, s.dbConn, dataModel)
}

func (s *orgInviteRecordRepo) UpdateInviteStatusWithTransaction(ctx context.Context, tx gormpkg.TransactionInterface, dataModel *po.OrgInviteRecord) (err error) {
	fc := func(ctx context.Context, tx *gorm.DB) error {
		return s.updateInviteStatus(ctx, tx, dataModel)
	}
	err = tx.Do(ctx, fc)
	if err != nil {
		return err
	}
	return
}

// existUpdate exist update
func (s *orgInviteRecordRepo) existUpdate(ctx context.Context, dbConn *gorm.DB, dataModel *po.OrgInviteRecord) (anotherModel *po.OrgInviteRecord, isNotFound bool, err error) {
	anotherModel = new(po.OrgInviteRecord)
	err = dbConn.WithContext(ctx).
		Table(s.OrgInviteRecordSchema.TableName()).
		Where(schemas.FieldId+" = ?", dataModel.Id).
		Where(schemas.FieldId+" != ?", dataModel.Id).
		First(anotherModel).Error
	if err != nil {
		if gormpkg.IsErrRecordNotFound(err) {
			isNotFound = true
			err = nil
		} else {
			e := errorpkg.ErrorInternalServer("")
			err = errorpkg.Wrap(e, err)
		}
		return
	}
	return
}

// ExistUpdate exist update
func (s *orgInviteRecordRepo) ExistUpdate(ctx context.Context, dataModel *po.OrgInviteRecord) (anotherModel *po.OrgInviteRecord, isNotFound bool, err error) {
	return s.existUpdate(ctx, s.dbConn, dataModel)
}

// ExistUpdateWithDBConn exist update
func (s *orgInviteRecordRepo) ExistUpdateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *po.OrgInviteRecord) (anotherModel *po.OrgInviteRecord, isNotFound bool, err error) {
	return s.existUpdate(ctx, dbConn, dataModel)
}

// =============== query one : 查一个 ===============

// queryOneById query one by id
func (s *orgInviteRecordRepo) queryOneById(ctx context.Context, dbConn *gorm.DB, id interface{}) (dataModel *po.OrgInviteRecord, isNotFound bool, err error) {
	dataModel = new(po.OrgInviteRecord)
	err = dbConn.WithContext(ctx).
		Table(s.OrgInviteRecordSchema.TableName()).
		Where(schemas.FieldId+" = ?", id).
		First(dataModel).Error
	if err != nil {
		if gormpkg.IsErrRecordNotFound(err) {
			err = nil
			isNotFound = true
		} else {
			e := errorpkg.ErrorInternalServer("")
			err = errorpkg.Wrap(e, err)
		}
		return
	}
	return
}

// QueryOneById query one by id
func (s *orgInviteRecordRepo) QueryOneById(ctx context.Context, id interface{}) (dataModel *po.OrgInviteRecord, isNotFound bool, err error) {
	return s.queryOneById(ctx, s.dbConn, id)
}

// QueryOneByIdWithDBConn query one by id
func (s *orgInviteRecordRepo) QueryOneByIdWithDBConn(ctx context.Context, dbConn *gorm.DB, id interface{}) (dataModel *po.OrgInviteRecord, isNotFound bool, err error) {
	return s.queryOneById(ctx, dbConn, id)
}

func (s *orgInviteRecordRepo) QueryOneByInviteID(ctx context.Context, inviteID uint64) (dataModel *po.OrgInviteRecord, isNotFound bool, err error) {
	dataModel = new(po.OrgInviteRecord)
	err = s.dbConn.WithContext(ctx).
		Table(s.OrgInviteRecordSchema.TableName()).
		Where(schemas.FieldInviteId+" = ?", inviteID).
		First(dataModel).Error
	if err != nil {
		if gormpkg.IsErrRecordNotFound(err) {
			err = nil
			isNotFound = true
		} else {
			e := errorpkg.ErrorInternalServer("")
			err = errorpkg.Wrap(e, err)
		}
		return
	}
	return
}

func (s *orgInviteRecordRepo) QueryByInviteIDList(ctx context.Context, inviteIDList []uint64) ([]*po.OrgInviteRecord, error) {
	if len(inviteIDList) == 0 {
		return nil, nil
	}
	var dataModels []*po.OrgInviteRecord
	err := s.dbConn.WithContext(ctx).
		Table(s.OrgInviteRecordSchema.TableName()).
		Where(schemas.FieldInviteId+" in (?)", inviteIDList).
		Find(&dataModels).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return nil, err
	}
	return dataModels, nil
}

// queryOneByConditions query one by conditions
func (s *orgInviteRecordRepo) queryOneByConditions(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) (dataModel *po.OrgInviteRecord, isNotFound bool, err error) {
	dataModel = new(po.OrgInviteRecord)
	dbConn = dbConn.WithContext(ctx).Table(s.OrgInviteRecordSchema.TableName())
	err = s.WhereConditions(dbConn, conditions).
		First(dataModel).Error
	if err != nil {
		if gormpkg.IsErrRecordNotFound(err) {
			err = nil
			isNotFound = true
		} else {
			e := errorpkg.ErrorInternalServer("")
			err = errorpkg.Wrap(e, err)
		}
		return
	}
	return
}

// QueryOneByConditions query one by conditions
func (s *orgInviteRecordRepo) QueryOneByConditions(ctx context.Context, conditions map[string]interface{}) (dataModel *po.OrgInviteRecord, isNotFound bool, err error) {
	return s.queryOneByConditions(ctx, s.dbConn, conditions)
}

// QueryOneByConditionsWithDBConn query one by conditions
func (s *orgInviteRecordRepo) QueryOneByConditionsWithDBConn(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) (dataModel *po.OrgInviteRecord, isNotFound bool, err error) {
	return s.queryOneByConditions(ctx, dbConn, conditions)
}

// =============== query all : 查全部 ===============

// queryAllByConditions query all by conditions
func (s *orgInviteRecordRepo) queryAllByConditions(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) (dataModels []*po.OrgInviteRecord, err error) {
	dbConn = dbConn.WithContext(ctx).Table(s.OrgInviteRecordSchema.TableName())
	err = s.WhereConditions(dbConn, conditions).
		Find(&dataModels).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return dataModels, err
	}
	return
}

// QueryAllByConditions query all by conditions
func (s *orgInviteRecordRepo) QueryAllByConditions(ctx context.Context, conditions map[string]interface{}) ([]*po.OrgInviteRecord, error) {
	return s.queryAllByConditions(ctx, s.dbConn, conditions)
}

// QueryAllByConditionsWithDBConn query all by conditions
func (s *orgInviteRecordRepo) QueryAllByConditionsWithDBConn(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) ([]*po.OrgInviteRecord, error) {
	return s.queryAllByConditions(ctx, dbConn, conditions)
}

// =============== list : 列表 ===============

// list 列表
func (s *orgInviteRecordRepo) list(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}, paginatorArgs *gormpkg.PaginatorArgs) (dataModels []*po.OrgInviteRecord, recordCount int64, err error) {
	// query where
	dbConn = dbConn.WithContext(ctx).Table(s.OrgInviteRecordSchema.TableName())
	dbConn = s.WhereConditions(dbConn, conditions)
	dbConn = gormpkg.AssembleWheres(dbConn, paginatorArgs.PageWheres)

	err = dbConn.Count(&recordCount).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return
	} else if recordCount == 0 {
		return // empty
	}

	// pagination
	dbConn = gormpkg.AssembleOrders(dbConn, paginatorArgs.PageOrders)
	err = gormpkg.Paginator(dbConn, paginatorArgs.PageOption).
		Find(&dataModels).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return
	}
	return
}

// List 列表
func (s *orgInviteRecordRepo) List(ctx context.Context, conditions map[string]interface{}, paginatorArgs *gormpkg.PaginatorArgs) ([]*po.OrgInviteRecord, int64, error) {
	return s.list(ctx, s.dbConn, conditions, paginatorArgs)
}

// ListWithDBConn 列表
func (s *orgInviteRecordRepo) ListWithDBConn(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}, paginatorArgs *gormpkg.PaginatorArgs) ([]*po.OrgInviteRecord, int64, error) {
	return s.list(ctx, dbConn, conditions, paginatorArgs)
}

func (s *orgInviteRecordRepo) ListOrgInviteRecord(ctx context.Context, queryParam *po.OrgInviteRecordListParam, paginatorArgs *gormpkg.PaginatorArgs) (dataModels []*po.OrgInviteRecord, recordCount int64, err error) {
	// query where
	dbConn := s.dbConn.WithContext(ctx).Table(s.OrgInviteRecordSchema.TableName())
	dbConn = queryParam.WhereConditions(dbConn)
	dbConn = gormpkg.AssembleWheres(dbConn, paginatorArgs.PageWheres)

	err = dbConn.Count(&recordCount).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return
	} else if recordCount == 0 {
		return // empty
	}

	// pagination
	dbConn = gormpkg.AssembleOrders(dbConn, paginatorArgs.PageOrders)
	err = gormpkg.Paginator(dbConn, paginatorArgs.PageOption).
		Find(&dataModels).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return
	}
	return
}

// =============== delete : 删除 ===============

// delete delete one
func (s *orgInviteRecordRepo) delete(ctx context.Context, dbConn *gorm.DB, dataModel *po.OrgInviteRecord) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.OrgInviteRecordSchema.TableName()).
		Where(schemas.FieldId+" = ?", dataModel.Id).
		Delete(dataModel).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return err
	}
	return
}

// Delete delete one
func (s *orgInviteRecordRepo) Delete(ctx context.Context, dataModel *po.OrgInviteRecord) error {
	return s.delete(ctx, s.dbConn, dataModel)
}

// DeleteWithDBConn delete one
func (s *orgInviteRecordRepo) DeleteWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *po.OrgInviteRecord) error {
	return s.delete(ctx, dbConn, dataModel)
}

// deleteByIds delete by ids
func (s *orgInviteRecordRepo) deleteByIds(ctx context.Context, dbConn *gorm.DB, ids interface{}) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.OrgInviteRecordSchema.TableName()).
		Where(schemas.FieldId+" in (?)", ids).
		Delete(po.OrgInviteRecord{}).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return err
	}
	return
}

// DeleteByIds delete by ids
func (s *orgInviteRecordRepo) DeleteByIds(ctx context.Context, ids interface{}) error {
	return s.deleteByIds(ctx, s.dbConn, ids)
}

// DeleteByIdsWithDBConn delete by ids
func (s *orgInviteRecordRepo) DeleteByIdsWithDBConn(ctx context.Context, dbConn *gorm.DB, ids interface{}) error {
	return s.deleteByIds(ctx, dbConn, ids)
}

// =============== insert : 批量入库 ===============

var _ gormpkg.BatchInsertRepo = new(OrgInviteRecordSlice)

// OrgInviteRecordSlice 表切片
type OrgInviteRecordSlice []*po.OrgInviteRecord

// TableName 表名
func (s *OrgInviteRecordSlice) TableName() string {
	return schemas.OrgInviteRecordSchema.TableName()
}

// Len 长度
func (s *OrgInviteRecordSlice) Len() int {
	return len(*s)
}

// InsertColumns 批量入库的列
func (s *OrgInviteRecordSlice) InsertColumns() (columnList []string, placeholder string) {
	// columns
	columnList = []string{
		schemas.FieldCreatedTime, schemas.FieldUpdatedTime,
		schemas.FieldInviteId, schemas.FieldOrgId,
		schemas.FieldInviterEmployeeId, schemas.FieldInvitedType,
		schemas.FieldInvitedUserId, schemas.FieldInvitedAccount,
		schemas.FieldInvitedAccountType, schemas.FieldInvitedEmployeeRole,
		schemas.FieldInviteStatus, schemas.FieldAssignEmployeeId,
		schemas.FieldInviteCode,
	}

	// placeholders
	insertPlaceholderBytes := bytes.Repeat([]byte("?, "), len(columnList))
	insertPlaceholderBytes = bytes.TrimSuffix(insertPlaceholderBytes, []byte(", "))

	return columnList, string(insertPlaceholderBytes)
}

// InsertValues 批量入库的值
func (s *OrgInviteRecordSlice) InsertValues(args *gormpkg.BatchInsertValueArgs) (prepareData []interface{}, placeholderSlice []string) {
	dataModels := (*s)[args.StepStart:args.StepEnd]
	for index := range dataModels {
		// placeholder
		placeholderSlice = append(placeholderSlice, "("+args.InsertPlaceholder+")")

		// prepare data
		prepareData = append(prepareData, dataModels[index].CreatedTime)
		prepareData = append(prepareData, dataModels[index].UpdatedTime)
		prepareData = append(prepareData, dataModels[index].InviteId)
		prepareData = append(prepareData, dataModels[index].OrgId)
		prepareData = append(prepareData, dataModels[index].InviterEmployeeId)
		prepareData = append(prepareData, dataModels[index].InvitedType)
		prepareData = append(prepareData, dataModels[index].InvitedUserId)
		prepareData = append(prepareData, dataModels[index].InvitedAccount)
		prepareData = append(prepareData, dataModels[index].InvitedAccountType)
		prepareData = append(prepareData, dataModels[index].InvitedEmployeeRole)
		prepareData = append(prepareData, dataModels[index].InviteStatus)
		prepareData = append(prepareData, dataModels[index].AssignEmployeeId)
		prepareData = append(prepareData, dataModels[index].InviteCode)
	}
	return prepareData, placeholderSlice
}

// UpdateColumns 批量入库的列
func (s *OrgInviteRecordSlice) UpdateColumns() (columnList []string) {
	// columns
	columnList = []string{
		schemas.FieldCreatedTime + "=excluded." + schemas.FieldCreatedTime,
		schemas.FieldUpdatedTime + "=excluded." + schemas.FieldUpdatedTime,
		schemas.FieldInviteId + "=excluded." + schemas.FieldInviteId,
		schemas.FieldOrgId + "=excluded." + schemas.FieldOrgId,
		schemas.FieldInviterEmployeeId + "=excluded." + schemas.FieldInviterEmployeeId,
		schemas.FieldInvitedType + "=excluded." + schemas.FieldInvitedType,
		schemas.FieldInvitedUserId + "=excluded." + schemas.FieldInvitedUserId,
		schemas.FieldInvitedAccount + "=excluded." + schemas.FieldInvitedAccount,
		schemas.FieldInvitedAccountType + "=excluded." + schemas.FieldInvitedAccountType,
		schemas.FieldInvitedEmployeeRole + "=excluded." + schemas.FieldInvitedEmployeeRole,
		schemas.FieldInviteStatus + "=excluded." + schemas.FieldInviteStatus,
		schemas.FieldAssignEmployeeId + "=excluded." + schemas.FieldAssignEmployeeId,
		schemas.FieldInviteCode + "=excluded." + schemas.FieldInviteCode,
	}
	return columnList
}

// ConflictActionForMySQL 更新冲突时的操作
func (s *OrgInviteRecordSlice) ConflictActionForMySQL() (req *gormpkg.BatchInsertConflictActionReq) {
	req = &gormpkg.BatchInsertConflictActionReq{
		OnConflictValueAlias:  "AS excluded",
		OnConflictTarget:      "ON DUPLICATE KEY",
		OnConflictAction:      "UPDATE " + strings.Join(s.UpdateColumns(), ", "),
		OnConflictPrepareData: nil,
	}
	return req
}

// ConflictActionForPostgres 更新冲突时的操作
func (s *OrgInviteRecordSlice) ConflictActionForPostgres() (req *gormpkg.BatchInsertConflictActionReq) {
	req = &gormpkg.BatchInsertConflictActionReq{
		OnConflictValueAlias:  "",
		OnConflictTarget:      "ON CONFLICT(id)",
		OnConflictAction:      "DO UPDATE SET " + strings.Join(s.UpdateColumns(), ", "),
		OnConflictPrepareData: nil,
	}
	return req
}

// insert 批量插入
func (s *orgInviteRecordRepo) insert(ctx context.Context, dbConn *gorm.DB, dataModels OrgInviteRecordSlice) error {
	err := gormpkg.BatchInsertWithContext(ctx, dbConn, &dataModels)
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return err
	}
	return nil
}

// Insert 批量插入
func (s *orgInviteRecordRepo) Insert(ctx context.Context, dataModels []*po.OrgInviteRecord) error {
	return s.insert(ctx, s.dbConn, dataModels)
}

// InsertWithDBConn 批量插入
func (s *orgInviteRecordRepo) InsertWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModels []*po.OrgInviteRecord) error {
	return s.insert(ctx, dbConn, dataModels)
}

// =============== conditions : 条件 ===============

// WhereConditions orm where
func (s *orgInviteRecordRepo) WhereConditions(dbConn *gorm.DB, conditions map[string]interface{}) *gorm.DB {

	// table name
	// tableName := s.OrgInviteRecordSchema.TableName()

	// On-demand loading

	// id
	// if data, ok := conditions[schemas.FieldId]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldId+" = ?", data)
	// }

	// created_time
	// if data, ok := conditions[schemas.FieldCreatedTime]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldCreatedTime+" = ?", data)
	// }

	// updated_time
	// if data, ok := conditions[schemas.FieldUpdatedTime]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldUpdatedTime+" = ?", data)
	// }

	// invite_id
	// if data, ok := conditions[schemas.FieldInviteId]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldInviteId+" = ?", data)
	// }

	// org_id
	// if data, ok := conditions[schemas.FieldOrgId]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldOrgId+" = ?", data)
	// }

	// inviter_employee_id
	// if data, ok := conditions[schemas.FieldInviterEmployeeId]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldInviterEmployeeId+" = ?", data)
	// }

	// invited_type
	// if data, ok := conditions[schemas.FieldInvitedType]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldInvitedType+" = ?", data)
	// }

	// invited_user_id
	// if data, ok := conditions[schemas.FieldInvitedUserId]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldInvitedUserId+" = ?", data)
	// }

	// invited_account
	// if data, ok := conditions[schemas.FieldInvitedAccount]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldInvitedAccount+" = ?", data)
	// }

	// invited_account_type
	// if data, ok := conditions[schemas.FieldInvitedAccountType]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldInvitedAccountType+" = ?", data)
	// }

	// invited_employee_role
	// if data, ok := conditions[schemas.FieldInvitedEmployeeRole]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldInvitedEmployeeRole+" = ?", data)
	// }

	// invite_status
	// if data, ok := conditions[schemas.FieldInviteStatus]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldInviteStatus+" = ?", data)
	// }

	// assign_employee_id
	// if data, ok := conditions[schemas.FieldAssignEmployeeId]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldAssignEmployeeId+" = ?", data)
	// }

	// invite_code
	// if data, ok := conditions[schemas.FieldInviteCode]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldInviteCode+" = ?", data)
	// }

	return dbConn
}

// UpdateColumns update columns
func (s *orgInviteRecordRepo) UpdateColumns(conditions map[string]interface{}) map[string]interface{} {

	// update columns
	updateColumns := make(map[string]interface{})

	// On-demand loading

	// id
	//if data, ok := conditions[schemas.FieldId]; ok {
	//	updateColumns[schemas.FieldId] = data
	//}

	// created_time
	//if data, ok := conditions[schemas.FieldCreatedTime]; ok {
	//	updateColumns[schemas.FieldCreatedTime] = data
	//}

	// updated_time
	//if data, ok := conditions[schemas.FieldUpdatedTime]; ok {
	//	updateColumns[schemas.FieldUpdatedTime] = data
	//}

	// invite_id
	//if data, ok := conditions[schemas.FieldInviteId]; ok {
	//	updateColumns[schemas.FieldInviteId] = data
	//}

	// org_id
	//if data, ok := conditions[schemas.FieldOrgId]; ok {
	//	updateColumns[schemas.FieldOrgId] = data
	//}

	// inviter_employee_id
	//if data, ok := conditions[schemas.FieldInviterEmployeeId]; ok {
	//	updateColumns[schemas.FieldInviterEmployeeId] = data
	//}

	// invited_type
	//if data, ok := conditions[schemas.FieldInvitedType]; ok {
	//	updateColumns[schemas.FieldInvitedType] = data
	//}

	// invited_user_id
	//if data, ok := conditions[schemas.FieldInvitedUserId]; ok {
	//	updateColumns[schemas.FieldInvitedUserId] = data
	//}

	// invited_account
	//if data, ok := conditions[schemas.FieldInvitedAccount]; ok {
	//	updateColumns[schemas.FieldInvitedAccount] = data
	//}

	// invited_account_type
	//if data, ok := conditions[schemas.FieldInvitedAccountType]; ok {
	//	updateColumns[schemas.FieldInvitedAccountType] = data
	//}

	// invited_employee_role
	//if data, ok := conditions[schemas.FieldInvitedEmployeeRole]; ok {
	//	updateColumns[schemas.FieldInvitedEmployeeRole] = data
	//}

	// invite_status
	//if data, ok := conditions[schemas.FieldInviteStatus]; ok {
	//	updateColumns[schemas.FieldInviteStatus] = data
	//}

	// assign_employee_id
	//if data, ok := conditions[schemas.FieldAssignEmployeeId]; ok {
	//	updateColumns[schemas.FieldAssignEmployeeId] = data
	//}

	// invite_code
	//if data, ok := conditions[schemas.FieldInviteCode]; ok {
	//	updateColumns[schemas.FieldInviteCode] = data
	//}

	return updateColumns
}
