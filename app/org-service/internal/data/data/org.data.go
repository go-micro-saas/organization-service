// Package data
// Code generated by ikaiguang. <https://github.com/ikaiguang>
package data

import (
	"bytes"
	context "context"
	"database/sql"
	"github.com/go-micro-saas/organization-service/app/org-service/internal/data/po"
	datarepos "github.com/go-micro-saas/organization-service/app/org-service/internal/data/repo"
	schemas "github.com/go-micro-saas/organization-service/app/org-service/internal/data/schema/org"
	gormpkg "github.com/ikaiguang/go-srv-kit/data/gorm"
	errorpkg "github.com/ikaiguang/go-srv-kit/kratos/error"
	gorm "gorm.io/gorm"
	"strings"
)

// orgRepo repo
type orgRepo struct {
	dbConn    *gorm.DB    // *gorm.DB
	OrgSchema schemas.Org // Org
}

// NewOrgRepo new data repo
func NewOrgRepo(dbConn *gorm.DB) datarepos.OrgRepo {
	return &orgRepo{
		dbConn: dbConn,
	}
}

func (s *orgRepo) NewTransaction(ctx context.Context, opts ...*sql.TxOptions) gormpkg.TransactionInterface {
	return gormpkg.NewTransaction(ctx, s.dbConn, opts...)
}

// =============== 创建 ===============

// create insert one
func (s *orgRepo) create(ctx context.Context, dbConn *gorm.DB, dataModel *po.Org) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.OrgSchema.TableName()).
		Create(dataModel).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		return errorpkg.Wrap(e, err)
	}
	return
}

// Create insert one
func (s *orgRepo) Create(ctx context.Context, dataModel *po.Org) error {
	return s.create(ctx, s.dbConn, dataModel)
}

// CreateWithDBConn create
func (s *orgRepo) CreateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *po.Org) error {
	return s.create(ctx, dbConn, dataModel)
}

func (s *orgRepo) CreateWithTransaction(ctx context.Context, tx gormpkg.TransactionInterface, dataModel *po.Org) (err error) {
	fc := func(ctx context.Context, tx *gorm.DB) error {
		return s.create(ctx, tx, dataModel)
	}
	err = tx.Do(ctx, fc)
	if err != nil {
		return err
	}
	return
}

// existCreate exist create
func (s *orgRepo) existCreate(ctx context.Context, dbConn *gorm.DB, dataModel *po.Org) (anotherModel *po.Org, isNotFound bool, err error) {
	anotherModel = new(po.Org)
	err = dbConn.WithContext(ctx).
		Table(s.OrgSchema.TableName()).
		Where(schemas.FieldId+" = ?", dataModel.Id).
		First(anotherModel).Error
	if err != nil {
		if gormpkg.IsErrRecordNotFound(err) {
			isNotFound = true
			err = nil
		} else {
			e := errorpkg.ErrorInternalServer("")
			err = errorpkg.Wrap(e, err)
		}
		return
	}
	return
}

// ExistCreate exist create
func (s *orgRepo) ExistCreate(ctx context.Context, dataModel *po.Org) (anotherModel *po.Org, isNotFound bool, err error) {
	return s.existCreate(ctx, s.dbConn, dataModel)
}

// ExistCreateWithDBConn exist create
func (s *orgRepo) ExistCreateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *po.Org) (anotherModel *po.Org, isNotFound bool, err error) {
	return s.existCreate(ctx, dbConn, dataModel)
}

// createInBatches create many
func (s *orgRepo) createInBatches(ctx context.Context, dbConn *gorm.DB, dataModels []*po.Org, batchSize int) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.OrgSchema.TableName()).
		CreateInBatches(dataModels, batchSize).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		return errorpkg.Wrap(e, err)
	}
	return
}

// CreateInBatches create many
func (s *orgRepo) CreateInBatches(ctx context.Context, dataModels []*po.Org, batchSize int) error {
	return s.createInBatches(ctx, s.dbConn, dataModels, batchSize)
}

// CreateInBatchesWithDBConn create many
func (s *orgRepo) CreateInBatchesWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModels []*po.Org, batchSize int) error {
	return s.createInBatches(ctx, dbConn, dataModels, batchSize)
}

// =============== 更新 ===============

// update update
func (s *orgRepo) update(ctx context.Context, dbConn *gorm.DB, dataModel *po.Org) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.OrgSchema.TableName()).
		// Where(schemas.FieldId+" = ?", dataModel.Id).
		Save(dataModel).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		return errorpkg.Wrap(e, err)
	}
	return
}

// Update update
func (s *orgRepo) Update(ctx context.Context, dataModel *po.Org) error {
	return s.update(ctx, s.dbConn, dataModel)
}

// UpdateWithDBConn update
func (s *orgRepo) UpdateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *po.Org) error {
	return s.update(ctx, dbConn, dataModel)
}

// existUpdate exist update
func (s *orgRepo) existUpdate(ctx context.Context, dbConn *gorm.DB, dataModel *po.Org) (anotherModel *po.Org, isNotFound bool, err error) {
	anotherModel = new(po.Org)
	err = dbConn.WithContext(ctx).
		Table(s.OrgSchema.TableName()).
		Where(schemas.FieldId+" = ?", dataModel.Id).
		Where(schemas.FieldId+" != ?", dataModel.Id).
		First(anotherModel).Error
	if err != nil {
		if gormpkg.IsErrRecordNotFound(err) {
			isNotFound = true
			err = nil
		} else {
			e := errorpkg.ErrorInternalServer("")
			err = errorpkg.Wrap(e, err)
		}
		return
	}
	return
}

// ExistUpdate exist update
func (s *orgRepo) ExistUpdate(ctx context.Context, dataModel *po.Org) (anotherModel *po.Org, isNotFound bool, err error) {
	return s.existUpdate(ctx, s.dbConn, dataModel)
}

// ExistUpdateWithDBConn exist update
func (s *orgRepo) ExistUpdateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *po.Org) (anotherModel *po.Org, isNotFound bool, err error) {
	return s.existUpdate(ctx, dbConn, dataModel)
}

// =============== query one : 查一个 ===============

// queryOneById query one by id
func (s *orgRepo) queryOneById(ctx context.Context, dbConn *gorm.DB, orgID uint64) (dataModel *po.Org, isNotFound bool, err error) {
	dataModel = new(po.Org)
	err = dbConn.WithContext(ctx).
		Table(s.OrgSchema.TableName()).
		Where(schemas.FieldOrgId+" = ?", orgID).
		First(dataModel).Error
	if err != nil {
		if gormpkg.IsErrRecordNotFound(err) {
			err = nil
			isNotFound = true
		} else {
			e := errorpkg.ErrorInternalServer("")
			err = errorpkg.Wrap(e, err)
		}
		return
	}
	return
}

func (s *orgRepo) QueryOneByOrgID(ctx context.Context, orgID uint64) (dataModel *po.Org, isNotFound bool, err error) {
	return s.queryOneById(ctx, s.dbConn, orgID)
}

func (s *orgRepo) QueryByOrgIDList(ctx context.Context, orgIDList []uint64) ([]*po.Org, error) {
	if len(orgIDList) == 0 {
		return nil, nil
	}
	var dataModels []*po.Org
	err := s.dbConn.WithContext(ctx).
		Table(s.OrgSchema.TableName()).
		Where(schemas.FieldOrgId+" in (?)", orgIDList).
		Find(&dataModels).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return nil, err
	}
	return dataModels, nil
}

// queryOneByConditions query one by conditions
func (s *orgRepo) queryOneByConditions(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) (dataModel *po.Org, isNotFound bool, err error) {
	dataModel = new(po.Org)
	dbConn = dbConn.WithContext(ctx).Table(s.OrgSchema.TableName())
	err = s.WhereConditions(dbConn, conditions).
		First(dataModel).Error
	if err != nil {
		if gormpkg.IsErrRecordNotFound(err) {
			err = nil
			isNotFound = true
		} else {
			e := errorpkg.ErrorInternalServer("")
			err = errorpkg.Wrap(e, err)
		}
		return
	}
	return
}

// QueryOneByConditions query one by conditions
func (s *orgRepo) QueryOneByConditions(ctx context.Context, conditions map[string]interface{}) (dataModel *po.Org, isNotFound bool, err error) {
	return s.queryOneByConditions(ctx, s.dbConn, conditions)
}

// QueryOneByConditionsWithDBConn query one by conditions
func (s *orgRepo) QueryOneByConditionsWithDBConn(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) (dataModel *po.Org, isNotFound bool, err error) {
	return s.queryOneByConditions(ctx, dbConn, conditions)
}

// =============== query all : 查全部 ===============

// queryAllByConditions query all by conditions
func (s *orgRepo) queryAllByConditions(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) (dataModels []*po.Org, err error) {
	dbConn = dbConn.WithContext(ctx).Table(s.OrgSchema.TableName())
	err = s.WhereConditions(dbConn, conditions).
		Find(&dataModels).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return dataModels, err
	}
	return
}

// QueryAllByConditions query all by conditions
func (s *orgRepo) QueryAllByConditions(ctx context.Context, conditions map[string]interface{}) ([]*po.Org, error) {
	return s.queryAllByConditions(ctx, s.dbConn, conditions)
}

// QueryAllByConditionsWithDBConn query all by conditions
func (s *orgRepo) QueryAllByConditionsWithDBConn(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) ([]*po.Org, error) {
	return s.queryAllByConditions(ctx, dbConn, conditions)
}

// =============== list : 列表 ===============

// list 列表
func (s *orgRepo) list(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}, paginatorArgs *gormpkg.PaginatorArgs) (dataModels []*po.Org, recordCount int64, err error) {
	// query where
	dbConn = dbConn.WithContext(ctx).Table(s.OrgSchema.TableName())
	dbConn = s.WhereConditions(dbConn, conditions)
	dbConn = gormpkg.AssembleWheres(dbConn, paginatorArgs.PageWheres)

	err = dbConn.Count(&recordCount).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return
	} else if recordCount == 0 {
		return // empty
	}

	// pagination
	dbConn = gormpkg.AssembleOrders(dbConn, paginatorArgs.PageOrders)
	err = gormpkg.Paginator(dbConn, paginatorArgs.PageOption).
		Find(&dataModels).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return
	}
	return
}

// List 列表
func (s *orgRepo) List(ctx context.Context, conditions map[string]interface{}, paginatorArgs *gormpkg.PaginatorArgs) ([]*po.Org, int64, error) {
	return s.list(ctx, s.dbConn, conditions, paginatorArgs)
}

// ListWithDBConn 列表
func (s *orgRepo) ListWithDBConn(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}, paginatorArgs *gormpkg.PaginatorArgs) ([]*po.Org, int64, error) {
	return s.list(ctx, dbConn, conditions, paginatorArgs)
}

func (s *orgRepo) ListOrg(ctx context.Context, queryParam *po.OrgListParam, paginatorArgs *gormpkg.PaginatorArgs) (dataModels []*po.Org, recordCount int64, err error) {
	// query where
	dbConn := s.dbConn.WithContext(ctx).Table(s.OrgSchema.TableName())
	dbConn = queryParam.WhereConditions(dbConn)
	dbConn = gormpkg.AssembleWheres(dbConn, paginatorArgs.PageWheres)

	err = dbConn.Count(&recordCount).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return
	} else if recordCount == 0 {
		return // empty
	}

	// pagination
	dbConn = gormpkg.AssembleOrders(dbConn, paginatorArgs.PageOrders)
	err = gormpkg.Paginator(dbConn, paginatorArgs.PageOption).
		Find(&dataModels).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return
	}
	return
}

// =============== delete : 删除 ===============

// delete delete one
func (s *orgRepo) delete(ctx context.Context, dbConn *gorm.DB, dataModel *po.Org) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.OrgSchema.TableName()).
		Where(schemas.FieldId+" = ?", dataModel.Id).
		Delete(dataModel).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return err
	}
	return
}

// Delete delete one
func (s *orgRepo) Delete(ctx context.Context, dataModel *po.Org) error {
	return s.delete(ctx, s.dbConn, dataModel)
}

// DeleteWithDBConn delete one
func (s *orgRepo) DeleteWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *po.Org) error {
	return s.delete(ctx, dbConn, dataModel)
}

// deleteByIds delete by ids
func (s *orgRepo) deleteByIds(ctx context.Context, dbConn *gorm.DB, ids interface{}) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.OrgSchema.TableName()).
		Where(schemas.FieldId+" in (?)", ids).
		Delete(po.Org{}).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return err
	}
	return
}

// DeleteByIds delete by ids
func (s *orgRepo) DeleteByIds(ctx context.Context, ids interface{}) error {
	return s.deleteByIds(ctx, s.dbConn, ids)
}

// DeleteByIdsWithDBConn delete by ids
func (s *orgRepo) DeleteByIdsWithDBConn(ctx context.Context, dbConn *gorm.DB, ids interface{}) error {
	return s.deleteByIds(ctx, dbConn, ids)
}

// =============== insert : 批量入库 ===============

var _ gormpkg.BatchInsertRepo = new(OrgSlice)

// OrgSlice 表切片
type OrgSlice []*po.Org

// TableName 表名
func (s *OrgSlice) TableName() string {
	return schemas.OrgSchema.TableName()
}

// Len 长度
func (s *OrgSlice) Len() int {
	return len(*s)
}

// InsertColumns 批量入库的列
func (s *OrgSlice) InsertColumns() (columnList []string, placeholder string) {
	// columns
	columnList = []string{
		schemas.FieldCreatedTime, schemas.FieldUpdatedTime,
		schemas.FieldDeletedTime, schemas.FieldOrgId,
		schemas.FieldOrgName, schemas.FieldOrgAvatar,
		schemas.FieldOrgContactName, schemas.FieldOrgContactPhone,
		schemas.FieldOrgContactEmail, schemas.FieldOrgType,
		schemas.FieldOrgStatus, schemas.FieldOrgIndustryId,
		schemas.FieldOrgScaleId, schemas.FieldOrgAddress,
		schemas.FieldOrgZipCode, schemas.FieldOrgCreatorId,
	}

	// placeholders
	insertPlaceholderBytes := bytes.Repeat([]byte("?, "), len(columnList))
	insertPlaceholderBytes = bytes.TrimSuffix(insertPlaceholderBytes, []byte(", "))

	return columnList, string(insertPlaceholderBytes)
}

// InsertValues 批量入库的值
func (s *OrgSlice) InsertValues(args *gormpkg.BatchInsertValueArgs) (prepareData []interface{}, placeholderSlice []string) {
	dataModels := (*s)[args.StepStart:args.StepEnd]
	for index := range dataModels {
		// placeholder
		placeholderSlice = append(placeholderSlice, "("+args.InsertPlaceholder+")")

		// prepare data
		prepareData = append(prepareData, dataModels[index].CreatedTime)
		prepareData = append(prepareData, dataModels[index].UpdatedTime)
		prepareData = append(prepareData, dataModels[index].DeletedTime)
		prepareData = append(prepareData, dataModels[index].OrgId)
		prepareData = append(prepareData, dataModels[index].OrgName)
		prepareData = append(prepareData, dataModels[index].OrgAvatar)
		prepareData = append(prepareData, dataModels[index].OrgContactName)
		prepareData = append(prepareData, dataModels[index].OrgContactPhone)
		prepareData = append(prepareData, dataModels[index].OrgContactEmail)
		prepareData = append(prepareData, dataModels[index].OrgType)
		prepareData = append(prepareData, dataModels[index].OrgStatus)
		prepareData = append(prepareData, dataModels[index].OrgIndustryId)
		prepareData = append(prepareData, dataModels[index].OrgScaleId)
		prepareData = append(prepareData, dataModels[index].OrgAddress)
		prepareData = append(prepareData, dataModels[index].OrgZipCode)
		prepareData = append(prepareData, dataModels[index].OrgCreatorId)
	}
	return prepareData, placeholderSlice
}

// UpdateColumns 批量入库的列
func (s *OrgSlice) UpdateColumns() (columnList []string) {
	// columns
	columnList = []string{
		schemas.FieldCreatedTime + "=excluded." + schemas.FieldCreatedTime,
		schemas.FieldUpdatedTime + "=excluded." + schemas.FieldUpdatedTime,
		schemas.FieldDeletedTime + "=excluded." + schemas.FieldDeletedTime,
		schemas.FieldOrgId + "=excluded." + schemas.FieldOrgId,
		schemas.FieldOrgName + "=excluded." + schemas.FieldOrgName,
		schemas.FieldOrgAvatar + "=excluded." + schemas.FieldOrgAvatar,
		schemas.FieldOrgContactName + "=excluded." + schemas.FieldOrgContactName,
		schemas.FieldOrgContactPhone + "=excluded." + schemas.FieldOrgContactPhone,
		schemas.FieldOrgContactEmail + "=excluded." + schemas.FieldOrgContactEmail,
		schemas.FieldOrgType + "=excluded." + schemas.FieldOrgType,
		schemas.FieldOrgStatus + "=excluded." + schemas.FieldOrgStatus,
		schemas.FieldOrgIndustryId + "=excluded." + schemas.FieldOrgIndustryId,
		schemas.FieldOrgScaleId + "=excluded." + schemas.FieldOrgScaleId,
		schemas.FieldOrgAddress + "=excluded." + schemas.FieldOrgAddress,
		schemas.FieldOrgZipCode + "=excluded." + schemas.FieldOrgZipCode,
		schemas.FieldOrgCreatorId + "=excluded." + schemas.FieldOrgCreatorId,
	}
	return columnList
}

// ConflictActionForMySQL 更新冲突时的操作
func (s *OrgSlice) ConflictActionForMySQL() (req *gormpkg.BatchInsertConflictActionReq) {
	req = &gormpkg.BatchInsertConflictActionReq{
		OnConflictValueAlias:  "AS excluded",
		OnConflictTarget:      "ON DUPLICATE KEY",
		OnConflictAction:      "UPDATE " + strings.Join(s.UpdateColumns(), ", "),
		OnConflictPrepareData: nil,
	}
	return req
}

// ConflictActionForPostgres 更新冲突时的操作
func (s *OrgSlice) ConflictActionForPostgres() (req *gormpkg.BatchInsertConflictActionReq) {
	req = &gormpkg.BatchInsertConflictActionReq{
		OnConflictValueAlias:  "",
		OnConflictTarget:      "ON CONFLICT(id)",
		OnConflictAction:      "DO UPDATE SET " + strings.Join(s.UpdateColumns(), ", "),
		OnConflictPrepareData: nil,
	}
	return req
}

// insert 批量插入
func (s *orgRepo) insert(ctx context.Context, dbConn *gorm.DB, dataModels OrgSlice) error {
	err := gormpkg.BatchInsertWithContext(ctx, dbConn, &dataModels)
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return err
	}
	return nil
}

// Insert 批量插入
func (s *orgRepo) Insert(ctx context.Context, dataModels []*po.Org) error {
	return s.insert(ctx, s.dbConn, dataModels)
}

// InsertWithDBConn 批量插入
func (s *orgRepo) InsertWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModels []*po.Org) error {
	return s.insert(ctx, dbConn, dataModels)
}

// =============== conditions : 条件 ===============

// WhereConditions orm where
func (s *orgRepo) WhereConditions(dbConn *gorm.DB, conditions map[string]interface{}) *gorm.DB {

	// table name
	// tableName := s.OrgSchema.TableName()

	// On-demand loading

	// id
	// if data, ok := conditions[schemas.FieldId]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldId+" = ?", data)
	// }

	// created_time
	// if data, ok := conditions[schemas.FieldCreatedTime]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldCreatedTime+" = ?", data)
	// }

	// updated_time
	// if data, ok := conditions[schemas.FieldUpdatedTime]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldUpdatedTime+" = ?", data)
	// }

	// deleted_time
	// if data, ok := conditions[schemas.FieldDeletedTime]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldDeletedTime+" = ?", data)
	// }

	// org_id
	// if data, ok := conditions[schemas.FieldOrgId]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldOrgId+" = ?", data)
	// }

	// org_name
	// if data, ok := conditions[schemas.FieldOrgName]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldOrgName+" = ?", data)
	// }

	// org_avatar
	// if data, ok := conditions[schemas.FieldOrgAvatar]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldOrgAvatar+" = ?", data)
	// }

	// org_contact_name
	// if data, ok := conditions[schemas.FieldOrgContactName]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldOrgContactName+" = ?", data)
	// }

	// org_contact_phone
	// if data, ok := conditions[schemas.FieldOrgContactPhone]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldOrgContactPhone+" = ?", data)
	// }

	// org_contact_email
	// if data, ok := conditions[schemas.FieldOrgContactEmail]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldOrgContactEmail+" = ?", data)
	// }

	// org_type
	// if data, ok := conditions[schemas.FieldOrgType]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldOrgType+" = ?", data)
	// }

	// org_status
	// if data, ok := conditions[schemas.FieldOrgStatus]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldOrgStatus+" = ?", data)
	// }

	// org_industry_id
	// if data, ok := conditions[schemas.FieldOrgIndustryId]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldOrgIndustryId+" = ?", data)
	// }

	// org_scale_id
	// if data, ok := conditions[schemas.FieldOrgScaleId]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldOrgScaleId+" = ?", data)
	// }

	// org_address
	// if data, ok := conditions[schemas.FieldOrgAddress]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldOrgAddress+" = ?", data)
	// }

	// org_zip_code
	// if data, ok := conditions[schemas.FieldOrgZipCode]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldOrgZipCode+" = ?", data)
	// }

	// org_creator_id
	// if data, ok := conditions[schemas.FieldOrgCreatorId]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldOrgCreatorId+" = ?", data)
	// }

	return dbConn
}

// UpdateColumns update columns
func (s *orgRepo) UpdateColumns(conditions map[string]interface{}) map[string]interface{} {

	// update columns
	updateColumns := make(map[string]interface{})

	// On-demand loading

	// id
	//if data, ok := conditions[schemas.FieldId]; ok {
	//	updateColumns[schemas.FieldId] = data
	//}

	// created_time
	//if data, ok := conditions[schemas.FieldCreatedTime]; ok {
	//	updateColumns[schemas.FieldCreatedTime] = data
	//}

	// updated_time
	//if data, ok := conditions[schemas.FieldUpdatedTime]; ok {
	//	updateColumns[schemas.FieldUpdatedTime] = data
	//}

	// deleted_time
	//if data, ok := conditions[schemas.FieldDeletedTime]; ok {
	//	updateColumns[schemas.FieldDeletedTime] = data
	//}

	// org_id
	//if data, ok := conditions[schemas.FieldOrgId]; ok {
	//	updateColumns[schemas.FieldOrgId] = data
	//}

	// org_name
	//if data, ok := conditions[schemas.FieldOrgName]; ok {
	//	updateColumns[schemas.FieldOrgName] = data
	//}

	// org_avatar
	//if data, ok := conditions[schemas.FieldOrgAvatar]; ok {
	//	updateColumns[schemas.FieldOrgAvatar] = data
	//}

	// org_contact_name
	//if data, ok := conditions[schemas.FieldOrgContactName]; ok {
	//	updateColumns[schemas.FieldOrgContactName] = data
	//}

	// org_contact_phone
	//if data, ok := conditions[schemas.FieldOrgContactPhone]; ok {
	//	updateColumns[schemas.FieldOrgContactPhone] = data
	//}

	// org_contact_email
	//if data, ok := conditions[schemas.FieldOrgContactEmail]; ok {
	//	updateColumns[schemas.FieldOrgContactEmail] = data
	//}

	// org_type
	//if data, ok := conditions[schemas.FieldOrgType]; ok {
	//	updateColumns[schemas.FieldOrgType] = data
	//}

	// org_status
	//if data, ok := conditions[schemas.FieldOrgStatus]; ok {
	//	updateColumns[schemas.FieldOrgStatus] = data
	//}

	// org_industry_id
	//if data, ok := conditions[schemas.FieldOrgIndustryId]; ok {
	//	updateColumns[schemas.FieldOrgIndustryId] = data
	//}

	// org_scale_id
	//if data, ok := conditions[schemas.FieldOrgScaleId]; ok {
	//	updateColumns[schemas.FieldOrgScaleId] = data
	//}

	// org_address
	//if data, ok := conditions[schemas.FieldOrgAddress]; ok {
	//	updateColumns[schemas.FieldOrgAddress] = data
	//}

	// org_zip_code
	//if data, ok := conditions[schemas.FieldOrgZipCode]; ok {
	//	updateColumns[schemas.FieldOrgZipCode] = data
	//}

	// org_creator_id
	//if data, ok := conditions[schemas.FieldOrgCreatorId]; ok {
	//	updateColumns[schemas.FieldOrgCreatorId] = data
	//}

	return updateColumns
}
