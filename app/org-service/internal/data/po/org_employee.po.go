// Package po
// Code generated by ikaiguang. <https://github.com/ikaiguang>
package po

import (
	enumv1 "github.com/go-micro-saas/organization-service/api/org-service/v1/enums"
	schemas "github.com/go-micro-saas/organization-service/app/org-service/internal/data/schema/org_employee"
	gormpkg "github.com/ikaiguang/go-srv-kit/data/gorm"
	idpkg "github.com/ikaiguang/go-srv-kit/kit/id"
	errorpkg "github.com/ikaiguang/go-srv-kit/kratos/error"
	datatypes "gorm.io/datatypes"
	"gorm.io/gorm"
	"strconv"
	time "time"
)

var _ = time.Time{}

var _ = datatypes.JSON{}

func DefaultOrgEmployee() *OrgEmployee {
	res := &OrgEmployee{
		Id:              0,
		CreatedTime:     time.Now(),
		UpdatedTime:     time.Now(),
		DeletedTime:     0,
		EmployeeId:      0,
		UserId:          0,
		OrgId:           0,
		EmployeeName:    "",
		EmployeeAvatar:  "",
		EmployeePhone:   "",
		EmployeeEmail:   "",
		EmployeeRole:    enumv1.OrgEmployeeRoleEnum_NORMAL,
		EmployeeStatus:  enumv1.OrgEmployeeStatusEnum_ENABLE,
		InviterRecordId: 0,
		InviterUserId:   0,
	}
	return res
}

func DefaultOrgEmployeeWithID(idGenerator idpkg.Snowflake) (dataModel *OrgEmployee, err error) {
	dataModel = DefaultOrgEmployee()
	dataModel.EmployeeId, err = idGenerator.NextID()
	if err != nil {
		e := errorpkg.ErrorInternalServer(err.Error())
		return dataModel, errorpkg.WithStack(e)
	}
	return dataModel, err
}

func DefaultOrgEmployeeStatus() []enumv1.OrgEmployeeStatusEnum_OrgEmployeeStatus {
	return []enumv1.OrgEmployeeStatusEnum_OrgEmployeeStatus{
		enumv1.OrgEmployeeStatusEnum_ENABLE,
		enumv1.OrgEmployeeStatusEnum_DISABLE,
	}
}

// OrgEmployee ENGINE InnoDB CHARSET utf8mb4 COMMENT '组织成员'
type OrgEmployee struct {
	Id               uint64                                         `gorm:"column:id;primaryKey" json:"id"`                      // ID
	CreatedTime      time.Time                                      `gorm:"column:created_time" json:"created_time"`             // 创建时间
	UpdatedTime      time.Time                                      `gorm:"column:updated_time" json:"updated_time"`             // 最后修改时间
	DeletedTime      uint64                                         `gorm:"column:deleted_time" json:"deleted_time"`             // 删除时间
	EmployeeId       uint64                                         `gorm:"column:employee_id" json:"employee_id"`               // uuid
	EmployeeUuid     string                                         `gorm:"column:employee_uuid" json:"employee_uuid"`           // uuid；默认orgID-employeeID；删除后设置随机uuid
	UserId           uint64                                         `gorm:"column:user_id" json:"user_id"`                       // 用户ID
	OrgId            uint64                                         `gorm:"column:org_id" json:"org_id"`                         // 组织ID
	EmployeeName     string                                         `gorm:"column:employee_name" json:"employee_name"`           // 成员名称
	EmployeeAvatar   string                                         `gorm:"column:employee_avatar" json:"employee_avatar"`       // 成员头像
	EmployeePhone    string                                         `gorm:"column:employee_phone" json:"employee_phone"`         // 成员联系手机
	EmployeeEmail    string                                         `gorm:"column:employee_email" json:"employee_email"`         // 成员联系邮箱
	EmployeeRole     enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole     `gorm:"column:employee_role" json:"employee_role"`           // 角色；1：创建者，2：普通成员，3：管理员，4：超级管理员
	EmployeeStatus   enumv1.OrgEmployeeStatusEnum_OrgEmployeeStatus `gorm:"column:employee_status" json:"employee_status"`       // 状态；1：ENABLE，2：DISABLE，3：DELETED
	InviterRecordId  uint64                                         `gorm:"column:inviter_record_id" json:"inviter_record_id"`   // 邀请记录ID
	InviterUserId    uint64                                         `gorm:"column:inviter_user_id" json:"inviter_user_id"`       // 邀请者ID
	ModifyStatusTime uint64                                         `gorm:"column:modify_status_time" json:"modify_status_time"` // 修改状态时间
	ModifyRoleTime   uint64                                         `gorm:"column:modify_role_time" json:"modify_role_time"`     // 修改角色时间
}

func (s *OrgEmployee) GenUUID() string {
	return GenEmployeeUUID(s.OrgId, s.UserId)
}

func (s *OrgEmployee) RebuildUUID() string {
	return s.EmployeeUuid + "-" + strconv.FormatUint(s.EmployeeId, 10)
}

func (s *OrgEmployee) IsValid() bool {
	return s.DeletedTime == 0 &&
		s.EmployeeStatus == enumv1.OrgEmployeeStatusEnum_ENABLE
}

func (s *OrgEmployee) IsSameOrg(orgID uint64) bool {
	return s.OrgId == orgID
}

func (s *OrgEmployee) CanAddEmployee() bool {
	return s.EmployeeRole == enumv1.OrgEmployeeRoleEnum_CREATOR ||
		s.EmployeeRole == enumv1.OrgEmployeeRoleEnum_ADMIN ||
		s.EmployeeRole == enumv1.OrgEmployeeRoleEnum_SUPER
}

func (s *OrgEmployee) IsOwner() bool {
	return IsOrgOwner(s.EmployeeRole)
}

func (s *OrgEmployee) CanManageOrg() bool {
	return s.EmployeeRole == enumv1.OrgEmployeeRoleEnum_CREATOR ||
		s.EmployeeRole == enumv1.OrgEmployeeRoleEnum_ADMIN ||
		s.EmployeeRole == enumv1.OrgEmployeeRoleEnum_SUPER
}

func (s *OrgEmployee) CanManageEmployee(target *OrgEmployee) bool {
	switch s.EmployeeRole {
	default:
		return false
	case enumv1.OrgEmployeeRoleEnum_CREATOR:
		return target.EmployeeRole != enumv1.OrgEmployeeRoleEnum_CREATOR
	case enumv1.OrgEmployeeRoleEnum_SUPER:
		return target.EmployeeRole != enumv1.OrgEmployeeRoleEnum_CREATOR &&
			target.EmployeeRole != enumv1.OrgEmployeeRoleEnum_SUPER
	case enumv1.OrgEmployeeRoleEnum_ADMIN:
		return target.EmployeeRole != enumv1.OrgEmployeeRoleEnum_CREATOR &&
			target.EmployeeRole != enumv1.OrgEmployeeRoleEnum_SUPER &&
			target.EmployeeRole != enumv1.OrgEmployeeRoleEnum_ADMIN
	}
}

func (s *OrgEmployee) CanSetRole(role enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole) bool {
	switch s.EmployeeRole {
	default:
		return false
	case enumv1.OrgEmployeeRoleEnum_CREATOR:
		return role != enumv1.OrgEmployeeRoleEnum_CREATOR
	case enumv1.OrgEmployeeRoleEnum_SUPER:
		return role != enumv1.OrgEmployeeRoleEnum_CREATOR &&
			role != enumv1.OrgEmployeeRoleEnum_SUPER
	case enumv1.OrgEmployeeRoleEnum_ADMIN:
		return role != enumv1.OrgEmployeeRoleEnum_CREATOR &&
			role != enumv1.OrgEmployeeRoleEnum_SUPER &&
			role != enumv1.OrgEmployeeRoleEnum_ADMIN
	}
}

func (s *OrgEmployee) SetEmployeeRemoveStatus() {
	s.EmployeeUuid = s.RebuildUUID()
	s.EmployeeStatus = enumv1.OrgEmployeeStatusEnum_REMOVED
	s.ModifyStatusTime = uint64(time.Now().Unix())
	s.UpdatedTime = time.Now()
	s.DeletedTime = uint64(time.Now().Unix())
}

func IsOrgOwner(employeeRole enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole) bool {
	return employeeRole == enumv1.OrgEmployeeRoleEnum_CREATOR
}

func GenEmployeeUUID(orgID, userID uint64) string {
	return strconv.FormatUint(orgID, 10) + "-" + strconv.FormatUint(userID, 10)
}

type QueryEmployeeParam struct {
	OrgID  uint64
	UserID uint64
}

type OrgEmployeeListParam struct {
	OrgIDList      []uint64 // 用户ID列表
	EmployeeIDList []uint64 // 成员ID列表
	UserIDList     []uint64 // 用户ID列表
	EmployeeName   string   // 成员名称

	IgnoreDefaultOrgEmployeeStatus bool                                             // 忽略成员状态
	EmployeeStatus                 []enumv1.OrgEmployeeStatusEnum_OrgEmployeeStatus // status

	IgnoreDeletedTime bool // 忽略删除时间
	OnlyDeleted       bool // 只查询已删除

	PaginatorArgs *gormpkg.PaginatorArgs
}

func (s *OrgEmployeeListParam) WhereConditions(dbConn *gorm.DB) *gorm.DB {
	if len(s.OrgIDList) == 1 {
		dbConn = dbConn.Where(schemas.OrgEmployeeSchema.FieldName(schemas.FieldOrgId)+" = ?", s.OrgIDList[0])
	} else if len(s.OrgIDList) > 1 {
		dbConn = dbConn.Where(schemas.OrgEmployeeSchema.FieldName(schemas.FieldOrgId)+" IN (?)", s.OrgIDList)
	}
	if len(s.EmployeeIDList) == 1 {
		dbConn = dbConn.Where(schemas.OrgEmployeeSchema.FieldName(schemas.FieldEmployeeId)+" = ?", s.EmployeeIDList[0])
	} else if len(s.EmployeeIDList) > 1 {
		dbConn = dbConn.Where(schemas.OrgEmployeeSchema.FieldName(schemas.FieldEmployeeId)+" IN (?)", s.EmployeeIDList)
	}
	if len(s.UserIDList) == 1 {
		dbConn = dbConn.Where(schemas.OrgEmployeeSchema.FieldName(schemas.FieldUserId)+" = ?", s.UserIDList[0])
	} else if len(s.UserIDList) > 1 {
		dbConn = dbConn.Where(schemas.OrgEmployeeSchema.FieldName(schemas.FieldUserId)+" IN (?)", s.UserIDList)
	}
	if len(s.EmployeeStatus) == 1 {
		dbConn = dbConn.Where(schemas.OrgEmployeeSchema.FieldName(schemas.FieldEmployeeStatus)+" = ?", s.EmployeeStatus[0])
	} else if len(s.EmployeeStatus) > 1 {
		dbConn = dbConn.Where(schemas.OrgEmployeeSchema.FieldName(schemas.FieldEmployeeStatus)+" IN (?)", s.EmployeeStatus)
	}
	// 仅查询有效状态
	if !s.IgnoreDefaultOrgEmployeeStatus {
		WhereDefaultOrgEmployeeStatus(dbConn)
	}
	if !s.IgnoreDeletedTime {
		if s.OnlyDeleted {
			dbConn = dbConn.Where(schemas.OrgEmployeeSchema.FieldName(schemas.FieldDeletedTime)+" > ?", 0)
		} else {
			dbConn = dbConn.Where(schemas.OrgEmployeeSchema.FieldName(schemas.FieldDeletedTime)+" = ?", 0)
		}
	}
	if len(s.EmployeeName) > 0 {
		dbConn = dbConn.Where(schemas.OrgEmployeeSchema.FieldName(schemas.FieldEmployeeName)+" LIKE ?", "%"+s.EmployeeName+"%")
	}
	return dbConn
}

func WhereDefaultOrgEmployeeStatus(dbConn *gorm.DB) *gorm.DB {
	defaultOrgEmployeeStatus := DefaultOrgEmployeeStatus()
	if len(defaultOrgEmployeeStatus) == 1 {
		dbConn = dbConn.Where(schemas.OrgEmployeeSchema.FieldName(schemas.FieldEmployeeStatus)+" = ?", defaultOrgEmployeeStatus[0])
	} else if len(defaultOrgEmployeeStatus) > 1 {
		dbConn = dbConn.Where(schemas.OrgEmployeeSchema.FieldName(schemas.FieldEmployeeStatus)+" IN (?)", defaultOrgEmployeeStatus)
	}
	return dbConn
}

type UserEmployeeList struct {
	UserID uint64
}

type OrgEmployeeRole struct {
	DeletedTime    uint64                                         `gorm:"column:deleted_time" json:"deleted_time"`       // 删除时间
	EmployeeId     uint64                                         `gorm:"column:employee_id" json:"employee_id"`         // uuid
	UserId         uint64                                         `gorm:"column:user_id" json:"user_id"`                 // 用户ID
	OrgId          uint64                                         `gorm:"column:org_id" json:"org_id"`                   // 组织ID
	EmployeeRole   enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole     `gorm:"column:employee_role" json:"employee_role"`     // 角色；1：创建者，2：普通成员，3：管理员，4：超级管理员
	EmployeeStatus enumv1.OrgEmployeeStatusEnum_OrgEmployeeStatus `gorm:"column:employee_status" json:"employee_status"` // 状态；1：ENABLE，2：DISABLE，3：DELETED
}

func (s *OrgEmployeeRole) SelectFields() []string {
	return []string{
		schemas.OrgEmployeeSchema.FieldName(schemas.FieldDeletedTime),
		schemas.OrgEmployeeSchema.FieldName(schemas.FieldEmployeeId),
		schemas.OrgEmployeeSchema.FieldName(schemas.FieldUserId),
		schemas.OrgEmployeeSchema.FieldName(schemas.FieldOrgId),
		schemas.OrgEmployeeSchema.FieldName(schemas.FieldEmployeeRole),
		schemas.OrgEmployeeSchema.FieldName(schemas.FieldEmployeeStatus),
	}
}

type OrgEmployeeRoleCount struct {
	UserId       uint64
	TotalCounter int32
	RoleCount    map[enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole]int32
}

func CalcUserRoleCount(dataModels []*OrgEmployeeRole) *OrgEmployeeRoleCount {
	res := &OrgEmployeeRoleCount{
		RoleCount:    make(map[enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole]int32),
		TotalCounter: int32(len(dataModels)),
	}
	if len(dataModels) == 0 {
		return res
	}
	res.UserId = dataModels[0].UserId
	for i := range dataModels {
		res.RoleCount[dataModels[i].EmployeeRole]++
	}
	return res
}
