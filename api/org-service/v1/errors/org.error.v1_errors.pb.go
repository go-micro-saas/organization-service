// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errorv1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
	strconv "strconv"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnknown(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_UNKNOWN.String() && e.Code == 500
}

func ErrorUnknown(format string, args ...interface{}) *errors.Error {
	e := errors.New(500, ERROR_UNKNOWN.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_UNKNOWN.Number()))}
	return e
}

// 不能设置为组织的所有者
func IsS105CannotBeOwner(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_CANNOT_BE_OWNER.String() && e.Code == 400
}

// 不能设置为组织的所有者
func ErrorS105CannotBeOwner(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_CANNOT_BE_OWNER.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_CANNOT_BE_OWNER.Number()))}
	return e
}

// 无效的操作员
func IsS105InvalidOperator(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_INVALID_OPERATOR.String() && e.Code == 400
}

// 无效的操作员
func ErrorS105InvalidOperator(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_INVALID_OPERATOR.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_INVALID_OPERATOR.Number()))}
	return e
}

// 组织不存在
func IsS105OrgNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_ORG_NOT_FOUND.String() && e.Code == 400
}

// 组织不存在
func ErrorS105OrgNotFound(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_ORG_NOT_FOUND.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_ORG_NOT_FOUND.Number()))}
	return e
}

// 组织已存在
func IsS105OrgExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_ORG_EXISTS.String() && e.Code == 400
}

// 组织已存在
func ErrorS105OrgExists(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_ORG_EXISTS.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_ORG_EXISTS.Number()))}
	return e
}

// 成员已存在
func IsS105EmployeeExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_EMPLOYEE_EXISTS.String() && e.Code == 400
}

// 成员已存在
func ErrorS105EmployeeExists(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_EMPLOYEE_EXISTS.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_EMPLOYEE_EXISTS.Number()))}
	return e
}

// 成员不存在
func IsS105EmployeeNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_EMPLOYEE_NOT_FOUND.String() && e.Code == 400
}

// 成员不存在
func ErrorS105EmployeeNotFound(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_EMPLOYEE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_EMPLOYEE_NOT_FOUND.Number()))}
	return e
}

// 成员不是组织的所有者
func IsS105EmployeeNotOwner(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_EMPLOYEE_NOT_OWNER.String() && e.Code == 400
}

// 成员不是组织的所有者
func ErrorS105EmployeeNotOwner(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_EMPLOYEE_NOT_OWNER.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_EMPLOYEE_NOT_OWNER.Number()))}
	return e
}

// 成员不是组织的管理员
func IsS105EmployeeNotAdmin(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_EMPLOYEE_NOT_ADMIN.String() && e.Code == 400
}

// 成员不是组织的管理员
func ErrorS105EmployeeNotAdmin(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_EMPLOYEE_NOT_ADMIN.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_EMPLOYEE_NOT_ADMIN.Number()))}
	return e
}

// 成员不是组织的超级管理员
func IsS105EmployeeNotSuper(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_EMPLOYEE_NOT_SUPER.String() && e.Code == 400
}

// 成员不是组织的超级管理员
func ErrorS105EmployeeNotSuper(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_EMPLOYEE_NOT_SUPER.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_EMPLOYEE_NOT_SUPER.Number()))}
	return e
}

// 成员不是组织的普通成员
func IsS105EmployeeNotNormal(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_EMPLOYEE_NOT_NORMAL.String() && e.Code == 400
}

// 成员不是组织的普通成员
func ErrorS105EmployeeNotNormal(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_EMPLOYEE_NOT_NORMAL.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_EMPLOYEE_NOT_NORMAL.Number()))}
	return e
}

// 成员不是有效的
func IsS105EmployeeNotEnable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_EMPLOYEE_NOT_ENABLE.String() && e.Code == 400
}

// 成员不是有效的
func ErrorS105EmployeeNotEnable(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_EMPLOYEE_NOT_ENABLE.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_EMPLOYEE_NOT_ENABLE.Number()))}
	return e
}

// 成员不是创建者
func IsS105EmployeeNotCreator(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_EMPLOYEE_NOT_CREATOR.String() && e.Code == 400
}

// 成员不是创建者
func ErrorS105EmployeeNotCreator(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_EMPLOYEE_NOT_CREATOR.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_EMPLOYEE_NOT_CREATOR.Number()))}
	return e
}

// 成员已被禁用
func IsS105EmployeeDisable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_EMPLOYEE_DISABLE.String() && e.Code == 400
}

// 成员已被禁用
func ErrorS105EmployeeDisable(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_EMPLOYEE_DISABLE.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_EMPLOYEE_DISABLE.Number()))}
	return e
}

// 无权限
func IsS105EmployeeNoPermission(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_EMPLOYEE_NO_PERMISSION.String() && e.Code == 400
}

// 无权限
func ErrorS105EmployeeNoPermission(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_EMPLOYEE_NO_PERMISSION.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_EMPLOYEE_NO_PERMISSION.Number()))}
	return e
}

// 不是组织的成员
func IsS105NotOrgEmployee(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_NOT_ORG_EMPLOYEE.String() && e.Code == 400
}

// 不是组织的成员
func ErrorS105NotOrgEmployee(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_NOT_ORG_EMPLOYEE.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_NOT_ORG_EMPLOYEE.Number()))}
	return e
}

// 无效的邀请
func IsS105InvalidInviteRecord(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_INVALID_INVITE_RECORD.String() && e.Code == 400
}

// 无效的邀请
func ErrorS105InvalidInviteRecord(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_INVALID_INVITE_RECORD.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_INVALID_INVITE_RECORD.Number()))}
	return e
}

// 邀请已过期
func IsS105InvitationHasExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_INVITATION_HAS_EXPIRED.String() && e.Code == 400
}

// 邀请已过期
func ErrorS105InvitationHasExpired(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_INVITATION_HAS_EXPIRED.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_INVITATION_HAS_EXPIRED.Number()))}
	return e
}

// 无效的邀请状态
func IsS105InvalidInviteStatus(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_INVALID_INVITE_STATUS.String() && e.Code == 400
}

// 无效的邀请状态
func ErrorS105InvalidInviteStatus(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_INVALID_INVITE_STATUS.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_INVALID_INVITE_STATUS.Number()))}
	return e
}

// 不是被邀请用户
func IsS105NotInvitedUser(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_NOT_INVITED_USER.String() && e.Code == 400
}

// 不是被邀请用户
func ErrorS105NotInvitedUser(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_NOT_INVITED_USER.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_NOT_INVITED_USER.Number()))}
	return e
}

// 邀请类型不正确
func IsS105IncorrectInviteType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_INCORRECT_INVITE_TYPE.String() && e.Code == 400
}

// 邀请类型不正确
func ErrorS105IncorrectInviteType(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_INCORRECT_INVITE_TYPE.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_INCORRECT_INVITE_TYPE.Number()))}
	return e
}

// 不允许设置为此状态
func IsS105NotAllowedSetStatus(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_NOT_ALLOWED_SET_STATUS.String() && e.Code == 400
}

// 不允许设置为此状态
func ErrorS105NotAllowedSetStatus(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_NOT_ALLOWED_SET_STATUS.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_NOT_ALLOWED_SET_STATUS.Number()))}
	return e
}

// 组织未启用
func IsS105OrgNotEnable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_ORG_NOT_ENABLE.String() && e.Code == 400
}

// 组织未启用
func ErrorS105OrgNotEnable(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_ORG_NOT_ENABLE.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_ORG_NOT_ENABLE.Number()))}
	return e
}

// 不允许设置为此角色
func IsS105NotAllowedSetRole(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_NOT_ALLOWED_SET_ROLE.String() && e.Code == 400
}

// 不允许设置为此角色
func ErrorS105NotAllowedSetRole(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_NOT_ALLOWED_SET_ROLE.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_NOT_ALLOWED_SET_ROLE.Number()))}
	return e
}

// 不能修改自己
func IsS105CannotModifySelf(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_CANNOT_MODIFY_SELF.String() && e.Code == 400
}

// 不能修改自己
func ErrorS105CannotModifySelf(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_CANNOT_MODIFY_SELF.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_CANNOT_MODIFY_SELF.Number()))}
	return e
}

// 已有个人版组织
func IsS105AlreadyHasPersonalOrg(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_ALREADY_HAS_PERSONAL_ORG.String() && e.Code == 400
}

// 已有个人版组织
func ErrorS105AlreadyHasPersonalOrg(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_ALREADY_HAS_PERSONAL_ORG.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_ALREADY_HAS_PERSONAL_ORG.Number()))}
	return e
}

// 已达创建或加入组织限制
func IsS105UserBelongOrgMaxCount(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_USER_BELONG_ORG_MAX_COUNT.String() && e.Code == 400
}

// 已达创建或加入组织限制
func ErrorS105UserBelongOrgMaxCount(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_USER_BELONG_ORG_MAX_COUNT.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_USER_BELONG_ORG_MAX_COUNT.Number()))}
	return e
}

// 已达创建组织限制
func IsS105UserCreateOrgMaxCount(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S105_USER_CREATE_ORG_MAX_COUNT.String() && e.Code == 400
}

// 已达创建组织限制
func ErrorS105UserCreateOrgMaxCount(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S105_USER_CREATE_ORG_MAX_COUNT.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S105_USER_CREATE_ORG_MAX_COUNT.Number()))}
	return e
}
