// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v6.30.2
// source: api/org-service/v1/errors/org.error.v1.proto

package errorv1

import (
	_ "github.com/go-kratos/kratos/v2/errors"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ERROR .
type ERROR int32

const (
	ERROR_UNKNOWN                       ERROR = 0
	ERROR_S105_CANNOT_BE_OWNER          ERROR = 105000001 // 不能设置为组织的所有者
	ERROR_S105_INVALID_OPERATOR         ERROR = 105000002 // 无效的操作员
	ERROR_S105_ORG_NOT_FOUND            ERROR = 105000003 // 组织不存在
	ERROR_S105_ORG_EXISTS               ERROR = 105000004 // 组织已存在
	ERROR_S105_EMPLOYEE_EXISTS          ERROR = 105000005 // 成员已存在
	ERROR_S105_EMPLOYEE_NOT_FOUND       ERROR = 105000006 // 成员不存在
	ERROR_S105_EMPLOYEE_NOT_OWNER       ERROR = 105000007 // 成员不是组织的所有者
	ERROR_S105_EMPLOYEE_NOT_ADMIN       ERROR = 105000008 // 成员不是组织的管理员
	ERROR_S105_EMPLOYEE_NOT_SUPER       ERROR = 105000009 // 成员不是组织的超级管理员
	ERROR_S105_EMPLOYEE_NOT_NORMAL      ERROR = 105000010 // 成员不是组织的普通成员
	ERROR_S105_EMPLOYEE_NOT_ENABLE      ERROR = 105000011 // 成员不是有效的
	ERROR_S105_EMPLOYEE_NOT_CREATOR     ERROR = 105000012 // 成员不是创建者
	ERROR_S105_EMPLOYEE_DISABLE         ERROR = 105000013 // 成员已被禁用
	ERROR_S105_EMPLOYEE_NO_PERMISSION   ERROR = 105000014 // 无权限
	ERROR_S105_NOT_ORG_EMPLOYEE         ERROR = 105000015 // 不是组织的成员
	ERROR_S105_INVALID_INVITE_RECORD    ERROR = 105000016 // 无效的邀请
	ERROR_S105_INVITATION_HAS_EXPIRED   ERROR = 105000017 // 邀请已过期
	ERROR_S105_INVALID_INVITE_STATUS    ERROR = 105000018 // 无效的邀请状态
	ERROR_S105_NOT_INVITED_USER         ERROR = 105000019 // 不是被邀请用户
	ERROR_S105_INCORRECT_INVITE_TYPE    ERROR = 105000020 // 邀请类型不正确
	ERROR_S105_NOT_ALLOWED_SET_STATUS   ERROR = 105000021 // 不允许设置为此状态
	ERROR_S105_ORG_NOT_ENABLE           ERROR = 105000022 // 组织未启用
	ERROR_S105_NOT_ALLOWED_SET_ROLE     ERROR = 105000023 // 不允许设置为此角色
	ERROR_S105_CANNOT_MODIFY_SELF       ERROR = 105000024 // 不能修改自己
	ERROR_S105_ALREADY_HAS_PERSONAL_ORG ERROR = 105000025 // 已有个人版组织
)

// Enum value maps for ERROR.
var (
	ERROR_name = map[int32]string{
		0:         "UNKNOWN",
		105000001: "S105_CANNOT_BE_OWNER",
		105000002: "S105_INVALID_OPERATOR",
		105000003: "S105_ORG_NOT_FOUND",
		105000004: "S105_ORG_EXISTS",
		105000005: "S105_EMPLOYEE_EXISTS",
		105000006: "S105_EMPLOYEE_NOT_FOUND",
		105000007: "S105_EMPLOYEE_NOT_OWNER",
		105000008: "S105_EMPLOYEE_NOT_ADMIN",
		105000009: "S105_EMPLOYEE_NOT_SUPER",
		105000010: "S105_EMPLOYEE_NOT_NORMAL",
		105000011: "S105_EMPLOYEE_NOT_ENABLE",
		105000012: "S105_EMPLOYEE_NOT_CREATOR",
		105000013: "S105_EMPLOYEE_DISABLE",
		105000014: "S105_EMPLOYEE_NO_PERMISSION",
		105000015: "S105_NOT_ORG_EMPLOYEE",
		105000016: "S105_INVALID_INVITE_RECORD",
		105000017: "S105_INVITATION_HAS_EXPIRED",
		105000018: "S105_INVALID_INVITE_STATUS",
		105000019: "S105_NOT_INVITED_USER",
		105000020: "S105_INCORRECT_INVITE_TYPE",
		105000021: "S105_NOT_ALLOWED_SET_STATUS",
		105000022: "S105_ORG_NOT_ENABLE",
		105000023: "S105_NOT_ALLOWED_SET_ROLE",
		105000024: "S105_CANNOT_MODIFY_SELF",
		105000025: "S105_ALREADY_HAS_PERSONAL_ORG",
	}
	ERROR_value = map[string]int32{
		"UNKNOWN":                       0,
		"S105_CANNOT_BE_OWNER":          105000001,
		"S105_INVALID_OPERATOR":         105000002,
		"S105_ORG_NOT_FOUND":            105000003,
		"S105_ORG_EXISTS":               105000004,
		"S105_EMPLOYEE_EXISTS":          105000005,
		"S105_EMPLOYEE_NOT_FOUND":       105000006,
		"S105_EMPLOYEE_NOT_OWNER":       105000007,
		"S105_EMPLOYEE_NOT_ADMIN":       105000008,
		"S105_EMPLOYEE_NOT_SUPER":       105000009,
		"S105_EMPLOYEE_NOT_NORMAL":      105000010,
		"S105_EMPLOYEE_NOT_ENABLE":      105000011,
		"S105_EMPLOYEE_NOT_CREATOR":     105000012,
		"S105_EMPLOYEE_DISABLE":         105000013,
		"S105_EMPLOYEE_NO_PERMISSION":   105000014,
		"S105_NOT_ORG_EMPLOYEE":         105000015,
		"S105_INVALID_INVITE_RECORD":    105000016,
		"S105_INVITATION_HAS_EXPIRED":   105000017,
		"S105_INVALID_INVITE_STATUS":    105000018,
		"S105_NOT_INVITED_USER":         105000019,
		"S105_INCORRECT_INVITE_TYPE":    105000020,
		"S105_NOT_ALLOWED_SET_STATUS":   105000021,
		"S105_ORG_NOT_ENABLE":           105000022,
		"S105_NOT_ALLOWED_SET_ROLE":     105000023,
		"S105_CANNOT_MODIFY_SELF":       105000024,
		"S105_ALREADY_HAS_PERSONAL_ORG": 105000025,
	}
)

func (x ERROR) Enum() *ERROR {
	p := new(ERROR)
	*p = x
	return p
}

func (x ERROR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERROR) Descriptor() protoreflect.EnumDescriptor {
	return file_api_org_service_v1_errors_org_error_v1_proto_enumTypes[0].Descriptor()
}

func (ERROR) Type() protoreflect.EnumType {
	return &file_api_org_service_v1_errors_org_error_v1_proto_enumTypes[0]
}

func (x ERROR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERROR.Descriptor instead.
func (ERROR) EnumDescriptor() ([]byte, []int) {
	return file_api_org_service_v1_errors_org_error_v1_proto_rawDescGZIP(), []int{0}
}

var File_api_org_service_v1_errors_org_error_v1_proto protoreflect.FileDescriptor

var file_api_org_service_v1_errors_org_error_v1_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14,
	0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x76, 0x31, 0x1a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xd8, 0x07, 0x0a, 0x05, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x12, 0x11, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x21, 0x0a, 0x14, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x43,
	0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0xc1,
	0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x22, 0x0a, 0x15, 0x53, 0x31, 0x30,
	0x35, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x10, 0xc2, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1f, 0x0a,
	0x12, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0xc3, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1c,
	0x0a, 0x0f, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0xc4, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x21, 0x0a, 0x14,
	0x53, 0x31, 0x30, 0x35, 0x5f, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x10, 0xc5, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12,
	0x24, 0x0a, 0x17, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xc6, 0xd8, 0x88, 0x32, 0x1a,
	0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x24, 0x0a, 0x17, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x45, 0x4d,
	0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52,
	0x10, 0xc7, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x24, 0x0a, 0x17, 0x53,
	0x31, 0x30, 0x35, 0x5f, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xc8, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90,
	0x03, 0x12, 0x24, 0x0a, 0x17, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59,
	0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x10, 0xc9, 0xd8, 0x88,
	0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x25, 0x0a, 0x18, 0x53, 0x31, 0x30, 0x35, 0x5f,
	0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0xca, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x25,
	0x0a, 0x18, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xcb, 0xd8, 0x88, 0x32, 0x1a,
	0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x26, 0x0a, 0x19, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x45, 0x4d,
	0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x4f, 0x52, 0x10, 0xcc, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x22, 0x0a,
	0x15, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xcd, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90,
	0x03, 0x12, 0x28, 0x0a, 0x1b, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59,
	0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0xce, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x22, 0x0a, 0x15, 0x53,
	0x31, 0x30, 0x35, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x45, 0x4d, 0x50, 0x4c,
	0x4f, 0x59, 0x45, 0x45, 0x10, 0xcf, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12,
	0x27, 0x0a, 0x1a, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0xd0, 0xd8,
	0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x28, 0x0a, 0x1b, 0x53, 0x31, 0x30, 0x35,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xd1, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45,
	0x90, 0x03, 0x12, 0x27, 0x0a, 0x1a, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0xd2, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x22, 0x0a, 0x15, 0x53,
	0x31, 0x30, 0x35, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x44, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0xd3, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12,
	0x27, 0x0a, 0x1a, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xd4, 0xd8,
	0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x28, 0x0a, 0x1b, 0x53, 0x31, 0x30, 0x35,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xd5, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45,
	0x90, 0x03, 0x12, 0x20, 0x0a, 0x13, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xd6, 0xd8, 0x88, 0x32, 0x1a, 0x04,
	0xa8, 0x45, 0x90, 0x03, 0x12, 0x26, 0x0a, 0x19, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x10, 0xd7, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x24, 0x0a, 0x17,
	0x53, 0x31, 0x30, 0x35, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x59, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0xd8, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45,
	0x90, 0x03, 0x12, 0x2a, 0x0a, 0x1d, 0x53, 0x31, 0x30, 0x35, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f,
	0x4f, 0x52, 0x47, 0x10, 0xd9, 0xd8, 0x88, 0x32, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x1a, 0x04,
	0xa0, 0x45, 0xf4, 0x03, 0x42, 0x7c, 0x0a, 0x14, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x76, 0x31, 0x42, 0x11, 0x53, 0x61,
	0x61, 0x73, 0x41, 0x70, 0x69, 0x4f, 0x72, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x56, 0x31, 0x50,
	0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f,
	0x2d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x61, 0x61, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x3b, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_org_service_v1_errors_org_error_v1_proto_rawDescOnce sync.Once
	file_api_org_service_v1_errors_org_error_v1_proto_rawDescData = file_api_org_service_v1_errors_org_error_v1_proto_rawDesc
)

func file_api_org_service_v1_errors_org_error_v1_proto_rawDescGZIP() []byte {
	file_api_org_service_v1_errors_org_error_v1_proto_rawDescOnce.Do(func() {
		file_api_org_service_v1_errors_org_error_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_org_service_v1_errors_org_error_v1_proto_rawDescData)
	})
	return file_api_org_service_v1_errors_org_error_v1_proto_rawDescData
}

var file_api_org_service_v1_errors_org_error_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_org_service_v1_errors_org_error_v1_proto_goTypes = []any{
	(ERROR)(0), // 0: saas.api.org.errorv1.ERROR
}
var file_api_org_service_v1_errors_org_error_v1_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_org_service_v1_errors_org_error_v1_proto_init() }
func file_api_org_service_v1_errors_org_error_v1_proto_init() {
	if File_api_org_service_v1_errors_org_error_v1_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_org_service_v1_errors_org_error_v1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_org_service_v1_errors_org_error_v1_proto_goTypes,
		DependencyIndexes: file_api_org_service_v1_errors_org_error_v1_proto_depIdxs,
		EnumInfos:         file_api_org_service_v1_errors_org_error_v1_proto_enumTypes,
	}.Build()
	File_api_org_service_v1_errors_org_error_v1_proto = out.File
	file_api_org_service_v1_errors_org_error_v1_proto_rawDesc = nil
	file_api_org_service_v1_errors_org_error_v1_proto_goTypes = nil
	file_api_org_service_v1_errors_org_error_v1_proto_depIdxs = nil
}
