// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/org-service/v1/enums/org.enum.v1.proto

package enumv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TestdataInitEnum with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TestdataInitEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestdataInitEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestdataInitEnumMultiError, or nil if none found.
func (m *TestdataInitEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *TestdataInitEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TestdataInitEnumMultiError(errors)
	}

	return nil
}

// TestdataInitEnumMultiError is an error wrapping multiple validation errors
// returned by TestdataInitEnum.ValidateAll() if the designated constraints
// aren't met.
type TestdataInitEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestdataInitEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestdataInitEnumMultiError) AllErrors() []error { return m }

// TestdataInitEnumValidationError is the validation error returned by
// TestdataInitEnum.Validate if the designated constraints aren't met.
type TestdataInitEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestdataInitEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestdataInitEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestdataInitEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestdataInitEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestdataInitEnumValidationError) ErrorName() string { return "TestdataInitEnumValidationError" }

// Error satisfies the builtin error interface
func (e TestdataInitEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestdataInitEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestdataInitEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestdataInitEnumValidationError{}

// Validate checks the field values on OrgTypeEnum with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrgTypeEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgTypeEnum with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrgTypeEnumMultiError, or
// nil if none found.
func (m *OrgTypeEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgTypeEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrgTypeEnumMultiError(errors)
	}

	return nil
}

// OrgTypeEnumMultiError is an error wrapping multiple validation errors
// returned by OrgTypeEnum.ValidateAll() if the designated constraints aren't met.
type OrgTypeEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgTypeEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgTypeEnumMultiError) AllErrors() []error { return m }

// OrgTypeEnumValidationError is the validation error returned by
// OrgTypeEnum.Validate if the designated constraints aren't met.
type OrgTypeEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgTypeEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgTypeEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgTypeEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgTypeEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgTypeEnumValidationError) ErrorName() string { return "OrgTypeEnumValidationError" }

// Error satisfies the builtin error interface
func (e OrgTypeEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgTypeEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgTypeEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgTypeEnumValidationError{}

// Validate checks the field values on OrgStatusEnum with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrgStatusEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgStatusEnum with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrgStatusEnumMultiError, or
// nil if none found.
func (m *OrgStatusEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgStatusEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrgStatusEnumMultiError(errors)
	}

	return nil
}

// OrgStatusEnumMultiError is an error wrapping multiple validation errors
// returned by OrgStatusEnum.ValidateAll() if the designated constraints
// aren't met.
type OrgStatusEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgStatusEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgStatusEnumMultiError) AllErrors() []error { return m }

// OrgStatusEnumValidationError is the validation error returned by
// OrgStatusEnum.Validate if the designated constraints aren't met.
type OrgStatusEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgStatusEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgStatusEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgStatusEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgStatusEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgStatusEnumValidationError) ErrorName() string { return "OrgStatusEnumValidationError" }

// Error satisfies the builtin error interface
func (e OrgStatusEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgStatusEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgStatusEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgStatusEnumValidationError{}

// Validate checks the field values on OrgEmployeeRoleEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgEmployeeRoleEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgEmployeeRoleEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgEmployeeRoleEnumMultiError, or nil if none found.
func (m *OrgEmployeeRoleEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgEmployeeRoleEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrgEmployeeRoleEnumMultiError(errors)
	}

	return nil
}

// OrgEmployeeRoleEnumMultiError is an error wrapping multiple validation
// errors returned by OrgEmployeeRoleEnum.ValidateAll() if the designated
// constraints aren't met.
type OrgEmployeeRoleEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgEmployeeRoleEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgEmployeeRoleEnumMultiError) AllErrors() []error { return m }

// OrgEmployeeRoleEnumValidationError is the validation error returned by
// OrgEmployeeRoleEnum.Validate if the designated constraints aren't met.
type OrgEmployeeRoleEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgEmployeeRoleEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgEmployeeRoleEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgEmployeeRoleEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgEmployeeRoleEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgEmployeeRoleEnumValidationError) ErrorName() string {
	return "OrgEmployeeRoleEnumValidationError"
}

// Error satisfies the builtin error interface
func (e OrgEmployeeRoleEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgEmployeeRoleEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgEmployeeRoleEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgEmployeeRoleEnumValidationError{}

// Validate checks the field values on OrgEmployeeStatusEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgEmployeeStatusEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgEmployeeStatusEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgEmployeeStatusEnumMultiError, or nil if none found.
func (m *OrgEmployeeStatusEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgEmployeeStatusEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrgEmployeeStatusEnumMultiError(errors)
	}

	return nil
}

// OrgEmployeeStatusEnumMultiError is an error wrapping multiple validation
// errors returned by OrgEmployeeStatusEnum.ValidateAll() if the designated
// constraints aren't met.
type OrgEmployeeStatusEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgEmployeeStatusEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgEmployeeStatusEnumMultiError) AllErrors() []error { return m }

// OrgEmployeeStatusEnumValidationError is the validation error returned by
// OrgEmployeeStatusEnum.Validate if the designated constraints aren't met.
type OrgEmployeeStatusEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgEmployeeStatusEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgEmployeeStatusEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgEmployeeStatusEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgEmployeeStatusEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgEmployeeStatusEnumValidationError) ErrorName() string {
	return "OrgEmployeeStatusEnumValidationError"
}

// Error satisfies the builtin error interface
func (e OrgEmployeeStatusEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgEmployeeStatusEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgEmployeeStatusEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgEmployeeStatusEnumValidationError{}

// Validate checks the field values on OrgInviteTypeEnum with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrgInviteTypeEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgInviteTypeEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgInviteTypeEnumMultiError, or nil if none found.
func (m *OrgInviteTypeEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgInviteTypeEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrgInviteTypeEnumMultiError(errors)
	}

	return nil
}

// OrgInviteTypeEnumMultiError is an error wrapping multiple validation errors
// returned by OrgInviteTypeEnum.ValidateAll() if the designated constraints
// aren't met.
type OrgInviteTypeEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgInviteTypeEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgInviteTypeEnumMultiError) AllErrors() []error { return m }

// OrgInviteTypeEnumValidationError is the validation error returned by
// OrgInviteTypeEnum.Validate if the designated constraints aren't met.
type OrgInviteTypeEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgInviteTypeEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgInviteTypeEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgInviteTypeEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgInviteTypeEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgInviteTypeEnumValidationError) ErrorName() string {
	return "OrgInviteTypeEnumValidationError"
}

// Error satisfies the builtin error interface
func (e OrgInviteTypeEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgInviteTypeEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgInviteTypeEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgInviteTypeEnumValidationError{}

// Validate checks the field values on OrgInviteAccountTypeEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgInviteAccountTypeEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgInviteAccountTypeEnum with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgInviteAccountTypeEnumMultiError, or nil if none found.
func (m *OrgInviteAccountTypeEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgInviteAccountTypeEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrgInviteAccountTypeEnumMultiError(errors)
	}

	return nil
}

// OrgInviteAccountTypeEnumMultiError is an error wrapping multiple validation
// errors returned by OrgInviteAccountTypeEnum.ValidateAll() if the designated
// constraints aren't met.
type OrgInviteAccountTypeEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgInviteAccountTypeEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgInviteAccountTypeEnumMultiError) AllErrors() []error { return m }

// OrgInviteAccountTypeEnumValidationError is the validation error returned by
// OrgInviteAccountTypeEnum.Validate if the designated constraints aren't met.
type OrgInviteAccountTypeEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgInviteAccountTypeEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgInviteAccountTypeEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgInviteAccountTypeEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgInviteAccountTypeEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgInviteAccountTypeEnumValidationError) ErrorName() string {
	return "OrgInviteAccountTypeEnumValidationError"
}

// Error satisfies the builtin error interface
func (e OrgInviteAccountTypeEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgInviteAccountTypeEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgInviteAccountTypeEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgInviteAccountTypeEnumValidationError{}

// Validate checks the field values on OrgInviteStatusEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgInviteStatusEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgInviteStatusEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgInviteStatusEnumMultiError, or nil if none found.
func (m *OrgInviteStatusEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgInviteStatusEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrgInviteStatusEnumMultiError(errors)
	}

	return nil
}

// OrgInviteStatusEnumMultiError is an error wrapping multiple validation
// errors returned by OrgInviteStatusEnum.ValidateAll() if the designated
// constraints aren't met.
type OrgInviteStatusEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgInviteStatusEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgInviteStatusEnumMultiError) AllErrors() []error { return m }

// OrgInviteStatusEnumValidationError is the validation error returned by
// OrgInviteStatusEnum.Validate if the designated constraints aren't met.
type OrgInviteStatusEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgInviteStatusEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgInviteStatusEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgInviteStatusEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgInviteStatusEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgInviteStatusEnumValidationError) ErrorName() string {
	return "OrgInviteStatusEnumValidationError"
}

// Error satisfies the builtin error interface
func (e OrgInviteStatusEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgInviteStatusEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgInviteStatusEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgInviteStatusEnumValidationError{}

// Validate checks the field values on OrgEventStatusEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgEventStatusEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgEventStatusEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgEventStatusEnumMultiError, or nil if none found.
func (m *OrgEventStatusEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgEventStatusEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrgEventStatusEnumMultiError(errors)
	}

	return nil
}

// OrgEventStatusEnumMultiError is an error wrapping multiple validation errors
// returned by OrgEventStatusEnum.ValidateAll() if the designated constraints
// aren't met.
type OrgEventStatusEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgEventStatusEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgEventStatusEnumMultiError) AllErrors() []error { return m }

// OrgEventStatusEnumValidationError is the validation error returned by
// OrgEventStatusEnum.Validate if the designated constraints aren't met.
type OrgEventStatusEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgEventStatusEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgEventStatusEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgEventStatusEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgEventStatusEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgEventStatusEnumValidationError) ErrorName() string {
	return "OrgEventStatusEnumValidationError"
}

// Error satisfies the builtin error interface
func (e OrgEventStatusEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgEventStatusEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgEventStatusEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgEventStatusEnumValidationError{}
