// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/org-service/v1/resources/org_employee.resource.v1.proto

package resourcev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enumv1 "github.com/go-micro-saas/organization-service/api/org-service/v1/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole(0)
)

// Validate checks the field values on OrgEmployee with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrgEmployee) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgEmployee with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrgEmployeeMultiError, or
// nil if none found.
func (m *OrgEmployee) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgEmployee) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedTime

	// no validation rules for UpdatedTime

	// no validation rules for DeletedTime

	// no validation rules for EmployeeId

	// no validation rules for UserId

	// no validation rules for OrgId

	// no validation rules for EmployeeName

	// no validation rules for EmployeeAvatar

	// no validation rules for EmployeePhone

	// no validation rules for EmployeeEmail

	// no validation rules for EmployeeRole

	// no validation rules for EmployeeStatus

	// no validation rules for InviterRecordId

	// no validation rules for InviterUserId

	if len(errors) > 0 {
		return OrgEmployeeMultiError(errors)
	}

	return nil
}

// OrgEmployeeMultiError is an error wrapping multiple validation errors
// returned by OrgEmployee.ValidateAll() if the designated constraints aren't met.
type OrgEmployeeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgEmployeeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgEmployeeMultiError) AllErrors() []error { return m }

// OrgEmployeeValidationError is the validation error returned by
// OrgEmployee.Validate if the designated constraints aren't met.
type OrgEmployeeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgEmployeeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgEmployeeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgEmployeeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgEmployeeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgEmployeeValidationError) ErrorName() string { return "OrgEmployeeValidationError" }

// Error satisfies the builtin error interface
func (e OrgEmployeeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgEmployee.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgEmployeeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgEmployeeValidationError{}

// Validate checks the field values on RemoveEmployeeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveEmployeeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveEmployeeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveEmployeeReqMultiError, or nil if none found.
func (m *RemoveEmployeeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveEmployeeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperatorEid() <= 0 {
		err := RemoveEmployeeReqValidationError{
			field:  "OperatorEid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEmployeeId() <= 0 {
		err := RemoveEmployeeReqValidationError{
			field:  "EmployeeId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveEmployeeReqMultiError(errors)
	}

	return nil
}

// RemoveEmployeeReqMultiError is an error wrapping multiple validation errors
// returned by RemoveEmployeeReq.ValidateAll() if the designated constraints
// aren't met.
type RemoveEmployeeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveEmployeeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveEmployeeReqMultiError) AllErrors() []error { return m }

// RemoveEmployeeReqValidationError is the validation error returned by
// RemoveEmployeeReq.Validate if the designated constraints aren't met.
type RemoveEmployeeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveEmployeeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveEmployeeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveEmployeeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveEmployeeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveEmployeeReqValidationError) ErrorName() string {
	return "RemoveEmployeeReqValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveEmployeeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveEmployeeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveEmployeeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveEmployeeReqValidationError{}

// Validate checks the field values on RemoveEmployeeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveEmployeeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveEmployeeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveEmployeeRespMultiError, or nil if none found.
func (m *RemoveEmployeeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveEmployeeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveEmployeeRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveEmployeeRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveEmployeeRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveEmployeeRespMultiError(errors)
	}

	return nil
}

// RemoveEmployeeRespMultiError is an error wrapping multiple validation errors
// returned by RemoveEmployeeResp.ValidateAll() if the designated constraints
// aren't met.
type RemoveEmployeeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveEmployeeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveEmployeeRespMultiError) AllErrors() []error { return m }

// RemoveEmployeeRespValidationError is the validation error returned by
// RemoveEmployeeResp.Validate if the designated constraints aren't met.
type RemoveEmployeeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveEmployeeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveEmployeeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveEmployeeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveEmployeeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveEmployeeRespValidationError) ErrorName() string {
	return "RemoveEmployeeRespValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveEmployeeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveEmployeeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveEmployeeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveEmployeeRespValidationError{}

// Validate checks the field values on RemoveEmployeeRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveEmployeeRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveEmployeeRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveEmployeeRespDataMultiError, or nil if none found.
func (m *RemoveEmployeeRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveEmployeeRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for EmployeeId

	if len(errors) > 0 {
		return RemoveEmployeeRespDataMultiError(errors)
	}

	return nil
}

// RemoveEmployeeRespDataMultiError is an error wrapping multiple validation
// errors returned by RemoveEmployeeRespData.ValidateAll() if the designated
// constraints aren't met.
type RemoveEmployeeRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveEmployeeRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveEmployeeRespDataMultiError) AllErrors() []error { return m }

// RemoveEmployeeRespDataValidationError is the validation error returned by
// RemoveEmployeeRespData.Validate if the designated constraints aren't met.
type RemoveEmployeeRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveEmployeeRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveEmployeeRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveEmployeeRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveEmployeeRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveEmployeeRespDataValidationError) ErrorName() string {
	return "RemoveEmployeeRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveEmployeeRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveEmployeeRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveEmployeeRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveEmployeeRespDataValidationError{}

// Validate checks the field values on SetEmployeeRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetEmployeeRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetEmployeeRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetEmployeeRoleReqMultiError, or nil if none found.
func (m *SetEmployeeRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetEmployeeRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperatorEid() <= 0 {
		err := SetEmployeeRoleReqValidationError{
			field:  "OperatorEid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEmployeeId() <= 0 {
		err := SetEmployeeRoleReqValidationError{
			field:  "EmployeeId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _SetEmployeeRoleReq_EmployeeRole_NotInLookup[m.GetEmployeeRole()]; ok {
		err := SetEmployeeRoleReqValidationError{
			field:  "EmployeeRole",
			reason: "value must not be in list [UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetEmployeeRoleReqMultiError(errors)
	}

	return nil
}

// SetEmployeeRoleReqMultiError is an error wrapping multiple validation errors
// returned by SetEmployeeRoleReq.ValidateAll() if the designated constraints
// aren't met.
type SetEmployeeRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetEmployeeRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetEmployeeRoleReqMultiError) AllErrors() []error { return m }

// SetEmployeeRoleReqValidationError is the validation error returned by
// SetEmployeeRoleReq.Validate if the designated constraints aren't met.
type SetEmployeeRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetEmployeeRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetEmployeeRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetEmployeeRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetEmployeeRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetEmployeeRoleReqValidationError) ErrorName() string {
	return "SetEmployeeRoleReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetEmployeeRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetEmployeeRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetEmployeeRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetEmployeeRoleReqValidationError{}

var _SetEmployeeRoleReq_EmployeeRole_NotInLookup = map[enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole]struct{}{
	0: {},
}

// Validate checks the field values on SetEmployeeRoleResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetEmployeeRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetEmployeeRoleResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetEmployeeRoleRespMultiError, or nil if none found.
func (m *SetEmployeeRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetEmployeeRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetEmployeeRoleRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetEmployeeRoleRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetEmployeeRoleRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetEmployeeRoleRespMultiError(errors)
	}

	return nil
}

// SetEmployeeRoleRespMultiError is an error wrapping multiple validation
// errors returned by SetEmployeeRoleResp.ValidateAll() if the designated
// constraints aren't met.
type SetEmployeeRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetEmployeeRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetEmployeeRoleRespMultiError) AllErrors() []error { return m }

// SetEmployeeRoleRespValidationError is the validation error returned by
// SetEmployeeRoleResp.Validate if the designated constraints aren't met.
type SetEmployeeRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetEmployeeRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetEmployeeRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetEmployeeRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetEmployeeRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetEmployeeRoleRespValidationError) ErrorName() string {
	return "SetEmployeeRoleRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetEmployeeRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetEmployeeRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetEmployeeRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetEmployeeRoleRespValidationError{}

// Validate checks the field values on SetEmployeeRoleRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetEmployeeRoleRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetEmployeeRoleRespData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetEmployeeRoleRespDataMultiError, or nil if none found.
func (m *SetEmployeeRoleRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *SetEmployeeRoleRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for EmployeeId

	// no validation rules for EmployeeRole

	if len(errors) > 0 {
		return SetEmployeeRoleRespDataMultiError(errors)
	}

	return nil
}

// SetEmployeeRoleRespDataMultiError is an error wrapping multiple validation
// errors returned by SetEmployeeRoleRespData.ValidateAll() if the designated
// constraints aren't met.
type SetEmployeeRoleRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetEmployeeRoleRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetEmployeeRoleRespDataMultiError) AllErrors() []error { return m }

// SetEmployeeRoleRespDataValidationError is the validation error returned by
// SetEmployeeRoleRespData.Validate if the designated constraints aren't met.
type SetEmployeeRoleRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetEmployeeRoleRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetEmployeeRoleRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetEmployeeRoleRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetEmployeeRoleRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetEmployeeRoleRespDataValidationError) ErrorName() string {
	return "SetEmployeeRoleRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e SetEmployeeRoleRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetEmployeeRoleRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetEmployeeRoleRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetEmployeeRoleRespDataValidationError{}

// Validate checks the field values on SetEmployeeStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetEmployeeStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetEmployeeStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetEmployeeStatusReqMultiError, or nil if none found.
func (m *SetEmployeeStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetEmployeeStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperatorEid() <= 0 {
		err := SetEmployeeStatusReqValidationError{
			field:  "OperatorEid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEmployeeId() <= 0 {
		err := SetEmployeeStatusReqValidationError{
			field:  "EmployeeId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _SetEmployeeStatusReq_EmployeeStatus_NotInLookup[m.GetEmployeeStatus()]; ok {
		err := SetEmployeeStatusReqValidationError{
			field:  "EmployeeStatus",
			reason: "value must not be in list [UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetEmployeeStatusReqMultiError(errors)
	}

	return nil
}

// SetEmployeeStatusReqMultiError is an error wrapping multiple validation
// errors returned by SetEmployeeStatusReq.ValidateAll() if the designated
// constraints aren't met.
type SetEmployeeStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetEmployeeStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetEmployeeStatusReqMultiError) AllErrors() []error { return m }

// SetEmployeeStatusReqValidationError is the validation error returned by
// SetEmployeeStatusReq.Validate if the designated constraints aren't met.
type SetEmployeeStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetEmployeeStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetEmployeeStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetEmployeeStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetEmployeeStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetEmployeeStatusReqValidationError) ErrorName() string {
	return "SetEmployeeStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetEmployeeStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetEmployeeStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetEmployeeStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetEmployeeStatusReqValidationError{}

var _SetEmployeeStatusReq_EmployeeStatus_NotInLookup = map[enumv1.OrgEmployeeStatusEnum_OrgEmployeeStatus]struct{}{
	0: {},
}

// Validate checks the field values on SetEmployeeStatusResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetEmployeeStatusResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetEmployeeStatusResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetEmployeeStatusRespMultiError, or nil if none found.
func (m *SetEmployeeStatusResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetEmployeeStatusResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetEmployeeStatusRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetEmployeeStatusRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetEmployeeStatusRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetEmployeeStatusRespMultiError(errors)
	}

	return nil
}

// SetEmployeeStatusRespMultiError is an error wrapping multiple validation
// errors returned by SetEmployeeStatusResp.ValidateAll() if the designated
// constraints aren't met.
type SetEmployeeStatusRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetEmployeeStatusRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetEmployeeStatusRespMultiError) AllErrors() []error { return m }

// SetEmployeeStatusRespValidationError is the validation error returned by
// SetEmployeeStatusResp.Validate if the designated constraints aren't met.
type SetEmployeeStatusRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetEmployeeStatusRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetEmployeeStatusRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetEmployeeStatusRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetEmployeeStatusRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetEmployeeStatusRespValidationError) ErrorName() string {
	return "SetEmployeeStatusRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetEmployeeStatusRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetEmployeeStatusResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetEmployeeStatusRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetEmployeeStatusRespValidationError{}

// Validate checks the field values on SetEmployeeStatusRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetEmployeeStatusRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetEmployeeStatusRespData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetEmployeeStatusRespDataMultiError, or nil if none found.
func (m *SetEmployeeStatusRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *SetEmployeeStatusRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for EmployeeId

	// no validation rules for EmployeeStatus

	if len(errors) > 0 {
		return SetEmployeeStatusRespDataMultiError(errors)
	}

	return nil
}

// SetEmployeeStatusRespDataMultiError is an error wrapping multiple validation
// errors returned by SetEmployeeStatusRespData.ValidateAll() if the
// designated constraints aren't met.
type SetEmployeeStatusRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetEmployeeStatusRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetEmployeeStatusRespDataMultiError) AllErrors() []error { return m }

// SetEmployeeStatusRespDataValidationError is the validation error returned by
// SetEmployeeStatusRespData.Validate if the designated constraints aren't met.
type SetEmployeeStatusRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetEmployeeStatusRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetEmployeeStatusRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetEmployeeStatusRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetEmployeeStatusRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetEmployeeStatusRespDataValidationError) ErrorName() string {
	return "SetEmployeeStatusRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e SetEmployeeStatusRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetEmployeeStatusRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetEmployeeStatusRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetEmployeeStatusRespDataValidationError{}
