// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/org-service/v1/resources/org.resource.v1.proto

package resourcev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enumv1 "github.com/go-micro-saas/organization-service/api/org-service/v1/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enumv1.OrgTypeEnum_OrgType(0)
)

// Validate checks the field values on PingReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PingReqMultiError, or nil if none found.
func (m *PingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return PingReqMultiError(errors)
	}

	return nil
}

// PingReqMultiError is an error wrapping multiple validation errors returned
// by PingReq.ValidateAll() if the designated constraints aren't met.
type PingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingReqMultiError) AllErrors() []error { return m }

// PingReqValidationError is the validation error returned by PingReq.Validate
// if the designated constraints aren't met.
type PingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingReqValidationError) ErrorName() string { return "PingReqValidationError" }

// Error satisfies the builtin error interface
func (e PingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingReqValidationError{}

// Validate checks the field values on PingResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRespMultiError, or nil
// if none found.
func (m *PingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PingRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PingRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PingRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PingRespMultiError(errors)
	}

	return nil
}

// PingRespMultiError is an error wrapping multiple validation errors returned
// by PingResp.ValidateAll() if the designated constraints aren't met.
type PingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRespMultiError) AllErrors() []error { return m }

// PingRespValidationError is the validation error returned by
// PingResp.Validate if the designated constraints aren't met.
type PingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRespValidationError) ErrorName() string { return "PingRespValidationError" }

// Error satisfies the builtin error interface
func (e PingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRespValidationError{}

// Validate checks the field values on PingRespData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRespData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRespDataMultiError, or
// nil if none found.
func (m *PingRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return PingRespDataMultiError(errors)
	}

	return nil
}

// PingRespDataMultiError is an error wrapping multiple validation errors
// returned by PingRespData.ValidateAll() if the designated constraints aren't met.
type PingRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRespDataMultiError) AllErrors() []error { return m }

// PingRespDataValidationError is the validation error returned by
// PingRespData.Validate if the designated constraints aren't met.
type PingRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRespDataValidationError) ErrorName() string { return "PingRespDataValidationError" }

// Error satisfies the builtin error interface
func (e PingRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRespDataValidationError{}

// Validate checks the field values on Org with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Org) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Org with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrgMultiError, or nil if none found.
func (m *Org) ValidateAll() error {
	return m.validate(true)
}

func (m *Org) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedTime

	// no validation rules for UpdatedTime

	// no validation rules for DeletedTime

	// no validation rules for OrgId

	// no validation rules for OrgName

	// no validation rules for OrgAvatar

	// no validation rules for OrgContactName

	// no validation rules for OrgContactPhone

	// no validation rules for OrgContactEmail

	// no validation rules for OrgType

	// no validation rules for OrgStatus

	// no validation rules for OrgIndustryId

	// no validation rules for OrgScaleId

	// no validation rules for OrgAddress

	// no validation rules for OrgZipCode

	// no validation rules for OrgCreatorId

	if len(errors) > 0 {
		return OrgMultiError(errors)
	}

	return nil
}

// OrgMultiError is an error wrapping multiple validation errors returned by
// Org.ValidateAll() if the designated constraints aren't met.
type OrgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgMultiError) AllErrors() []error { return m }

// OrgValidationError is the validation error returned by Org.Validate if the
// designated constraints aren't met.
type OrgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgValidationError) ErrorName() string { return "OrgValidationError" }

// Error satisfies the builtin error interface
func (e OrgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgValidationError{}

// Validate checks the field values on CreateOrgReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateOrgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateOrgReqMultiError, or
// nil if none found.
func (m *CreateOrgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCreatorId() <= 0 {
		err := CreateOrgReqValidationError{
			field:  "CreatorId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCreatorName()) < 1 {
		err := CreateOrgReqValidationError{
			field:  "CreatorName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCreatorAvatar() != "" {

	}

	if utf8.RuneCountInString(m.GetOrgName()) < 1 {
		err := CreateOrgReqValidationError{
			field:  "OrgName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrgAvatar() != "" {

	}

	if _, ok := _CreateOrgReq_OrgType_NotInLookup[m.GetOrgType()]; ok {
		err := CreateOrgReqValidationError{
			field:  "OrgType",
			reason: "value must not be in list [UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrgReqMultiError(errors)
	}

	return nil
}

// CreateOrgReqMultiError is an error wrapping multiple validation errors
// returned by CreateOrgReq.ValidateAll() if the designated constraints aren't met.
type CreateOrgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgReqMultiError) AllErrors() []error { return m }

// CreateOrgReqValidationError is the validation error returned by
// CreateOrgReq.Validate if the designated constraints aren't met.
type CreateOrgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgReqValidationError) ErrorName() string { return "CreateOrgReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateOrgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgReqValidationError{}

var _CreateOrgReq_OrgType_NotInLookup = map[enumv1.OrgTypeEnum_OrgType]struct{}{
	0: {},
}

// Validate checks the field values on OnlyCreateOrgReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OnlyCreateOrgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlyCreateOrgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnlyCreateOrgReqMultiError, or nil if none found.
func (m *OnlyCreateOrgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlyCreateOrgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCreatorId() <= 0 {
		err := OnlyCreateOrgReqValidationError{
			field:  "CreatorId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgName()) < 1 {
		err := OnlyCreateOrgReqValidationError{
			field:  "OrgName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrgAvatar() != "" {

	}

	if _, ok := _OnlyCreateOrgReq_OrgType_NotInLookup[m.GetOrgType()]; ok {
		err := OnlyCreateOrgReqValidationError{
			field:  "OrgType",
			reason: "value must not be in list [UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OnlyCreateOrgReqMultiError(errors)
	}

	return nil
}

// OnlyCreateOrgReqMultiError is an error wrapping multiple validation errors
// returned by OnlyCreateOrgReq.ValidateAll() if the designated constraints
// aren't met.
type OnlyCreateOrgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlyCreateOrgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlyCreateOrgReqMultiError) AllErrors() []error { return m }

// OnlyCreateOrgReqValidationError is the validation error returned by
// OnlyCreateOrgReq.Validate if the designated constraints aren't met.
type OnlyCreateOrgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlyCreateOrgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlyCreateOrgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlyCreateOrgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlyCreateOrgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlyCreateOrgReqValidationError) ErrorName() string { return "OnlyCreateOrgReqValidationError" }

// Error satisfies the builtin error interface
func (e OnlyCreateOrgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlyCreateOrgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlyCreateOrgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlyCreateOrgReqValidationError{}

var _OnlyCreateOrgReq_OrgType_NotInLookup = map[enumv1.OrgTypeEnum_OrgType]struct{}{
	0: {},
}

// Validate checks the field values on CreateOrgResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateOrgResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateOrgRespMultiError, or
// nil if none found.
func (m *CreateOrgResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrgRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrgRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrgRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrgRespMultiError(errors)
	}

	return nil
}

// CreateOrgRespMultiError is an error wrapping multiple validation errors
// returned by CreateOrgResp.ValidateAll() if the designated constraints
// aren't met.
type CreateOrgRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgRespMultiError) AllErrors() []error { return m }

// CreateOrgRespValidationError is the validation error returned by
// CreateOrgResp.Validate if the designated constraints aren't met.
type CreateOrgRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgRespValidationError) ErrorName() string { return "CreateOrgRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateOrgRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgRespValidationError{}

// Validate checks the field values on CreateOrgRespData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgRespDataMultiError, or nil if none found.
func (m *CreateOrgRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for OrgName

	// no validation rules for OrgAvatar

	// no validation rules for OrgType

	if len(errors) > 0 {
		return CreateOrgRespDataMultiError(errors)
	}

	return nil
}

// CreateOrgRespDataMultiError is an error wrapping multiple validation errors
// returned by CreateOrgRespData.ValidateAll() if the designated constraints
// aren't met.
type CreateOrgRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgRespDataMultiError) AllErrors() []error { return m }

// CreateOrgRespDataValidationError is the validation error returned by
// CreateOrgRespData.Validate if the designated constraints aren't met.
type CreateOrgRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgRespDataValidationError) ErrorName() string {
	return "CreateOrgRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgRespDataValidationError{}

// Validate checks the field values on AddEmployeeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddEmployeeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddEmployeeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddEmployeeReqMultiError,
// or nil if none found.
func (m *AddEmployeeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddEmployeeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperatorUid() <= 0 {
		err := AddEmployeeReqValidationError{
			field:  "OperatorUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrgId() <= 0 {
		err := AddEmployeeReqValidationError{
			field:  "OrgId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := AddEmployeeReqValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := AddEmployeeReqValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddEmployeeReq_EmployeeRole_NotInLookup[m.GetEmployeeRole()]; ok {
		err := AddEmployeeReqValidationError{
			field:  "EmployeeRole",
			reason: "value must not be in list [UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserAvatar() != "" {

	}

	if m.GetUserPhone() != "" {

	}

	if m.GetUserEmail() != "" {

	}

	if len(errors) > 0 {
		return AddEmployeeReqMultiError(errors)
	}

	return nil
}

// AddEmployeeReqMultiError is an error wrapping multiple validation errors
// returned by AddEmployeeReq.ValidateAll() if the designated constraints
// aren't met.
type AddEmployeeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddEmployeeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddEmployeeReqMultiError) AllErrors() []error { return m }

// AddEmployeeReqValidationError is the validation error returned by
// AddEmployeeReq.Validate if the designated constraints aren't met.
type AddEmployeeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddEmployeeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddEmployeeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddEmployeeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddEmployeeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddEmployeeReqValidationError) ErrorName() string { return "AddEmployeeReqValidationError" }

// Error satisfies the builtin error interface
func (e AddEmployeeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddEmployeeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddEmployeeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddEmployeeReqValidationError{}

var _AddEmployeeReq_EmployeeRole_NotInLookup = map[enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole]struct{}{
	0: {},
}

// Validate checks the field values on AddEmployeeResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddEmployeeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddEmployeeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddEmployeeRespMultiError, or nil if none found.
func (m *AddEmployeeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddEmployeeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddEmployeeRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddEmployeeRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddEmployeeRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddEmployeeRespMultiError(errors)
	}

	return nil
}

// AddEmployeeRespMultiError is an error wrapping multiple validation errors
// returned by AddEmployeeResp.ValidateAll() if the designated constraints
// aren't met.
type AddEmployeeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddEmployeeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddEmployeeRespMultiError) AllErrors() []error { return m }

// AddEmployeeRespValidationError is the validation error returned by
// AddEmployeeResp.Validate if the designated constraints aren't met.
type AddEmployeeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddEmployeeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddEmployeeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddEmployeeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddEmployeeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddEmployeeRespValidationError) ErrorName() string { return "AddEmployeeRespValidationError" }

// Error satisfies the builtin error interface
func (e AddEmployeeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddEmployeeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddEmployeeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddEmployeeRespValidationError{}

// Validate checks the field values on AddEmployeeRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddEmployeeRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddEmployeeRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddEmployeeRespDataMultiError, or nil if none found.
func (m *AddEmployeeRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *AddEmployeeRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for UserId

	// no validation rules for EmployeeId

	// no validation rules for EmployeeName

	// no validation rules for EmployeeAvatar

	// no validation rules for EmployeeStatus

	// no validation rules for EmployeeRole

	if len(errors) > 0 {
		return AddEmployeeRespDataMultiError(errors)
	}

	return nil
}

// AddEmployeeRespDataMultiError is an error wrapping multiple validation
// errors returned by AddEmployeeRespData.ValidateAll() if the designated
// constraints aren't met.
type AddEmployeeRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddEmployeeRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddEmployeeRespDataMultiError) AllErrors() []error { return m }

// AddEmployeeRespDataValidationError is the validation error returned by
// AddEmployeeRespData.Validate if the designated constraints aren't met.
type AddEmployeeRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddEmployeeRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddEmployeeRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddEmployeeRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddEmployeeRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddEmployeeRespDataValidationError) ErrorName() string {
	return "AddEmployeeRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e AddEmployeeRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddEmployeeRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddEmployeeRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddEmployeeRespDataValidationError{}

// Validate checks the field values on CreateInviteRecordForLinkReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInviteRecordForLinkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInviteRecordForLinkReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInviteRecordForLinkReqMultiError, or nil if none found.
func (m *CreateInviteRecordForLinkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInviteRecordForLinkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperatorUid() <= 0 {
		err := CreateInviteRecordForLinkReqValidationError{
			field:  "OperatorUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrgId() <= 0 {
		err := CreateInviteRecordForLinkReqValidationError{
			field:  "OrgId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateInviteRecordForLinkReq_InviteEmployeeRole_NotInLookup[m.GetInviteEmployeeRole()]; ok {
		err := CreateInviteRecordForLinkReqValidationError{
			field:  "InviteEmployeeRole",
			reason: "value must not be in list [UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateInviteRecordForLinkReqMultiError(errors)
	}

	return nil
}

// CreateInviteRecordForLinkReqMultiError is an error wrapping multiple
// validation errors returned by CreateInviteRecordForLinkReq.ValidateAll() if
// the designated constraints aren't met.
type CreateInviteRecordForLinkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInviteRecordForLinkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInviteRecordForLinkReqMultiError) AllErrors() []error { return m }

// CreateInviteRecordForLinkReqValidationError is the validation error returned
// by CreateInviteRecordForLinkReq.Validate if the designated constraints
// aren't met.
type CreateInviteRecordForLinkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInviteRecordForLinkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInviteRecordForLinkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInviteRecordForLinkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInviteRecordForLinkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInviteRecordForLinkReqValidationError) ErrorName() string {
	return "CreateInviteRecordForLinkReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInviteRecordForLinkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInviteRecordForLinkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInviteRecordForLinkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInviteRecordForLinkReqValidationError{}

var _CreateInviteRecordForLinkReq_InviteEmployeeRole_NotInLookup = map[enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole]struct{}{
	0: {},
}

// Validate checks the field values on CreateInviteRecordForLinkResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInviteRecordForLinkResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInviteRecordForLinkResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateInviteRecordForLinkRespMultiError, or nil if none found.
func (m *CreateInviteRecordForLinkResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInviteRecordForLinkResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInviteRecordForLinkRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInviteRecordForLinkRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInviteRecordForLinkRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateInviteRecordForLinkRespMultiError(errors)
	}

	return nil
}

// CreateInviteRecordForLinkRespMultiError is an error wrapping multiple
// validation errors returned by CreateInviteRecordForLinkResp.ValidateAll()
// if the designated constraints aren't met.
type CreateInviteRecordForLinkRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInviteRecordForLinkRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInviteRecordForLinkRespMultiError) AllErrors() []error { return m }

// CreateInviteRecordForLinkRespValidationError is the validation error
// returned by CreateInviteRecordForLinkResp.Validate if the designated
// constraints aren't met.
type CreateInviteRecordForLinkRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInviteRecordForLinkRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInviteRecordForLinkRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInviteRecordForLinkRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInviteRecordForLinkRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInviteRecordForLinkRespValidationError) ErrorName() string {
	return "CreateInviteRecordForLinkRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInviteRecordForLinkRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInviteRecordForLinkResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInviteRecordForLinkRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInviteRecordForLinkRespValidationError{}

// Validate checks the field values on CreateInviteRecordForLinkRespData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateInviteRecordForLinkRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInviteRecordForLinkRespData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateInviteRecordForLinkRespDataMultiError, or nil if none found.
func (m *CreateInviteRecordForLinkRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInviteRecordForLinkRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InviteId

	// no validation rules for InviteCode

	if all {
		switch v := interface{}(m.GetExpireTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInviteRecordForLinkRespDataValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInviteRecordForLinkRespDataValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpireTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInviteRecordForLinkRespDataValidationError{
				field:  "ExpireTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateInviteRecordForLinkRespDataMultiError(errors)
	}

	return nil
}

// CreateInviteRecordForLinkRespDataMultiError is an error wrapping multiple
// validation errors returned by
// CreateInviteRecordForLinkRespData.ValidateAll() if the designated
// constraints aren't met.
type CreateInviteRecordForLinkRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInviteRecordForLinkRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInviteRecordForLinkRespDataMultiError) AllErrors() []error { return m }

// CreateInviteRecordForLinkRespDataValidationError is the validation error
// returned by CreateInviteRecordForLinkRespData.Validate if the designated
// constraints aren't met.
type CreateInviteRecordForLinkRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInviteRecordForLinkRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInviteRecordForLinkRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInviteRecordForLinkRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInviteRecordForLinkRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInviteRecordForLinkRespDataValidationError) ErrorName() string {
	return "CreateInviteRecordForLinkRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInviteRecordForLinkRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInviteRecordForLinkRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInviteRecordForLinkRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInviteRecordForLinkRespDataValidationError{}

// Validate checks the field values on CreateInviteRecordForEmployeeReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateInviteRecordForEmployeeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInviteRecordForEmployeeReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateInviteRecordForEmployeeReqMultiError, or nil if none found.
func (m *CreateInviteRecordForEmployeeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInviteRecordForEmployeeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperatorUid() <= 0 {
		err := CreateInviteRecordForEmployeeReqValidationError{
			field:  "OperatorUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrgId() <= 0 {
		err := CreateInviteRecordForEmployeeReqValidationError{
			field:  "OrgId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetInviteUserId() <= 0 {
		err := CreateInviteRecordForEmployeeReqValidationError{
			field:  "InviteUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetInviteAccount()); l < 1 || l > 128 {
		err := CreateInviteRecordForEmployeeReqValidationError{
			field:  "InviteAccount",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateInviteRecordForEmployeeReq_InviteAccountType_NotInLookup[m.GetInviteAccountType()]; ok {
		err := CreateInviteRecordForEmployeeReqValidationError{
			field:  "InviteAccountType",
			reason: "value must not be in list [UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateInviteRecordForEmployeeReq_InviteEmployeeRole_NotInLookup[m.GetInviteEmployeeRole()]; ok {
		err := CreateInviteRecordForEmployeeReqValidationError{
			field:  "InviteEmployeeRole",
			reason: "value must not be in list [UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateInviteRecordForEmployeeReqMultiError(errors)
	}

	return nil
}

// CreateInviteRecordForEmployeeReqMultiError is an error wrapping multiple
// validation errors returned by
// CreateInviteRecordForEmployeeReq.ValidateAll() if the designated
// constraints aren't met.
type CreateInviteRecordForEmployeeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInviteRecordForEmployeeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInviteRecordForEmployeeReqMultiError) AllErrors() []error { return m }

// CreateInviteRecordForEmployeeReqValidationError is the validation error
// returned by CreateInviteRecordForEmployeeReq.Validate if the designated
// constraints aren't met.
type CreateInviteRecordForEmployeeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInviteRecordForEmployeeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInviteRecordForEmployeeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInviteRecordForEmployeeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInviteRecordForEmployeeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInviteRecordForEmployeeReqValidationError) ErrorName() string {
	return "CreateInviteRecordForEmployeeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInviteRecordForEmployeeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInviteRecordForEmployeeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInviteRecordForEmployeeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInviteRecordForEmployeeReqValidationError{}

var _CreateInviteRecordForEmployeeReq_InviteAccountType_NotInLookup = map[enumv1.OrgInviteAccountTypeEnum_OrgInviteAccountType]struct{}{
	0: {},
}

var _CreateInviteRecordForEmployeeReq_InviteEmployeeRole_NotInLookup = map[enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole]struct{}{
	0: {},
}

// Validate checks the field values on CreateInviteRecordForEmployeeResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateInviteRecordForEmployeeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInviteRecordForEmployeeResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateInviteRecordForEmployeeRespMultiError, or nil if none found.
func (m *CreateInviteRecordForEmployeeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInviteRecordForEmployeeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInviteRecordForEmployeeRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInviteRecordForEmployeeRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInviteRecordForEmployeeRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateInviteRecordForEmployeeRespMultiError(errors)
	}

	return nil
}

// CreateInviteRecordForEmployeeRespMultiError is an error wrapping multiple
// validation errors returned by
// CreateInviteRecordForEmployeeResp.ValidateAll() if the designated
// constraints aren't met.
type CreateInviteRecordForEmployeeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInviteRecordForEmployeeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInviteRecordForEmployeeRespMultiError) AllErrors() []error { return m }

// CreateInviteRecordForEmployeeRespValidationError is the validation error
// returned by CreateInviteRecordForEmployeeResp.Validate if the designated
// constraints aren't met.
type CreateInviteRecordForEmployeeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInviteRecordForEmployeeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInviteRecordForEmployeeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInviteRecordForEmployeeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInviteRecordForEmployeeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInviteRecordForEmployeeRespValidationError) ErrorName() string {
	return "CreateInviteRecordForEmployeeRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInviteRecordForEmployeeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInviteRecordForEmployeeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInviteRecordForEmployeeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInviteRecordForEmployeeRespValidationError{}

// Validate checks the field values on CreateInviteRecordForEmployeeRespData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateInviteRecordForEmployeeRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInviteRecordForEmployeeRespData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateInviteRecordForEmployeeRespDataMultiError, or nil if none found.
func (m *CreateInviteRecordForEmployeeRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInviteRecordForEmployeeRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InviteId

	// no validation rules for InviteCode

	if all {
		switch v := interface{}(m.GetExpireTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInviteRecordForEmployeeRespDataValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInviteRecordForEmployeeRespDataValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpireTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInviteRecordForEmployeeRespDataValidationError{
				field:  "ExpireTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AssignEmployeeId

	if len(errors) > 0 {
		return CreateInviteRecordForEmployeeRespDataMultiError(errors)
	}

	return nil
}

// CreateInviteRecordForEmployeeRespDataMultiError is an error wrapping
// multiple validation errors returned by
// CreateInviteRecordForEmployeeRespData.ValidateAll() if the designated
// constraints aren't met.
type CreateInviteRecordForEmployeeRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInviteRecordForEmployeeRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInviteRecordForEmployeeRespDataMultiError) AllErrors() []error { return m }

// CreateInviteRecordForEmployeeRespDataValidationError is the validation error
// returned by CreateInviteRecordForEmployeeRespData.Validate if the
// designated constraints aren't met.
type CreateInviteRecordForEmployeeRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInviteRecordForEmployeeRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInviteRecordForEmployeeRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInviteRecordForEmployeeRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInviteRecordForEmployeeRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInviteRecordForEmployeeRespDataValidationError) ErrorName() string {
	return "CreateInviteRecordForEmployeeRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInviteRecordForEmployeeRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInviteRecordForEmployeeRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInviteRecordForEmployeeRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInviteRecordForEmployeeRespDataValidationError{}

// Validate checks the field values on JoinByInviteLinkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JoinByInviteLinkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinByInviteLinkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinByInviteLinkReqMultiError, or nil if none found.
func (m *JoinByInviteLinkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinByInviteLinkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetInviteId() <= 0 {
		err := JoinByInviteLinkReqValidationError{
			field:  "InviteId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetInviteCode()); l < 1 || l > 128 {
		err := JoinByInviteLinkReqValidationError{
			field:  "InviteCode",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := JoinByInviteLinkReqValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := JoinByInviteLinkReqValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserAvatar() != "" {

	}

	if m.GetUserPhone() != "" {

	}

	if m.GetUserEmail() != "" {

	}

	if len(errors) > 0 {
		return JoinByInviteLinkReqMultiError(errors)
	}

	return nil
}

// JoinByInviteLinkReqMultiError is an error wrapping multiple validation
// errors returned by JoinByInviteLinkReq.ValidateAll() if the designated
// constraints aren't met.
type JoinByInviteLinkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinByInviteLinkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinByInviteLinkReqMultiError) AllErrors() []error { return m }

// JoinByInviteLinkReqValidationError is the validation error returned by
// JoinByInviteLinkReq.Validate if the designated constraints aren't met.
type JoinByInviteLinkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinByInviteLinkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinByInviteLinkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinByInviteLinkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinByInviteLinkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinByInviteLinkReqValidationError) ErrorName() string {
	return "JoinByInviteLinkReqValidationError"
}

// Error satisfies the builtin error interface
func (e JoinByInviteLinkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinByInviteLinkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinByInviteLinkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinByInviteLinkReqValidationError{}

// Validate checks the field values on JoinByInviteLinkResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JoinByInviteLinkResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinByInviteLinkResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinByInviteLinkRespMultiError, or nil if none found.
func (m *JoinByInviteLinkResp) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinByInviteLinkResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinByInviteLinkRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinByInviteLinkRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinByInviteLinkRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JoinByInviteLinkRespMultiError(errors)
	}

	return nil
}

// JoinByInviteLinkRespMultiError is an error wrapping multiple validation
// errors returned by JoinByInviteLinkResp.ValidateAll() if the designated
// constraints aren't met.
type JoinByInviteLinkRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinByInviteLinkRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinByInviteLinkRespMultiError) AllErrors() []error { return m }

// JoinByInviteLinkRespValidationError is the validation error returned by
// JoinByInviteLinkResp.Validate if the designated constraints aren't met.
type JoinByInviteLinkRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinByInviteLinkRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinByInviteLinkRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinByInviteLinkRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinByInviteLinkRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinByInviteLinkRespValidationError) ErrorName() string {
	return "JoinByInviteLinkRespValidationError"
}

// Error satisfies the builtin error interface
func (e JoinByInviteLinkRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinByInviteLinkResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinByInviteLinkRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinByInviteLinkRespValidationError{}

// Validate checks the field values on JoinByInviteLinkRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JoinByInviteLinkRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinByInviteLinkRespData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinByInviteLinkRespDataMultiError, or nil if none found.
func (m *JoinByInviteLinkRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinByInviteLinkRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for UserId

	// no validation rules for EmployeeId

	// no validation rules for EmployeeName

	// no validation rules for EmployeeAvatar

	// no validation rules for EmployeeStatus

	// no validation rules for EmployeeRole

	if len(errors) > 0 {
		return JoinByInviteLinkRespDataMultiError(errors)
	}

	return nil
}

// JoinByInviteLinkRespDataMultiError is an error wrapping multiple validation
// errors returned by JoinByInviteLinkRespData.ValidateAll() if the designated
// constraints aren't met.
type JoinByInviteLinkRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinByInviteLinkRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinByInviteLinkRespDataMultiError) AllErrors() []error { return m }

// JoinByInviteLinkRespDataValidationError is the validation error returned by
// JoinByInviteLinkRespData.Validate if the designated constraints aren't met.
type JoinByInviteLinkRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinByInviteLinkRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinByInviteLinkRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinByInviteLinkRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinByInviteLinkRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinByInviteLinkRespDataValidationError) ErrorName() string {
	return "JoinByInviteLinkRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e JoinByInviteLinkRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinByInviteLinkRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinByInviteLinkRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinByInviteLinkRespDataValidationError{}

// Validate checks the field values on AgreeOrRefuseInviteReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AgreeOrRefuseInviteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgreeOrRefuseInviteReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AgreeOrRefuseInviteReqMultiError, or nil if none found.
func (m *AgreeOrRefuseInviteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AgreeOrRefuseInviteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetInviteId() <= 0 {
		err := AgreeOrRefuseInviteReqValidationError{
			field:  "InviteId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetInviteCode()); l < 1 || l > 128 {
		err := AgreeOrRefuseInviteReqValidationError{
			field:  "InviteCode",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsAgree

	if m.GetUserId() <= 0 {
		err := AgreeOrRefuseInviteReqValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := AgreeOrRefuseInviteReqValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserAvatar() != "" {

	}

	if m.GetUserPhone() != "" {

	}

	if m.GetUserEmail() != "" {

	}

	if len(errors) > 0 {
		return AgreeOrRefuseInviteReqMultiError(errors)
	}

	return nil
}

// AgreeOrRefuseInviteReqMultiError is an error wrapping multiple validation
// errors returned by AgreeOrRefuseInviteReq.ValidateAll() if the designated
// constraints aren't met.
type AgreeOrRefuseInviteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgreeOrRefuseInviteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgreeOrRefuseInviteReqMultiError) AllErrors() []error { return m }

// AgreeOrRefuseInviteReqValidationError is the validation error returned by
// AgreeOrRefuseInviteReq.Validate if the designated constraints aren't met.
type AgreeOrRefuseInviteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgreeOrRefuseInviteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgreeOrRefuseInviteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgreeOrRefuseInviteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgreeOrRefuseInviteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgreeOrRefuseInviteReqValidationError) ErrorName() string {
	return "AgreeOrRefuseInviteReqValidationError"
}

// Error satisfies the builtin error interface
func (e AgreeOrRefuseInviteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgreeOrRefuseInviteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgreeOrRefuseInviteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgreeOrRefuseInviteReqValidationError{}

// Validate checks the field values on AgreeOrRefuseInviteResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AgreeOrRefuseInviteResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgreeOrRefuseInviteResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AgreeOrRefuseInviteRespMultiError, or nil if none found.
func (m *AgreeOrRefuseInviteResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AgreeOrRefuseInviteResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AgreeOrRefuseInviteRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AgreeOrRefuseInviteRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AgreeOrRefuseInviteRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AgreeOrRefuseInviteRespMultiError(errors)
	}

	return nil
}

// AgreeOrRefuseInviteRespMultiError is an error wrapping multiple validation
// errors returned by AgreeOrRefuseInviteResp.ValidateAll() if the designated
// constraints aren't met.
type AgreeOrRefuseInviteRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgreeOrRefuseInviteRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgreeOrRefuseInviteRespMultiError) AllErrors() []error { return m }

// AgreeOrRefuseInviteRespValidationError is the validation error returned by
// AgreeOrRefuseInviteResp.Validate if the designated constraints aren't met.
type AgreeOrRefuseInviteRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgreeOrRefuseInviteRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgreeOrRefuseInviteRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgreeOrRefuseInviteRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgreeOrRefuseInviteRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgreeOrRefuseInviteRespValidationError) ErrorName() string {
	return "AgreeOrRefuseInviteRespValidationError"
}

// Error satisfies the builtin error interface
func (e AgreeOrRefuseInviteRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgreeOrRefuseInviteResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgreeOrRefuseInviteRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgreeOrRefuseInviteRespValidationError{}

// Validate checks the field values on AgreeOrRefuseInviteRespData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AgreeOrRefuseInviteRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgreeOrRefuseInviteRespData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AgreeOrRefuseInviteRespDataMultiError, or nil if none found.
func (m *AgreeOrRefuseInviteRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *AgreeOrRefuseInviteRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for UserId

	// no validation rules for EmployeeId

	// no validation rules for EmployeeName

	// no validation rules for EmployeeAvatar

	// no validation rules for EmployeeStatus

	// no validation rules for EmployeeRole

	if len(errors) > 0 {
		return AgreeOrRefuseInviteRespDataMultiError(errors)
	}

	return nil
}

// AgreeOrRefuseInviteRespDataMultiError is an error wrapping multiple
// validation errors returned by AgreeOrRefuseInviteRespData.ValidateAll() if
// the designated constraints aren't met.
type AgreeOrRefuseInviteRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgreeOrRefuseInviteRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgreeOrRefuseInviteRespDataMultiError) AllErrors() []error { return m }

// AgreeOrRefuseInviteRespDataValidationError is the validation error returned
// by AgreeOrRefuseInviteRespData.Validate if the designated constraints
// aren't met.
type AgreeOrRefuseInviteRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgreeOrRefuseInviteRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgreeOrRefuseInviteRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgreeOrRefuseInviteRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgreeOrRefuseInviteRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgreeOrRefuseInviteRespDataValidationError) ErrorName() string {
	return "AgreeOrRefuseInviteRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e AgreeOrRefuseInviteRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgreeOrRefuseInviteRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgreeOrRefuseInviteRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgreeOrRefuseInviteRespDataValidationError{}

// Validate checks the field values on GetOrgInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrgInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrgInfoReqMultiError, or
// nil if none found.
func (m *GetOrgInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrgId() <= 0 {
		err := GetOrgInfoReqValidationError{
			field:  "OrgId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrgInfoReqMultiError(errors)
	}

	return nil
}

// GetOrgInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetOrgInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetOrgInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgInfoReqMultiError) AllErrors() []error { return m }

// GetOrgInfoReqValidationError is the validation error returned by
// GetOrgInfoReq.Validate if the designated constraints aren't met.
type GetOrgInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgInfoReqValidationError) ErrorName() string { return "GetOrgInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetOrgInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgInfoReqValidationError{}

// Validate checks the field values on GetOrgInfoResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrgInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrgInfoRespMultiError,
// or nil if none found.
func (m *GetOrgInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgInfoRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgInfoRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgInfoRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgInfoRespMultiError(errors)
	}

	return nil
}

// GetOrgInfoRespMultiError is an error wrapping multiple validation errors
// returned by GetOrgInfoResp.ValidateAll() if the designated constraints
// aren't met.
type GetOrgInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgInfoRespMultiError) AllErrors() []error { return m }

// GetOrgInfoRespValidationError is the validation error returned by
// GetOrgInfoResp.Validate if the designated constraints aren't met.
type GetOrgInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgInfoRespValidationError) ErrorName() string { return "GetOrgInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e GetOrgInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgInfoRespValidationError{}

// Validate checks the field values on GetOrgInfoListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrgInfoListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgInfoListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgInfoListReqMultiError, or nil if none found.
func (m *GetOrgInfoListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgInfoListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetOrgIds()) < 1 {
		err := GetOrgInfoListReqValidationError{
			field:  "OrgIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrgInfoListReqMultiError(errors)
	}

	return nil
}

// GetOrgInfoListReqMultiError is an error wrapping multiple validation errors
// returned by GetOrgInfoListReq.ValidateAll() if the designated constraints
// aren't met.
type GetOrgInfoListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgInfoListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgInfoListReqMultiError) AllErrors() []error { return m }

// GetOrgInfoListReqValidationError is the validation error returned by
// GetOrgInfoListReq.Validate if the designated constraints aren't met.
type GetOrgInfoListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgInfoListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgInfoListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgInfoListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgInfoListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgInfoListReqValidationError) ErrorName() string {
	return "GetOrgInfoListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgInfoListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgInfoListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgInfoListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgInfoListReqValidationError{}

// Validate checks the field values on GetOrgInfoListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgInfoListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgInfoListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgInfoListRespMultiError, or nil if none found.
func (m *GetOrgInfoListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgInfoListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrgInfoListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrgInfoListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrgInfoListRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrgInfoListRespMultiError(errors)
	}

	return nil
}

// GetOrgInfoListRespMultiError is an error wrapping multiple validation errors
// returned by GetOrgInfoListResp.ValidateAll() if the designated constraints
// aren't met.
type GetOrgInfoListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgInfoListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgInfoListRespMultiError) AllErrors() []error { return m }

// GetOrgInfoListRespValidationError is the validation error returned by
// GetOrgInfoListResp.Validate if the designated constraints aren't met.
type GetOrgInfoListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgInfoListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgInfoListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgInfoListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgInfoListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgInfoListRespValidationError) ErrorName() string {
	return "GetOrgInfoListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgInfoListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgInfoListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgInfoListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgInfoListRespValidationError{}

// Validate checks the field values on GetOrgEmployeeInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgEmployeeInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgEmployeeInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgEmployeeInfoReqMultiError, or nil if none found.
func (m *GetOrgEmployeeInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgEmployeeInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEmployeeId() <= 0 {
		err := GetOrgEmployeeInfoReqValidationError{
			field:  "EmployeeId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrgEmployeeInfoReqMultiError(errors)
	}

	return nil
}

// GetOrgEmployeeInfoReqMultiError is an error wrapping multiple validation
// errors returned by GetOrgEmployeeInfoReq.ValidateAll() if the designated
// constraints aren't met.
type GetOrgEmployeeInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgEmployeeInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgEmployeeInfoReqMultiError) AllErrors() []error { return m }

// GetOrgEmployeeInfoReqValidationError is the validation error returned by
// GetOrgEmployeeInfoReq.Validate if the designated constraints aren't met.
type GetOrgEmployeeInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgEmployeeInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgEmployeeInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgEmployeeInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgEmployeeInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgEmployeeInfoReqValidationError) ErrorName() string {
	return "GetOrgEmployeeInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgEmployeeInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgEmployeeInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgEmployeeInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgEmployeeInfoReqValidationError{}

// Validate checks the field values on GetOrgEmployeeInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgEmployeeInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgEmployeeInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgEmployeeInfoRespMultiError, or nil if none found.
func (m *GetOrgEmployeeInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgEmployeeInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgEmployeeInfoRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgEmployeeInfoRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgEmployeeInfoRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgEmployeeInfoRespMultiError(errors)
	}

	return nil
}

// GetOrgEmployeeInfoRespMultiError is an error wrapping multiple validation
// errors returned by GetOrgEmployeeInfoResp.ValidateAll() if the designated
// constraints aren't met.
type GetOrgEmployeeInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgEmployeeInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgEmployeeInfoRespMultiError) AllErrors() []error { return m }

// GetOrgEmployeeInfoRespValidationError is the validation error returned by
// GetOrgEmployeeInfoResp.Validate if the designated constraints aren't met.
type GetOrgEmployeeInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgEmployeeInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgEmployeeInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgEmployeeInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgEmployeeInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgEmployeeInfoRespValidationError) ErrorName() string {
	return "GetOrgEmployeeInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgEmployeeInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgEmployeeInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgEmployeeInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgEmployeeInfoRespValidationError{}

// Validate checks the field values on GetOrgEmployeeInfoListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgEmployeeInfoListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgEmployeeInfoListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgEmployeeInfoListReqMultiError, or nil if none found.
func (m *GetOrgEmployeeInfoListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgEmployeeInfoListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetEmployeeIds()) < 1 {
		err := GetOrgEmployeeInfoListReqValidationError{
			field:  "EmployeeIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrgEmployeeInfoListReqMultiError(errors)
	}

	return nil
}

// GetOrgEmployeeInfoListReqMultiError is an error wrapping multiple validation
// errors returned by GetOrgEmployeeInfoListReq.ValidateAll() if the
// designated constraints aren't met.
type GetOrgEmployeeInfoListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgEmployeeInfoListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgEmployeeInfoListReqMultiError) AllErrors() []error { return m }

// GetOrgEmployeeInfoListReqValidationError is the validation error returned by
// GetOrgEmployeeInfoListReq.Validate if the designated constraints aren't met.
type GetOrgEmployeeInfoListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgEmployeeInfoListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgEmployeeInfoListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgEmployeeInfoListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgEmployeeInfoListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgEmployeeInfoListReqValidationError) ErrorName() string {
	return "GetOrgEmployeeInfoListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgEmployeeInfoListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgEmployeeInfoListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgEmployeeInfoListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgEmployeeInfoListReqValidationError{}

// Validate checks the field values on GetOrgEmployeeInfoListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgEmployeeInfoListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgEmployeeInfoListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgEmployeeInfoListRespMultiError, or nil if none found.
func (m *GetOrgEmployeeInfoListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgEmployeeInfoListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrgEmployeeInfoListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrgEmployeeInfoListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrgEmployeeInfoListRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrgEmployeeInfoListRespMultiError(errors)
	}

	return nil
}

// GetOrgEmployeeInfoListRespMultiError is an error wrapping multiple
// validation errors returned by GetOrgEmployeeInfoListResp.ValidateAll() if
// the designated constraints aren't met.
type GetOrgEmployeeInfoListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgEmployeeInfoListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgEmployeeInfoListRespMultiError) AllErrors() []error { return m }

// GetOrgEmployeeInfoListRespValidationError is the validation error returned
// by GetOrgEmployeeInfoListResp.Validate if the designated constraints aren't met.
type GetOrgEmployeeInfoListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgEmployeeInfoListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgEmployeeInfoListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgEmployeeInfoListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgEmployeeInfoListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgEmployeeInfoListRespValidationError) ErrorName() string {
	return "GetOrgEmployeeInfoListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgEmployeeInfoListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgEmployeeInfoListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgEmployeeInfoListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgEmployeeInfoListRespValidationError{}

// Validate checks the field values on GetOrgInviteRecordInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgInviteRecordInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgInviteRecordInfoReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgInviteRecordInfoReqMultiError, or nil if none found.
func (m *GetOrgInviteRecordInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgInviteRecordInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetInviteId() <= 0 {
		err := GetOrgInviteRecordInfoReqValidationError{
			field:  "InviteId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrgInviteRecordInfoReqMultiError(errors)
	}

	return nil
}

// GetOrgInviteRecordInfoReqMultiError is an error wrapping multiple validation
// errors returned by GetOrgInviteRecordInfoReq.ValidateAll() if the
// designated constraints aren't met.
type GetOrgInviteRecordInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgInviteRecordInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgInviteRecordInfoReqMultiError) AllErrors() []error { return m }

// GetOrgInviteRecordInfoReqValidationError is the validation error returned by
// GetOrgInviteRecordInfoReq.Validate if the designated constraints aren't met.
type GetOrgInviteRecordInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgInviteRecordInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgInviteRecordInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgInviteRecordInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgInviteRecordInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgInviteRecordInfoReqValidationError) ErrorName() string {
	return "GetOrgInviteRecordInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgInviteRecordInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgInviteRecordInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgInviteRecordInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgInviteRecordInfoReqValidationError{}

// Validate checks the field values on GetOrgInviteRecordInfoResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgInviteRecordInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgInviteRecordInfoResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgInviteRecordInfoRespMultiError, or nil if none found.
func (m *GetOrgInviteRecordInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgInviteRecordInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgInviteRecordInfoRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgInviteRecordInfoRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgInviteRecordInfoRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgInviteRecordInfoRespMultiError(errors)
	}

	return nil
}

// GetOrgInviteRecordInfoRespMultiError is an error wrapping multiple
// validation errors returned by GetOrgInviteRecordInfoResp.ValidateAll() if
// the designated constraints aren't met.
type GetOrgInviteRecordInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgInviteRecordInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgInviteRecordInfoRespMultiError) AllErrors() []error { return m }

// GetOrgInviteRecordInfoRespValidationError is the validation error returned
// by GetOrgInviteRecordInfoResp.Validate if the designated constraints aren't met.
type GetOrgInviteRecordInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgInviteRecordInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgInviteRecordInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgInviteRecordInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgInviteRecordInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgInviteRecordInfoRespValidationError) ErrorName() string {
	return "GetOrgInviteRecordInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgInviteRecordInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgInviteRecordInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgInviteRecordInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgInviteRecordInfoRespValidationError{}

// Validate checks the field values on GetOrgInviteRecordInfoListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgInviteRecordInfoListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgInviteRecordInfoListReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrgInviteRecordInfoListReqMultiError, or nil if none found.
func (m *GetOrgInviteRecordInfoListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgInviteRecordInfoListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetInviteIds()) < 1 {
		err := GetOrgInviteRecordInfoListReqValidationError{
			field:  "InviteIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrgInviteRecordInfoListReqMultiError(errors)
	}

	return nil
}

// GetOrgInviteRecordInfoListReqMultiError is an error wrapping multiple
// validation errors returned by GetOrgInviteRecordInfoListReq.ValidateAll()
// if the designated constraints aren't met.
type GetOrgInviteRecordInfoListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgInviteRecordInfoListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgInviteRecordInfoListReqMultiError) AllErrors() []error { return m }

// GetOrgInviteRecordInfoListReqValidationError is the validation error
// returned by GetOrgInviteRecordInfoListReq.Validate if the designated
// constraints aren't met.
type GetOrgInviteRecordInfoListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgInviteRecordInfoListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgInviteRecordInfoListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgInviteRecordInfoListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgInviteRecordInfoListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgInviteRecordInfoListReqValidationError) ErrorName() string {
	return "GetOrgInviteRecordInfoListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgInviteRecordInfoListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgInviteRecordInfoListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgInviteRecordInfoListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgInviteRecordInfoListReqValidationError{}

// Validate checks the field values on GetOrgInviteRecordInfoListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgInviteRecordInfoListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgInviteRecordInfoListResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrgInviteRecordInfoListRespMultiError, or nil if none found.
func (m *GetOrgInviteRecordInfoListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgInviteRecordInfoListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrgInviteRecordInfoListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrgInviteRecordInfoListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrgInviteRecordInfoListRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrgInviteRecordInfoListRespMultiError(errors)
	}

	return nil
}

// GetOrgInviteRecordInfoListRespMultiError is an error wrapping multiple
// validation errors returned by GetOrgInviteRecordInfoListResp.ValidateAll()
// if the designated constraints aren't met.
type GetOrgInviteRecordInfoListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgInviteRecordInfoListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgInviteRecordInfoListRespMultiError) AllErrors() []error { return m }

// GetOrgInviteRecordInfoListRespValidationError is the validation error
// returned by GetOrgInviteRecordInfoListResp.Validate if the designated
// constraints aren't met.
type GetOrgInviteRecordInfoListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgInviteRecordInfoListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgInviteRecordInfoListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgInviteRecordInfoListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgInviteRecordInfoListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgInviteRecordInfoListRespValidationError) ErrorName() string {
	return "GetOrgInviteRecordInfoListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgInviteRecordInfoListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgInviteRecordInfoListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgInviteRecordInfoListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgInviteRecordInfoListRespValidationError{}

// Validate checks the field values on GetOrgListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrgListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrgListReqMultiError, or
// nil if none found.
func (m *GetOrgListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPageRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgListReqValidationError{
					field:  "PageRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgListReqValidationError{
					field:  "PageRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgListReqValidationError{
				field:  "PageRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrgName

	if len(errors) > 0 {
		return GetOrgListReqMultiError(errors)
	}

	return nil
}

// GetOrgListReqMultiError is an error wrapping multiple validation errors
// returned by GetOrgListReq.ValidateAll() if the designated constraints
// aren't met.
type GetOrgListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgListReqMultiError) AllErrors() []error { return m }

// GetOrgListReqValidationError is the validation error returned by
// GetOrgListReq.Validate if the designated constraints aren't met.
type GetOrgListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgListReqValidationError) ErrorName() string { return "GetOrgListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetOrgListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgListReqValidationError{}

// Validate checks the field values on GetOrgListResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrgListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrgListRespMultiError,
// or nil if none found.
func (m *GetOrgListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgListRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgListRespMultiError(errors)
	}

	return nil
}

// GetOrgListRespMultiError is an error wrapping multiple validation errors
// returned by GetOrgListResp.ValidateAll() if the designated constraints
// aren't met.
type GetOrgListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgListRespMultiError) AllErrors() []error { return m }

// GetOrgListRespValidationError is the validation error returned by
// GetOrgListResp.Validate if the designated constraints aren't met.
type GetOrgListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgListRespValidationError) ErrorName() string { return "GetOrgListRespValidationError" }

// Error satisfies the builtin error interface
func (e GetOrgListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgListRespValidationError{}

// Validate checks the field values on GetOrgListRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgListRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgListRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgListRespDataMultiError, or nil if none found.
func (m *GetOrgListRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgListRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrgListRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrgListRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrgListRespDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPageInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgListRespDataValidationError{
					field:  "PageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgListRespDataValidationError{
					field:  "PageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgListRespDataValidationError{
				field:  "PageInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgListRespDataMultiError(errors)
	}

	return nil
}

// GetOrgListRespDataMultiError is an error wrapping multiple validation errors
// returned by GetOrgListRespData.ValidateAll() if the designated constraints
// aren't met.
type GetOrgListRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgListRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgListRespDataMultiError) AllErrors() []error { return m }

// GetOrgListRespDataValidationError is the validation error returned by
// GetOrgListRespData.Validate if the designated constraints aren't met.
type GetOrgListRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgListRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgListRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgListRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgListRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgListRespDataValidationError) ErrorName() string {
	return "GetOrgListRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgListRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgListRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgListRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgListRespDataValidationError{}

// Validate checks the field values on GetOrgEmployeeListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgEmployeeListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgEmployeeListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgEmployeeListReqMultiError, or nil if none found.
func (m *GetOrgEmployeeListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgEmployeeListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPageRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgEmployeeListReqValidationError{
					field:  "PageRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgEmployeeListReqValidationError{
					field:  "PageRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgEmployeeListReqValidationError{
				field:  "PageRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EmployeeName

	if len(errors) > 0 {
		return GetOrgEmployeeListReqMultiError(errors)
	}

	return nil
}

// GetOrgEmployeeListReqMultiError is an error wrapping multiple validation
// errors returned by GetOrgEmployeeListReq.ValidateAll() if the designated
// constraints aren't met.
type GetOrgEmployeeListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgEmployeeListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgEmployeeListReqMultiError) AllErrors() []error { return m }

// GetOrgEmployeeListReqValidationError is the validation error returned by
// GetOrgEmployeeListReq.Validate if the designated constraints aren't met.
type GetOrgEmployeeListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgEmployeeListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgEmployeeListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgEmployeeListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgEmployeeListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgEmployeeListReqValidationError) ErrorName() string {
	return "GetOrgEmployeeListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgEmployeeListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgEmployeeListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgEmployeeListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgEmployeeListReqValidationError{}

// Validate checks the field values on GetOrgEmployeeListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgEmployeeListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgEmployeeListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgEmployeeListRespMultiError, or nil if none found.
func (m *GetOrgEmployeeListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgEmployeeListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgEmployeeListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgEmployeeListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgEmployeeListRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgEmployeeListRespMultiError(errors)
	}

	return nil
}

// GetOrgEmployeeListRespMultiError is an error wrapping multiple validation
// errors returned by GetOrgEmployeeListResp.ValidateAll() if the designated
// constraints aren't met.
type GetOrgEmployeeListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgEmployeeListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgEmployeeListRespMultiError) AllErrors() []error { return m }

// GetOrgEmployeeListRespValidationError is the validation error returned by
// GetOrgEmployeeListResp.Validate if the designated constraints aren't met.
type GetOrgEmployeeListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgEmployeeListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgEmployeeListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgEmployeeListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgEmployeeListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgEmployeeListRespValidationError) ErrorName() string {
	return "GetOrgEmployeeListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgEmployeeListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgEmployeeListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgEmployeeListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgEmployeeListRespValidationError{}

// Validate checks the field values on GetOrgEmployeeListRespData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgEmployeeListRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgEmployeeListRespData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgEmployeeListRespDataMultiError, or nil if none found.
func (m *GetOrgEmployeeListRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgEmployeeListRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrgEmployeeListRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrgEmployeeListRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrgEmployeeListRespDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPageInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgEmployeeListRespDataValidationError{
					field:  "PageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgEmployeeListRespDataValidationError{
					field:  "PageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgEmployeeListRespDataValidationError{
				field:  "PageInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgEmployeeListRespDataMultiError(errors)
	}

	return nil
}

// GetOrgEmployeeListRespDataMultiError is an error wrapping multiple
// validation errors returned by GetOrgEmployeeListRespData.ValidateAll() if
// the designated constraints aren't met.
type GetOrgEmployeeListRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgEmployeeListRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgEmployeeListRespDataMultiError) AllErrors() []error { return m }

// GetOrgEmployeeListRespDataValidationError is the validation error returned
// by GetOrgEmployeeListRespData.Validate if the designated constraints aren't met.
type GetOrgEmployeeListRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgEmployeeListRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgEmployeeListRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgEmployeeListRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgEmployeeListRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgEmployeeListRespDataValidationError) ErrorName() string {
	return "GetOrgEmployeeListRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgEmployeeListRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgEmployeeListRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgEmployeeListRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgEmployeeListRespDataValidationError{}

// Validate checks the field values on GetOrgInviteRecordListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgInviteRecordListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgInviteRecordListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgInviteRecordListReqMultiError, or nil if none found.
func (m *GetOrgInviteRecordListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgInviteRecordListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPageRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgInviteRecordListReqValidationError{
					field:  "PageRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgInviteRecordListReqValidationError{
					field:  "PageRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgInviteRecordListReqValidationError{
				field:  "PageRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgInviteRecordListReqMultiError(errors)
	}

	return nil
}

// GetOrgInviteRecordListReqMultiError is an error wrapping multiple validation
// errors returned by GetOrgInviteRecordListReq.ValidateAll() if the
// designated constraints aren't met.
type GetOrgInviteRecordListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgInviteRecordListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgInviteRecordListReqMultiError) AllErrors() []error { return m }

// GetOrgInviteRecordListReqValidationError is the validation error returned by
// GetOrgInviteRecordListReq.Validate if the designated constraints aren't met.
type GetOrgInviteRecordListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgInviteRecordListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgInviteRecordListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgInviteRecordListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgInviteRecordListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgInviteRecordListReqValidationError) ErrorName() string {
	return "GetOrgInviteRecordListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgInviteRecordListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgInviteRecordListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgInviteRecordListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgInviteRecordListReqValidationError{}

// Validate checks the field values on GetOrgInviteRecordListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgInviteRecordListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgInviteRecordListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgInviteRecordListRespMultiError, or nil if none found.
func (m *GetOrgInviteRecordListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgInviteRecordListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgInviteRecordListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgInviteRecordListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgInviteRecordListRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgInviteRecordListRespMultiError(errors)
	}

	return nil
}

// GetOrgInviteRecordListRespMultiError is an error wrapping multiple
// validation errors returned by GetOrgInviteRecordListResp.ValidateAll() if
// the designated constraints aren't met.
type GetOrgInviteRecordListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgInviteRecordListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgInviteRecordListRespMultiError) AllErrors() []error { return m }

// GetOrgInviteRecordListRespValidationError is the validation error returned
// by GetOrgInviteRecordListResp.Validate if the designated constraints aren't met.
type GetOrgInviteRecordListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgInviteRecordListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgInviteRecordListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgInviteRecordListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgInviteRecordListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgInviteRecordListRespValidationError) ErrorName() string {
	return "GetOrgInviteRecordListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgInviteRecordListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgInviteRecordListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgInviteRecordListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgInviteRecordListRespValidationError{}

// Validate checks the field values on GetOrgInviteRecordListRespData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgInviteRecordListRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgInviteRecordListRespData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrgInviteRecordListRespDataMultiError, or nil if none found.
func (m *GetOrgInviteRecordListRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgInviteRecordListRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrgInviteRecordListRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrgInviteRecordListRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrgInviteRecordListRespDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPageInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgInviteRecordListRespDataValidationError{
					field:  "PageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgInviteRecordListRespDataValidationError{
					field:  "PageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgInviteRecordListRespDataValidationError{
				field:  "PageInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgInviteRecordListRespDataMultiError(errors)
	}

	return nil
}

// GetOrgInviteRecordListRespDataMultiError is an error wrapping multiple
// validation errors returned by GetOrgInviteRecordListRespData.ValidateAll()
// if the designated constraints aren't met.
type GetOrgInviteRecordListRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgInviteRecordListRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgInviteRecordListRespDataMultiError) AllErrors() []error { return m }

// GetOrgInviteRecordListRespDataValidationError is the validation error
// returned by GetOrgInviteRecordListRespData.Validate if the designated
// constraints aren't met.
type GetOrgInviteRecordListRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgInviteRecordListRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgInviteRecordListRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgInviteRecordListRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgInviteRecordListRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgInviteRecordListRespDataValidationError) ErrorName() string {
	return "GetOrgInviteRecordListRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgInviteRecordListRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgInviteRecordListRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgInviteRecordListRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgInviteRecordListRespDataValidationError{}
