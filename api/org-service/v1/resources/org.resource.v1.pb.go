// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v6.30.2
// source: api/org-service/v1/resources/org.resource.v1.proto

package resourcev1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	enums "github.com/go-micro-saas/organization-service/api/org-service/v1/enums"
	page "github.com/ikaiguang/go-srv-kit/kit/page"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PingReq) Reset() {
	*x = PingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReq) ProtoMessage() {}

func (x *PingReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReq.ProtoReflect.Descriptor instead.
func (*PingReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{0}
}

func (x *PingReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string            `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     *PingRespData     `protobuf:"bytes,100,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PingResp) Reset() {
	*x = PingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResp) ProtoMessage() {}

func (x *PingResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResp.ProtoReflect.Descriptor instead.
func (*PingResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{1}
}

func (x *PingResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PingResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PingResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PingResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PingResp) GetData() *PingRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PingRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PingRespData) Reset() {
	*x = PingRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRespData) ProtoMessage() {}

func (x *PingRespData) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRespData.ProtoReflect.Descriptor instead.
func (*PingRespData) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{2}
}

func (x *PingRespData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Org ENGINE InnoDB CHARSET utf8mb4 COMMENT '组织'
type Org struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedTime     string                        `protobuf:"bytes,2,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime     string                        `protobuf:"bytes,3,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
	DeletedTime     uint64                        `protobuf:"varint,4,opt,name=deleted_time,json=deletedTime,proto3" json:"deleted_time,omitempty"`
	OrgId           uint64                        `protobuf:"varint,5,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	OrgName         string                        `protobuf:"bytes,6,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	OrgAvatar       string                        `protobuf:"bytes,7,opt,name=org_avatar,json=orgAvatar,proto3" json:"org_avatar,omitempty"`
	OrgContactName  string                        `protobuf:"bytes,8,opt,name=org_contact_name,json=orgContactName,proto3" json:"org_contact_name,omitempty"`
	OrgContactPhone string                        `protobuf:"bytes,9,opt,name=org_contact_phone,json=orgContactPhone,proto3" json:"org_contact_phone,omitempty"`
	OrgContactEmail string                        `protobuf:"bytes,10,opt,name=org_contact_email,json=orgContactEmail,proto3" json:"org_contact_email,omitempty"`
	OrgType         enums.OrgTypeEnum_OrgType     `protobuf:"varint,11,opt,name=org_type,json=orgType,proto3,enum=saas.api.org.enumv1.OrgTypeEnum_OrgType" json:"org_type,omitempty"`
	OrgStatus       enums.OrgStatusEnum_OrgStatus `protobuf:"varint,12,opt,name=org_status,json=orgStatus,proto3,enum=saas.api.org.enumv1.OrgStatusEnum_OrgStatus" json:"org_status,omitempty"`
	OrgIndustryId   uint64                        `protobuf:"varint,13,opt,name=org_industry_id,json=orgIndustryId,proto3" json:"org_industry_id,omitempty"`
	OrgScaleId      uint64                        `protobuf:"varint,14,opt,name=org_scale_id,json=orgScaleId,proto3" json:"org_scale_id,omitempty"`
	OrgAddress      string                        `protobuf:"bytes,15,opt,name=org_address,json=orgAddress,proto3" json:"org_address,omitempty"`
	OrgZipCode      string                        `protobuf:"bytes,16,opt,name=org_zip_code,json=orgZipCode,proto3" json:"org_zip_code,omitempty"`
	OrgCreatorId    uint64                        `protobuf:"varint,17,opt,name=org_creator_id,json=orgCreatorId,proto3" json:"org_creator_id,omitempty"`
}

func (x *Org) Reset() {
	*x = Org{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Org) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Org) ProtoMessage() {}

func (x *Org) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Org.ProtoReflect.Descriptor instead.
func (*Org) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{3}
}

func (x *Org) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Org) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *Org) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *Org) GetDeletedTime() uint64 {
	if x != nil {
		return x.DeletedTime
	}
	return 0
}

func (x *Org) GetOrgId() uint64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *Org) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *Org) GetOrgAvatar() string {
	if x != nil {
		return x.OrgAvatar
	}
	return ""
}

func (x *Org) GetOrgContactName() string {
	if x != nil {
		return x.OrgContactName
	}
	return ""
}

func (x *Org) GetOrgContactPhone() string {
	if x != nil {
		return x.OrgContactPhone
	}
	return ""
}

func (x *Org) GetOrgContactEmail() string {
	if x != nil {
		return x.OrgContactEmail
	}
	return ""
}

func (x *Org) GetOrgType() enums.OrgTypeEnum_OrgType {
	if x != nil {
		return x.OrgType
	}
	return enums.OrgTypeEnum_OrgType(0)
}

func (x *Org) GetOrgStatus() enums.OrgStatusEnum_OrgStatus {
	if x != nil {
		return x.OrgStatus
	}
	return enums.OrgStatusEnum_OrgStatus(0)
}

func (x *Org) GetOrgIndustryId() uint64 {
	if x != nil {
		return x.OrgIndustryId
	}
	return 0
}

func (x *Org) GetOrgScaleId() uint64 {
	if x != nil {
		return x.OrgScaleId
	}
	return 0
}

func (x *Org) GetOrgAddress() string {
	if x != nil {
		return x.OrgAddress
	}
	return ""
}

func (x *Org) GetOrgZipCode() string {
	if x != nil {
		return x.OrgZipCode
	}
	return ""
}

func (x *Org) GetOrgCreatorId() uint64 {
	if x != nil {
		return x.OrgCreatorId
	}
	return 0
}

type CreateOrgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatorId     uint64                    `protobuf:"varint,100,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`                                      // 创建人ID
	CreatorName   string                    `protobuf:"bytes,101,opt,name=creator_name,json=creatorName,proto3" json:"creator_name,omitempty"`                                 // 组织名称
	CreatorAvatar string                    `protobuf:"bytes,102,opt,name=creator_avatar,json=creatorAvatar,proto3" json:"creator_avatar,omitempty"`                           // 组织头像
	OrgName       string                    `protobuf:"bytes,1,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`                                               // 组织名称
	OrgAvatar     string                    `protobuf:"bytes,2,opt,name=org_avatar,json=orgAvatar,proto3" json:"org_avatar,omitempty"`                                         // 组织头像
	OrgType       enums.OrgTypeEnum_OrgType `protobuf:"varint,3,opt,name=org_type,json=orgType,proto3,enum=saas.api.org.enumv1.OrgTypeEnum_OrgType" json:"org_type,omitempty"` // 组织类型
}

func (x *CreateOrgReq) Reset() {
	*x = CreateOrgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgReq) ProtoMessage() {}

func (x *CreateOrgReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgReq.ProtoReflect.Descriptor instead.
func (*CreateOrgReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{4}
}

func (x *CreateOrgReq) GetCreatorId() uint64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *CreateOrgReq) GetCreatorName() string {
	if x != nil {
		return x.CreatorName
	}
	return ""
}

func (x *CreateOrgReq) GetCreatorAvatar() string {
	if x != nil {
		return x.CreatorAvatar
	}
	return ""
}

func (x *CreateOrgReq) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *CreateOrgReq) GetOrgAvatar() string {
	if x != nil {
		return x.OrgAvatar
	}
	return ""
}

func (x *CreateOrgReq) GetOrgType() enums.OrgTypeEnum_OrgType {
	if x != nil {
		return x.OrgType
	}
	return enums.OrgTypeEnum_OrgType(0)
}

type OnlyCreateOrgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatorId uint64                    `protobuf:"varint,100,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`                                      // 创建人ID
	OrgName   string                    `protobuf:"bytes,1,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`                                               // 组织名称
	OrgAvatar string                    `protobuf:"bytes,2,opt,name=org_avatar,json=orgAvatar,proto3" json:"org_avatar,omitempty"`                                         // 组织头像
	OrgType   enums.OrgTypeEnum_OrgType `protobuf:"varint,3,opt,name=org_type,json=orgType,proto3,enum=saas.api.org.enumv1.OrgTypeEnum_OrgType" json:"org_type,omitempty"` // 组织类型
}

func (x *OnlyCreateOrgReq) Reset() {
	*x = OnlyCreateOrgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlyCreateOrgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlyCreateOrgReq) ProtoMessage() {}

func (x *OnlyCreateOrgReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlyCreateOrgReq.ProtoReflect.Descriptor instead.
func (*OnlyCreateOrgReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{5}
}

func (x *OnlyCreateOrgReq) GetCreatorId() uint64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *OnlyCreateOrgReq) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *OnlyCreateOrgReq) GetOrgAvatar() string {
	if x != nil {
		return x.OrgAvatar
	}
	return ""
}

func (x *OnlyCreateOrgReq) GetOrgType() enums.OrgTypeEnum_OrgType {
	if x != nil {
		return x.OrgType
	}
	return enums.OrgTypeEnum_OrgType(0)
}

type CreateOrgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string             `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string  `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     *CreateOrgRespData `protobuf:"bytes,100,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateOrgResp) Reset() {
	*x = CreateOrgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgResp) ProtoMessage() {}

func (x *CreateOrgResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgResp.ProtoReflect.Descriptor instead.
func (*CreateOrgResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOrgResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateOrgResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CreateOrgResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateOrgResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateOrgResp) GetData() *CreateOrgRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateOrgRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId     uint64                    `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	OrgName   string                    `protobuf:"bytes,2,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	OrgAvatar string                    `protobuf:"bytes,3,opt,name=org_avatar,json=orgAvatar,proto3" json:"org_avatar,omitempty"`
	OrgType   enums.OrgTypeEnum_OrgType `protobuf:"varint,4,opt,name=org_type,json=orgType,proto3,enum=saas.api.org.enumv1.OrgTypeEnum_OrgType" json:"org_type,omitempty"`
}

func (x *CreateOrgRespData) Reset() {
	*x = CreateOrgRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgRespData) ProtoMessage() {}

func (x *CreateOrgRespData) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgRespData.ProtoReflect.Descriptor instead.
func (*CreateOrgRespData) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{7}
}

func (x *CreateOrgRespData) GetOrgId() uint64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *CreateOrgRespData) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *CreateOrgRespData) GetOrgAvatar() string {
	if x != nil {
		return x.OrgAvatar
	}
	return ""
}

func (x *CreateOrgRespData) GetOrgType() enums.OrgTypeEnum_OrgType {
	if x != nil {
		return x.OrgType
	}
	return enums.OrgTypeEnum_OrgType(0)
}

type AddEmployeeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorUid  uint64                                    `protobuf:"varint,100,opt,name=operator_uid,json=operatorUid,proto3" json:"operator_uid,omitempty"`                                                               // 操作人ID
	OrgId        uint64                                    `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`                                                                                   // 组织ID
	UserId       uint64                                    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                                // 成员ID
	UserName     string                                    `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`                                                                           // 成员名称
	EmployeeRole enums.OrgEmployeeRoleEnum_OrgEmployeeRole `protobuf:"varint,4,opt,name=employee_role,json=employeeRole,proto3,enum=saas.api.org.enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole" json:"employee_role,omitempty"` // 成员角色
	UserAvatar   string                                    `protobuf:"bytes,5,opt,name=user_avatar,json=userAvatar,proto3" json:"user_avatar,omitempty"`                                                                     // 成员头像
	UserPhone    string                                    `protobuf:"bytes,6,opt,name=user_phone,json=userPhone,proto3" json:"user_phone,omitempty"`                                                                        // 成员电话
	UserEmail    string                                    `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`                                                                        // 成员邮箱
}

func (x *AddEmployeeReq) Reset() {
	*x = AddEmployeeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEmployeeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEmployeeReq) ProtoMessage() {}

func (x *AddEmployeeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEmployeeReq.ProtoReflect.Descriptor instead.
func (*AddEmployeeReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{8}
}

func (x *AddEmployeeReq) GetOperatorUid() uint64 {
	if x != nil {
		return x.OperatorUid
	}
	return 0
}

func (x *AddEmployeeReq) GetOrgId() uint64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *AddEmployeeReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddEmployeeReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AddEmployeeReq) GetEmployeeRole() enums.OrgEmployeeRoleEnum_OrgEmployeeRole {
	if x != nil {
		return x.EmployeeRole
	}
	return enums.OrgEmployeeRoleEnum_OrgEmployeeRole(0)
}

func (x *AddEmployeeReq) GetUserAvatar() string {
	if x != nil {
		return x.UserAvatar
	}
	return ""
}

func (x *AddEmployeeReq) GetUserPhone() string {
	if x != nil {
		return x.UserPhone
	}
	return ""
}

func (x *AddEmployeeReq) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

type AddEmployeeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string               `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string               `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string    `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     *AddEmployeeRespData `protobuf:"bytes,100,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddEmployeeResp) Reset() {
	*x = AddEmployeeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEmployeeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEmployeeResp) ProtoMessage() {}

func (x *AddEmployeeResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEmployeeResp.ProtoReflect.Descriptor instead.
func (*AddEmployeeResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{9}
}

func (x *AddEmployeeResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddEmployeeResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AddEmployeeResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddEmployeeResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AddEmployeeResp) GetData() *AddEmployeeRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddEmployeeRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId          uint64                                        `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	UserId         uint64                                        `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EmployeeId     uint64                                        `protobuf:"varint,3,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	EmployeeName   string                                        `protobuf:"bytes,4,opt,name=employee_name,json=employeeName,proto3" json:"employee_name,omitempty"`
	EmployeeAvatar string                                        `protobuf:"bytes,5,opt,name=employee_avatar,json=employeeAvatar,proto3" json:"employee_avatar,omitempty"`
	EmployeeStatus enums.OrgEmployeeStatusEnum_OrgEmployeeStatus `protobuf:"varint,6,opt,name=employee_status,json=employeeStatus,proto3,enum=saas.api.org.enumv1.OrgEmployeeStatusEnum_OrgEmployeeStatus" json:"employee_status,omitempty"` // 成员状态
	EmployeeRole   enums.OrgEmployeeRoleEnum_OrgEmployeeRole     `protobuf:"varint,7,opt,name=employee_role,json=employeeRole,proto3,enum=saas.api.org.enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole" json:"employee_role,omitempty"`           // 成员角色
}

func (x *AddEmployeeRespData) Reset() {
	*x = AddEmployeeRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEmployeeRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEmployeeRespData) ProtoMessage() {}

func (x *AddEmployeeRespData) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEmployeeRespData.ProtoReflect.Descriptor instead.
func (*AddEmployeeRespData) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{10}
}

func (x *AddEmployeeRespData) GetOrgId() uint64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *AddEmployeeRespData) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddEmployeeRespData) GetEmployeeId() uint64 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

func (x *AddEmployeeRespData) GetEmployeeName() string {
	if x != nil {
		return x.EmployeeName
	}
	return ""
}

func (x *AddEmployeeRespData) GetEmployeeAvatar() string {
	if x != nil {
		return x.EmployeeAvatar
	}
	return ""
}

func (x *AddEmployeeRespData) GetEmployeeStatus() enums.OrgEmployeeStatusEnum_OrgEmployeeStatus {
	if x != nil {
		return x.EmployeeStatus
	}
	return enums.OrgEmployeeStatusEnum_OrgEmployeeStatus(0)
}

func (x *AddEmployeeRespData) GetEmployeeRole() enums.OrgEmployeeRoleEnum_OrgEmployeeRole {
	if x != nil {
		return x.EmployeeRole
	}
	return enums.OrgEmployeeRoleEnum_OrgEmployeeRole(0)
}

type CreateInviteRecordForLinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorUid        uint64                                    `protobuf:"varint,100,opt,name=operator_uid,json=operatorUid,proto3" json:"operator_uid,omitempty"`                                                                                   // 操作人ID
	OrgId              uint64                                    `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`                                                                                                       // 组织ID
	ExpireTime         *timestamppb.Timestamp                    `protobuf:"bytes,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`                                                                                         // 过期时间;默认1天
	InviteEmployeeRole enums.OrgEmployeeRoleEnum_OrgEmployeeRole `protobuf:"varint,3,opt,name=invite_employee_role,json=inviteEmployeeRole,proto3,enum=saas.api.org.enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole" json:"invite_employee_role,omitempty"` // 被邀请人角色
}

func (x *CreateInviteRecordForLinkReq) Reset() {
	*x = CreateInviteRecordForLinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInviteRecordForLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInviteRecordForLinkReq) ProtoMessage() {}

func (x *CreateInviteRecordForLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInviteRecordForLinkReq.ProtoReflect.Descriptor instead.
func (*CreateInviteRecordForLinkReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{11}
}

func (x *CreateInviteRecordForLinkReq) GetOperatorUid() uint64 {
	if x != nil {
		return x.OperatorUid
	}
	return 0
}

func (x *CreateInviteRecordForLinkReq) GetOrgId() uint64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *CreateInviteRecordForLinkReq) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *CreateInviteRecordForLinkReq) GetInviteEmployeeRole() enums.OrgEmployeeRoleEnum_OrgEmployeeRole {
	if x != nil {
		return x.InviteEmployeeRole
	}
	return enums.OrgEmployeeRoleEnum_OrgEmployeeRole(0)
}

type CreateInviteRecordForLinkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32                              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string                             `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string                             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string                  `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     *CreateInviteRecordForLinkRespData `protobuf:"bytes,100,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateInviteRecordForLinkResp) Reset() {
	*x = CreateInviteRecordForLinkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInviteRecordForLinkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInviteRecordForLinkResp) ProtoMessage() {}

func (x *CreateInviteRecordForLinkResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInviteRecordForLinkResp.ProtoReflect.Descriptor instead.
func (*CreateInviteRecordForLinkResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{12}
}

func (x *CreateInviteRecordForLinkResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateInviteRecordForLinkResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CreateInviteRecordForLinkResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateInviteRecordForLinkResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateInviteRecordForLinkResp) GetData() *CreateInviteRecordForLinkRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateInviteRecordForLinkRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteId   uint64                 `protobuf:"varint,1,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`
	InviteCode string                 `protobuf:"bytes,2,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"`
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *CreateInviteRecordForLinkRespData) Reset() {
	*x = CreateInviteRecordForLinkRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInviteRecordForLinkRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInviteRecordForLinkRespData) ProtoMessage() {}

func (x *CreateInviteRecordForLinkRespData) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInviteRecordForLinkRespData.ProtoReflect.Descriptor instead.
func (*CreateInviteRecordForLinkRespData) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{13}
}

func (x *CreateInviteRecordForLinkRespData) GetInviteId() uint64 {
	if x != nil {
		return x.InviteId
	}
	return 0
}

func (x *CreateInviteRecordForLinkRespData) GetInviteCode() string {
	if x != nil {
		return x.InviteCode
	}
	return ""
}

func (x *CreateInviteRecordForLinkRespData) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

type CreateInviteRecordForEmployeeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorUid        uint64                                              `protobuf:"varint,100,opt,name=operator_uid,json=operatorUid,proto3" json:"operator_uid,omitempty"`                                                                                          // 操作人ID
	OrgId              uint64                                              `protobuf:"varint,101,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`                                                                                                            // 组织ID
	InviteUserId       uint64                                              `protobuf:"varint,1,opt,name=invite_user_id,json=inviteUserId,proto3" json:"invite_user_id,omitempty"`                                                                                       // 被邀请人ID
	InviteAccount      string                                              `protobuf:"bytes,2,opt,name=invite_account,json=inviteAccount,proto3" json:"invite_account,omitempty"`                                                                                       // 被邀请人账号
	ExpireTime         *timestamppb.Timestamp                              `protobuf:"bytes,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`                                                                                                // 过期时间;默认1天
	InviteAccountType  enums.OrgInviteAccountTypeEnum_OrgInviteAccountType `protobuf:"varint,4,opt,name=invite_account_type,json=inviteAccountType,proto3,enum=saas.api.org.enumv1.OrgInviteAccountTypeEnum_OrgInviteAccountType" json:"invite_account_type,omitempty"` // 被邀请人账号类型
	InviteEmployeeRole enums.OrgEmployeeRoleEnum_OrgEmployeeRole           `protobuf:"varint,5,opt,name=invite_employee_role,json=inviteEmployeeRole,proto3,enum=saas.api.org.enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole" json:"invite_employee_role,omitempty"`        // 被邀请人角色
}

func (x *CreateInviteRecordForEmployeeReq) Reset() {
	*x = CreateInviteRecordForEmployeeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInviteRecordForEmployeeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInviteRecordForEmployeeReq) ProtoMessage() {}

func (x *CreateInviteRecordForEmployeeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInviteRecordForEmployeeReq.ProtoReflect.Descriptor instead.
func (*CreateInviteRecordForEmployeeReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{14}
}

func (x *CreateInviteRecordForEmployeeReq) GetOperatorUid() uint64 {
	if x != nil {
		return x.OperatorUid
	}
	return 0
}

func (x *CreateInviteRecordForEmployeeReq) GetOrgId() uint64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *CreateInviteRecordForEmployeeReq) GetInviteUserId() uint64 {
	if x != nil {
		return x.InviteUserId
	}
	return 0
}

func (x *CreateInviteRecordForEmployeeReq) GetInviteAccount() string {
	if x != nil {
		return x.InviteAccount
	}
	return ""
}

func (x *CreateInviteRecordForEmployeeReq) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *CreateInviteRecordForEmployeeReq) GetInviteAccountType() enums.OrgInviteAccountTypeEnum_OrgInviteAccountType {
	if x != nil {
		return x.InviteAccountType
	}
	return enums.OrgInviteAccountTypeEnum_OrgInviteAccountType(0)
}

func (x *CreateInviteRecordForEmployeeReq) GetInviteEmployeeRole() enums.OrgEmployeeRoleEnum_OrgEmployeeRole {
	if x != nil {
		return x.InviteEmployeeRole
	}
	return enums.OrgEmployeeRoleEnum_OrgEmployeeRole(0)
}

type CreateInviteRecordForEmployeeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32                                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string                                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string                                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string                      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     *CreateInviteRecordForEmployeeRespData `protobuf:"bytes,100,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateInviteRecordForEmployeeResp) Reset() {
	*x = CreateInviteRecordForEmployeeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInviteRecordForEmployeeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInviteRecordForEmployeeResp) ProtoMessage() {}

func (x *CreateInviteRecordForEmployeeResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInviteRecordForEmployeeResp.ProtoReflect.Descriptor instead.
func (*CreateInviteRecordForEmployeeResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{15}
}

func (x *CreateInviteRecordForEmployeeResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateInviteRecordForEmployeeResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CreateInviteRecordForEmployeeResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateInviteRecordForEmployeeResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateInviteRecordForEmployeeResp) GetData() *CreateInviteRecordForEmployeeRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateInviteRecordForEmployeeRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteId         uint64                 `protobuf:"varint,1,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`
	InviteCode       string                 `protobuf:"bytes,2,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"`
	ExpireTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	AssignEmployeeId uint64                 `protobuf:"varint,4,opt,name=assign_employee_id,json=assignEmployeeId,proto3" json:"assign_employee_id,omitempty"`
}

func (x *CreateInviteRecordForEmployeeRespData) Reset() {
	*x = CreateInviteRecordForEmployeeRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInviteRecordForEmployeeRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInviteRecordForEmployeeRespData) ProtoMessage() {}

func (x *CreateInviteRecordForEmployeeRespData) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInviteRecordForEmployeeRespData.ProtoReflect.Descriptor instead.
func (*CreateInviteRecordForEmployeeRespData) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{16}
}

func (x *CreateInviteRecordForEmployeeRespData) GetInviteId() uint64 {
	if x != nil {
		return x.InviteId
	}
	return 0
}

func (x *CreateInviteRecordForEmployeeRespData) GetInviteCode() string {
	if x != nil {
		return x.InviteCode
	}
	return ""
}

func (x *CreateInviteRecordForEmployeeRespData) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *CreateInviteRecordForEmployeeRespData) GetAssignEmployeeId() uint64 {
	if x != nil {
		return x.AssignEmployeeId
	}
	return 0
}

type JoinByInviteLinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteId   uint64 `protobuf:"varint,100,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`
	InviteCode string `protobuf:"bytes,101,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"`
	UserId     uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`            // 成员ID
	UserName   string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`       // 成员名称
	UserAvatar string `protobuf:"bytes,5,opt,name=user_avatar,json=userAvatar,proto3" json:"user_avatar,omitempty"` // 成员头像
	UserPhone  string `protobuf:"bytes,6,opt,name=user_phone,json=userPhone,proto3" json:"user_phone,omitempty"`    // 成员电话
	UserEmail  string `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`    // 成员邮箱
}

func (x *JoinByInviteLinkReq) Reset() {
	*x = JoinByInviteLinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinByInviteLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinByInviteLinkReq) ProtoMessage() {}

func (x *JoinByInviteLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinByInviteLinkReq.ProtoReflect.Descriptor instead.
func (*JoinByInviteLinkReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{17}
}

func (x *JoinByInviteLinkReq) GetInviteId() uint64 {
	if x != nil {
		return x.InviteId
	}
	return 0
}

func (x *JoinByInviteLinkReq) GetInviteCode() string {
	if x != nil {
		return x.InviteCode
	}
	return ""
}

func (x *JoinByInviteLinkReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *JoinByInviteLinkReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *JoinByInviteLinkReq) GetUserAvatar() string {
	if x != nil {
		return x.UserAvatar
	}
	return ""
}

func (x *JoinByInviteLinkReq) GetUserPhone() string {
	if x != nil {
		return x.UserPhone
	}
	return ""
}

func (x *JoinByInviteLinkReq) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

type JoinByInviteLinkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string                    `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string                    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string         `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     *JoinByInviteLinkRespData `protobuf:"bytes,100,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *JoinByInviteLinkResp) Reset() {
	*x = JoinByInviteLinkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinByInviteLinkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinByInviteLinkResp) ProtoMessage() {}

func (x *JoinByInviteLinkResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinByInviteLinkResp.ProtoReflect.Descriptor instead.
func (*JoinByInviteLinkResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{18}
}

func (x *JoinByInviteLinkResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *JoinByInviteLinkResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *JoinByInviteLinkResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *JoinByInviteLinkResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JoinByInviteLinkResp) GetData() *JoinByInviteLinkRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type JoinByInviteLinkRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId          uint64                                        `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	UserId         uint64                                        `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EmployeeId     uint64                                        `protobuf:"varint,3,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	EmployeeName   string                                        `protobuf:"bytes,4,opt,name=employee_name,json=employeeName,proto3" json:"employee_name,omitempty"`
	EmployeeAvatar string                                        `protobuf:"bytes,5,opt,name=employee_avatar,json=employeeAvatar,proto3" json:"employee_avatar,omitempty"`
	EmployeeStatus enums.OrgEmployeeStatusEnum_OrgEmployeeStatus `protobuf:"varint,6,opt,name=employee_status,json=employeeStatus,proto3,enum=saas.api.org.enumv1.OrgEmployeeStatusEnum_OrgEmployeeStatus" json:"employee_status,omitempty"` // 成员状态
	EmployeeRole   enums.OrgEmployeeRoleEnum_OrgEmployeeRole     `protobuf:"varint,7,opt,name=employee_role,json=employeeRole,proto3,enum=saas.api.org.enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole" json:"employee_role,omitempty"`           // 成员角色
}

func (x *JoinByInviteLinkRespData) Reset() {
	*x = JoinByInviteLinkRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinByInviteLinkRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinByInviteLinkRespData) ProtoMessage() {}

func (x *JoinByInviteLinkRespData) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinByInviteLinkRespData.ProtoReflect.Descriptor instead.
func (*JoinByInviteLinkRespData) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{19}
}

func (x *JoinByInviteLinkRespData) GetOrgId() uint64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *JoinByInviteLinkRespData) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *JoinByInviteLinkRespData) GetEmployeeId() uint64 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

func (x *JoinByInviteLinkRespData) GetEmployeeName() string {
	if x != nil {
		return x.EmployeeName
	}
	return ""
}

func (x *JoinByInviteLinkRespData) GetEmployeeAvatar() string {
	if x != nil {
		return x.EmployeeAvatar
	}
	return ""
}

func (x *JoinByInviteLinkRespData) GetEmployeeStatus() enums.OrgEmployeeStatusEnum_OrgEmployeeStatus {
	if x != nil {
		return x.EmployeeStatus
	}
	return enums.OrgEmployeeStatusEnum_OrgEmployeeStatus(0)
}

func (x *JoinByInviteLinkRespData) GetEmployeeRole() enums.OrgEmployeeRoleEnum_OrgEmployeeRole {
	if x != nil {
		return x.EmployeeRole
	}
	return enums.OrgEmployeeRoleEnum_OrgEmployeeRole(0)
}

type AgreeOrRefuseInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteId   uint64 `protobuf:"varint,100,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`      //
	InviteCode string `protobuf:"bytes,101,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"` //
	IsAgree    bool   `protobuf:"varint,102,opt,name=isAgree,proto3" json:"isAgree,omitempty"`                        // 同意加入
	UserId     uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`              // 成员ID
	UserName   string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`         // 成员名称
	UserAvatar string `protobuf:"bytes,5,opt,name=user_avatar,json=userAvatar,proto3" json:"user_avatar,omitempty"`   // 成员头像
	UserPhone  string `protobuf:"bytes,6,opt,name=user_phone,json=userPhone,proto3" json:"user_phone,omitempty"`      // 成员电话
	UserEmail  string `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`      // 成员邮箱
}

func (x *AgreeOrRefuseInviteReq) Reset() {
	*x = AgreeOrRefuseInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgreeOrRefuseInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgreeOrRefuseInviteReq) ProtoMessage() {}

func (x *AgreeOrRefuseInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgreeOrRefuseInviteReq.ProtoReflect.Descriptor instead.
func (*AgreeOrRefuseInviteReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{20}
}

func (x *AgreeOrRefuseInviteReq) GetInviteId() uint64 {
	if x != nil {
		return x.InviteId
	}
	return 0
}

func (x *AgreeOrRefuseInviteReq) GetInviteCode() string {
	if x != nil {
		return x.InviteCode
	}
	return ""
}

func (x *AgreeOrRefuseInviteReq) GetIsAgree() bool {
	if x != nil {
		return x.IsAgree
	}
	return false
}

func (x *AgreeOrRefuseInviteReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AgreeOrRefuseInviteReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AgreeOrRefuseInviteReq) GetUserAvatar() string {
	if x != nil {
		return x.UserAvatar
	}
	return ""
}

func (x *AgreeOrRefuseInviteReq) GetUserPhone() string {
	if x != nil {
		return x.UserPhone
	}
	return ""
}

func (x *AgreeOrRefuseInviteReq) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

type AgreeOrRefuseInviteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string                       `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string                       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string            `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     *AgreeOrRefuseInviteRespData `protobuf:"bytes,100,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AgreeOrRefuseInviteResp) Reset() {
	*x = AgreeOrRefuseInviteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgreeOrRefuseInviteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgreeOrRefuseInviteResp) ProtoMessage() {}

func (x *AgreeOrRefuseInviteResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgreeOrRefuseInviteResp.ProtoReflect.Descriptor instead.
func (*AgreeOrRefuseInviteResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{21}
}

func (x *AgreeOrRefuseInviteResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AgreeOrRefuseInviteResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AgreeOrRefuseInviteResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AgreeOrRefuseInviteResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AgreeOrRefuseInviteResp) GetData() *AgreeOrRefuseInviteRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AgreeOrRefuseInviteRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId          uint64                                        `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	UserId         uint64                                        `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EmployeeId     uint64                                        `protobuf:"varint,3,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	EmployeeName   string                                        `protobuf:"bytes,4,opt,name=employee_name,json=employeeName,proto3" json:"employee_name,omitempty"`
	EmployeeAvatar string                                        `protobuf:"bytes,5,opt,name=employee_avatar,json=employeeAvatar,proto3" json:"employee_avatar,omitempty"`
	EmployeeStatus enums.OrgEmployeeStatusEnum_OrgEmployeeStatus `protobuf:"varint,6,opt,name=employee_status,json=employeeStatus,proto3,enum=saas.api.org.enumv1.OrgEmployeeStatusEnum_OrgEmployeeStatus" json:"employee_status,omitempty"` // 成员状态
	EmployeeRole   enums.OrgEmployeeRoleEnum_OrgEmployeeRole     `protobuf:"varint,7,opt,name=employee_role,json=employeeRole,proto3,enum=saas.api.org.enumv1.OrgEmployeeRoleEnum_OrgEmployeeRole" json:"employee_role,omitempty"`           // 成员角色
}

func (x *AgreeOrRefuseInviteRespData) Reset() {
	*x = AgreeOrRefuseInviteRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgreeOrRefuseInviteRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgreeOrRefuseInviteRespData) ProtoMessage() {}

func (x *AgreeOrRefuseInviteRespData) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgreeOrRefuseInviteRespData.ProtoReflect.Descriptor instead.
func (*AgreeOrRefuseInviteRespData) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{22}
}

func (x *AgreeOrRefuseInviteRespData) GetOrgId() uint64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *AgreeOrRefuseInviteRespData) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AgreeOrRefuseInviteRespData) GetEmployeeId() uint64 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

func (x *AgreeOrRefuseInviteRespData) GetEmployeeName() string {
	if x != nil {
		return x.EmployeeName
	}
	return ""
}

func (x *AgreeOrRefuseInviteRespData) GetEmployeeAvatar() string {
	if x != nil {
		return x.EmployeeAvatar
	}
	return ""
}

func (x *AgreeOrRefuseInviteRespData) GetEmployeeStatus() enums.OrgEmployeeStatusEnum_OrgEmployeeStatus {
	if x != nil {
		return x.EmployeeStatus
	}
	return enums.OrgEmployeeStatusEnum_OrgEmployeeStatus(0)
}

func (x *AgreeOrRefuseInviteRespData) GetEmployeeRole() enums.OrgEmployeeRoleEnum_OrgEmployeeRole {
	if x != nil {
		return x.EmployeeRole
	}
	return enums.OrgEmployeeRoleEnum_OrgEmployeeRole(0)
}

type GetOrgInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId uint64 `protobuf:"varint,100,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"` // 组织ID
}

func (x *GetOrgInfoReq) Reset() {
	*x = GetOrgInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgInfoReq) ProtoMessage() {}

func (x *GetOrgInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgInfoReq.ProtoReflect.Descriptor instead.
func (*GetOrgInfoReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{23}
}

func (x *GetOrgInfoReq) GetOrgId() uint64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

type GetOrgInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string            `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     *Org              `protobuf:"bytes,100,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgInfoResp) Reset() {
	*x = GetOrgInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgInfoResp) ProtoMessage() {}

func (x *GetOrgInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgInfoResp.ProtoReflect.Descriptor instead.
func (*GetOrgInfoResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{24}
}

func (x *GetOrgInfoResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrgInfoResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetOrgInfoResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetOrgInfoResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetOrgInfoResp) GetData() *Org {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrgInfoListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgIds []uint64 `protobuf:"varint,100,rep,packed,name=org_ids,json=orgIds,proto3" json:"org_ids,omitempty"` // 组织ID
}

func (x *GetOrgInfoListReq) Reset() {
	*x = GetOrgInfoListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgInfoListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgInfoListReq) ProtoMessage() {}

func (x *GetOrgInfoListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgInfoListReq.ProtoReflect.Descriptor instead.
func (*GetOrgInfoListReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{25}
}

func (x *GetOrgInfoListReq) GetOrgIds() []uint64 {
	if x != nil {
		return x.OrgIds
	}
	return nil
}

type GetOrgInfoListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string            `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     []*Org            `protobuf:"bytes,100,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgInfoListResp) Reset() {
	*x = GetOrgInfoListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgInfoListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgInfoListResp) ProtoMessage() {}

func (x *GetOrgInfoListResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgInfoListResp.ProtoReflect.Descriptor instead.
func (*GetOrgInfoListResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{26}
}

func (x *GetOrgInfoListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrgInfoListResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetOrgInfoListResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetOrgInfoListResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetOrgInfoListResp) GetData() []*Org {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrgEmployeeInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployeeId uint64 `protobuf:"varint,100,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
}

func (x *GetOrgEmployeeInfoReq) Reset() {
	*x = GetOrgEmployeeInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgEmployeeInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgEmployeeInfoReq) ProtoMessage() {}

func (x *GetOrgEmployeeInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgEmployeeInfoReq.ProtoReflect.Descriptor instead.
func (*GetOrgEmployeeInfoReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{27}
}

func (x *GetOrgEmployeeInfoReq) GetEmployeeId() uint64 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

type GetUserOrgEmployeeInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64 `protobuf:"varint,100,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrgId  uint64 `protobuf:"varint,101,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *GetUserOrgEmployeeInfoReq) Reset() {
	*x = GetUserOrgEmployeeInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserOrgEmployeeInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserOrgEmployeeInfoReq) ProtoMessage() {}

func (x *GetUserOrgEmployeeInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserOrgEmployeeInfoReq.ProtoReflect.Descriptor instead.
func (*GetUserOrgEmployeeInfoReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{28}
}

func (x *GetUserOrgEmployeeInfoReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserOrgEmployeeInfoReq) GetOrgId() uint64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

type GetOrgEmployeeInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string            `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     *OrgEmployee      `protobuf:"bytes,100,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgEmployeeInfoResp) Reset() {
	*x = GetOrgEmployeeInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgEmployeeInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgEmployeeInfoResp) ProtoMessage() {}

func (x *GetOrgEmployeeInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgEmployeeInfoResp.ProtoReflect.Descriptor instead.
func (*GetOrgEmployeeInfoResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{29}
}

func (x *GetOrgEmployeeInfoResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrgEmployeeInfoResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetOrgEmployeeInfoResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetOrgEmployeeInfoResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetOrgEmployeeInfoResp) GetData() *OrgEmployee {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrgEmployeeInfoListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployeeIds []uint64 `protobuf:"varint,100,rep,packed,name=employee_ids,json=employeeIds,proto3" json:"employee_ids,omitempty"`
}

func (x *GetOrgEmployeeInfoListReq) Reset() {
	*x = GetOrgEmployeeInfoListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgEmployeeInfoListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgEmployeeInfoListReq) ProtoMessage() {}

func (x *GetOrgEmployeeInfoListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgEmployeeInfoListReq.ProtoReflect.Descriptor instead.
func (*GetOrgEmployeeInfoListReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{30}
}

func (x *GetOrgEmployeeInfoListReq) GetEmployeeIds() []uint64 {
	if x != nil {
		return x.EmployeeIds
	}
	return nil
}

type GetOrgEmployeeInfoListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string            `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     []*OrgEmployee    `protobuf:"bytes,100,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgEmployeeInfoListResp) Reset() {
	*x = GetOrgEmployeeInfoListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgEmployeeInfoListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgEmployeeInfoListResp) ProtoMessage() {}

func (x *GetOrgEmployeeInfoListResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgEmployeeInfoListResp.ProtoReflect.Descriptor instead.
func (*GetOrgEmployeeInfoListResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{31}
}

func (x *GetOrgEmployeeInfoListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrgEmployeeInfoListResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetOrgEmployeeInfoListResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetOrgEmployeeInfoListResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetOrgEmployeeInfoListResp) GetData() []*OrgEmployee {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrgInviteRecordInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteId uint64 `protobuf:"varint,100,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`
}

func (x *GetOrgInviteRecordInfoReq) Reset() {
	*x = GetOrgInviteRecordInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgInviteRecordInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgInviteRecordInfoReq) ProtoMessage() {}

func (x *GetOrgInviteRecordInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgInviteRecordInfoReq.ProtoReflect.Descriptor instead.
func (*GetOrgInviteRecordInfoReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{32}
}

func (x *GetOrgInviteRecordInfoReq) GetInviteId() uint64 {
	if x != nil {
		return x.InviteId
	}
	return 0
}

type GetOrgInviteRecordInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string            `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     *OrgInviteRecord  `protobuf:"bytes,100,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgInviteRecordInfoResp) Reset() {
	*x = GetOrgInviteRecordInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgInviteRecordInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgInviteRecordInfoResp) ProtoMessage() {}

func (x *GetOrgInviteRecordInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgInviteRecordInfoResp.ProtoReflect.Descriptor instead.
func (*GetOrgInviteRecordInfoResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{33}
}

func (x *GetOrgInviteRecordInfoResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrgInviteRecordInfoResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetOrgInviteRecordInfoResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetOrgInviteRecordInfoResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetOrgInviteRecordInfoResp) GetData() *OrgInviteRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrgInviteRecordInfoListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteIds []uint64 `protobuf:"varint,100,rep,packed,name=invite_ids,json=inviteIds,proto3" json:"invite_ids,omitempty"`
}

func (x *GetOrgInviteRecordInfoListReq) Reset() {
	*x = GetOrgInviteRecordInfoListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgInviteRecordInfoListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgInviteRecordInfoListReq) ProtoMessage() {}

func (x *GetOrgInviteRecordInfoListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgInviteRecordInfoListReq.ProtoReflect.Descriptor instead.
func (*GetOrgInviteRecordInfoListReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{34}
}

func (x *GetOrgInviteRecordInfoListReq) GetInviteIds() []uint64 {
	if x != nil {
		return x.InviteIds
	}
	return nil
}

type GetOrgInviteRecordInfoListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string             `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string  `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     []*OrgInviteRecord `protobuf:"bytes,100,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgInviteRecordInfoListResp) Reset() {
	*x = GetOrgInviteRecordInfoListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgInviteRecordInfoListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgInviteRecordInfoListResp) ProtoMessage() {}

func (x *GetOrgInviteRecordInfoListResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgInviteRecordInfoListResp.ProtoReflect.Descriptor instead.
func (*GetOrgInviteRecordInfoListResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{35}
}

func (x *GetOrgInviteRecordInfoListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrgInviteRecordInfoListResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetOrgInviteRecordInfoListResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetOrgInviteRecordInfoListResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetOrgInviteRecordInfoListResp) GetData() []*OrgInviteRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrgListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageRequest *page.PageRequest `protobuf:"bytes,1,opt,name=page_request,json=pageRequest,proto3" json:"page_request,omitempty"`
	OrgIds      []uint64          `protobuf:"varint,100,rep,packed,name=org_ids,json=orgIds,proto3" json:"org_ids,omitempty"` // 组织ids
	OrgName     string            `protobuf:"bytes,101,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`      // 组织名称
}

func (x *GetOrgListReq) Reset() {
	*x = GetOrgListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgListReq) ProtoMessage() {}

func (x *GetOrgListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgListReq.ProtoReflect.Descriptor instead.
func (*GetOrgListReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{36}
}

func (x *GetOrgListReq) GetPageRequest() *page.PageRequest {
	if x != nil {
		return x.PageRequest
	}
	return nil
}

func (x *GetOrgListReq) GetOrgIds() []uint64 {
	if x != nil {
		return x.OrgIds
	}
	return nil
}

func (x *GetOrgListReq) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

type GetOrgListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string              `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string   `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     *GetOrgListRespData `protobuf:"bytes,100,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgListResp) Reset() {
	*x = GetOrgListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgListResp) ProtoMessage() {}

func (x *GetOrgListResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgListResp.ProtoReflect.Descriptor instead.
func (*GetOrgListResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{37}
}

func (x *GetOrgListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrgListResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetOrgListResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetOrgListResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetOrgListResp) GetData() *GetOrgListRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrgListRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*Org             `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PageInfo *page.PageResponse `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *GetOrgListRespData) Reset() {
	*x = GetOrgListRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgListRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgListRespData) ProtoMessage() {}

func (x *GetOrgListRespData) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgListRespData.ProtoReflect.Descriptor instead.
func (*GetOrgListRespData) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{38}
}

func (x *GetOrgListRespData) GetList() []*Org {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetOrgListRespData) GetPageInfo() *page.PageResponse {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type GetOrgEmployeeListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageRequest  *page.PageRequest `protobuf:"bytes,1,opt,name=page_request,json=pageRequest,proto3" json:"page_request,omitempty"`
	OrgIds       []uint64          `protobuf:"varint,100,rep,packed,name=org_ids,json=orgIds,proto3" json:"org_ids,omitempty"`                // 组织ids
	EmployeeIds  []uint64          `protobuf:"varint,101,rep,packed,name=employee_ids,json=employeeIds,proto3" json:"employee_ids,omitempty"` // 成员ids
	UserIds      []uint64          `protobuf:"varint,102,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`             // 用户ids
	EmployeeName string            `protobuf:"bytes,103,opt,name=employee_name,json=employeeName,proto3" json:"employee_name,omitempty"`      // 成员名称
}

func (x *GetOrgEmployeeListReq) Reset() {
	*x = GetOrgEmployeeListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgEmployeeListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgEmployeeListReq) ProtoMessage() {}

func (x *GetOrgEmployeeListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgEmployeeListReq.ProtoReflect.Descriptor instead.
func (*GetOrgEmployeeListReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{39}
}

func (x *GetOrgEmployeeListReq) GetPageRequest() *page.PageRequest {
	if x != nil {
		return x.PageRequest
	}
	return nil
}

func (x *GetOrgEmployeeListReq) GetOrgIds() []uint64 {
	if x != nil {
		return x.OrgIds
	}
	return nil
}

func (x *GetOrgEmployeeListReq) GetEmployeeIds() []uint64 {
	if x != nil {
		return x.EmployeeIds
	}
	return nil
}

func (x *GetOrgEmployeeListReq) GetUserIds() []uint64 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GetOrgEmployeeListReq) GetEmployeeName() string {
	if x != nil {
		return x.EmployeeName
	}
	return ""
}

type GetOrgEmployeeListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string                      `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string                      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string           `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     *GetOrgEmployeeListRespData `protobuf:"bytes,100,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgEmployeeListResp) Reset() {
	*x = GetOrgEmployeeListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgEmployeeListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgEmployeeListResp) ProtoMessage() {}

func (x *GetOrgEmployeeListResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgEmployeeListResp.ProtoReflect.Descriptor instead.
func (*GetOrgEmployeeListResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{40}
}

func (x *GetOrgEmployeeListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrgEmployeeListResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetOrgEmployeeListResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetOrgEmployeeListResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetOrgEmployeeListResp) GetData() *GetOrgEmployeeListRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrgEmployeeListRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*OrgEmployee     `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PageInfo *page.PageResponse `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *GetOrgEmployeeListRespData) Reset() {
	*x = GetOrgEmployeeListRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgEmployeeListRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgEmployeeListRespData) ProtoMessage() {}

func (x *GetOrgEmployeeListRespData) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgEmployeeListRespData.ProtoReflect.Descriptor instead.
func (*GetOrgEmployeeListRespData) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{41}
}

func (x *GetOrgEmployeeListRespData) GetList() []*OrgEmployee {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetOrgEmployeeListRespData) GetPageInfo() *page.PageResponse {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type GetOrgInviteRecordListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageRequest    *page.PageRequest `protobuf:"bytes,1,opt,name=page_request,json=pageRequest,proto3" json:"page_request,omitempty"`
	OrgIds         []uint64          `protobuf:"varint,100,rep,packed,name=org_ids,json=orgIds,proto3" json:"org_ids,omitempty"`                           // 组织ids
	InviterUserIds []uint64          `protobuf:"varint,102,rep,packed,name=inviter_user_ids,json=inviterUserIds,proto3" json:"inviter_user_ids,omitempty"` // 邀请人ids
	InviteIds      []uint64          `protobuf:"varint,103,rep,packed,name=invite_ids,json=inviteIds,proto3" json:"invite_ids,omitempty"`                  // 邀请ids
	InviteCode     string            `protobuf:"bytes,104,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"`                       // 邀请码
	InviteAccount  string            `protobuf:"bytes,105,opt,name=invite_account,json=inviteAccount,proto3" json:"invite_account,omitempty"`              // 邀请账号
}

func (x *GetOrgInviteRecordListReq) Reset() {
	*x = GetOrgInviteRecordListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgInviteRecordListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgInviteRecordListReq) ProtoMessage() {}

func (x *GetOrgInviteRecordListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgInviteRecordListReq.ProtoReflect.Descriptor instead.
func (*GetOrgInviteRecordListReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{42}
}

func (x *GetOrgInviteRecordListReq) GetPageRequest() *page.PageRequest {
	if x != nil {
		return x.PageRequest
	}
	return nil
}

func (x *GetOrgInviteRecordListReq) GetOrgIds() []uint64 {
	if x != nil {
		return x.OrgIds
	}
	return nil
}

func (x *GetOrgInviteRecordListReq) GetInviterUserIds() []uint64 {
	if x != nil {
		return x.InviterUserIds
	}
	return nil
}

func (x *GetOrgInviteRecordListReq) GetInviteIds() []uint64 {
	if x != nil {
		return x.InviteIds
	}
	return nil
}

func (x *GetOrgInviteRecordListReq) GetInviteCode() string {
	if x != nil {
		return x.InviteCode
	}
	return ""
}

func (x *GetOrgInviteRecordListReq) GetInviteAccount() string {
	if x != nil {
		return x.InviteAccount
	}
	return ""
}

type GetOrgInviteRecordListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32                           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string                          `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string                          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string               `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     *GetOrgInviteRecordListRespData `protobuf:"bytes,100,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgInviteRecordListResp) Reset() {
	*x = GetOrgInviteRecordListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgInviteRecordListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgInviteRecordListResp) ProtoMessage() {}

func (x *GetOrgInviteRecordListResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgInviteRecordListResp.ProtoReflect.Descriptor instead.
func (*GetOrgInviteRecordListResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{43}
}

func (x *GetOrgInviteRecordListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrgInviteRecordListResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetOrgInviteRecordListResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetOrgInviteRecordListResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetOrgInviteRecordListResp) GetData() *GetOrgInviteRecordListRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrgInviteRecordListRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*OrgInviteRecord `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PageInfo *page.PageResponse `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *GetOrgInviteRecordListRespData) Reset() {
	*x = GetOrgInviteRecordListRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgInviteRecordListRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgInviteRecordListRespData) ProtoMessage() {}

func (x *GetOrgInviteRecordListRespData) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgInviteRecordListRespData.ProtoReflect.Descriptor instead.
func (*GetOrgInviteRecordListRespData) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{44}
}

func (x *GetOrgInviteRecordListRespData) GetList() []*OrgInviteRecord {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetOrgInviteRecordListRespData) GetPageInfo() *page.PageResponse {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type SetOrgStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorEid uint64                        `protobuf:"varint,100,opt,name=operator_eid,json=operatorEid,proto3" json:"operator_eid,omitempty"`                                          // 操作成员ID
	OrgId       uint64                        `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`                                                              // 组织ID
	OrgStatus   enums.OrgStatusEnum_OrgStatus `protobuf:"varint,2,opt,name=org_status,json=orgStatus,proto3,enum=saas.api.org.enumv1.OrgStatusEnum_OrgStatus" json:"org_status,omitempty"` // 组织状态
}

func (x *SetOrgStatusReq) Reset() {
	*x = SetOrgStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrgStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrgStatusReq) ProtoMessage() {}

func (x *SetOrgStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrgStatusReq.ProtoReflect.Descriptor instead.
func (*SetOrgStatusReq) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{45}
}

func (x *SetOrgStatusReq) GetOperatorEid() uint64 {
	if x != nil {
		return x.OperatorEid
	}
	return 0
}

func (x *SetOrgStatusReq) GetOrgId() uint64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *SetOrgStatusReq) GetOrgStatus() enums.OrgStatusEnum_OrgStatus {
	if x != nil {
		return x.OrgStatus
	}
	return enums.OrgStatusEnum_OrgStatus(0)
}

type SetOrgStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string                `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string                `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string     `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     *SetOrgStatusRespData `protobuf:"bytes,100,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SetOrgStatusResp) Reset() {
	*x = SetOrgStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrgStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrgStatusResp) ProtoMessage() {}

func (x *SetOrgStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrgStatusResp.ProtoReflect.Descriptor instead.
func (*SetOrgStatusResp) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{46}
}

func (x *SetOrgStatusResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SetOrgStatusResp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *SetOrgStatusResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SetOrgStatusResp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SetOrgStatusResp) GetData() *SetOrgStatusRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SetOrgStatusRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool                          `protobuf:"varint,100,opt,name=success,proto3" json:"success,omitempty"`
	OrgId     uint64                        `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	OrgStatus enums.OrgStatusEnum_OrgStatus `protobuf:"varint,2,opt,name=org_status,json=orgStatus,proto3,enum=saas.api.org.enumv1.OrgStatusEnum_OrgStatus" json:"org_status,omitempty"`
}

func (x *SetOrgStatusRespData) Reset() {
	*x = SetOrgStatusRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrgStatusRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrgStatusRespData) ProtoMessage() {}

func (x *SetOrgStatusRespData) ProtoReflect() protoreflect.Message {
	mi := &file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrgStatusRespData.ProtoReflect.Descriptor instead.
func (*SetOrgStatusRespData) Descriptor() ([]byte, []int) {
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP(), []int{47}
}

func (x *SetOrgStatusRespData) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SetOrgStatusRespData) GetOrgId() uint64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *SetOrgStatusRespData) GetOrgStatus() enums.OrgStatusEnum_OrgStatus {
	if x != nil {
		return x.OrgStatus
	}
	return enums.OrgStatusEnum_OrgStatus(0)
}

var File_api_org_service_v1_resources_org_resource_v1_proto protoreflect.FileDescriptor

var file_api_org_service_v1_resources_org_resource_v1_proto_rawDesc = []byte{
	0x0a, 0x32, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6f,
	0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6b, 0x61, 0x69, 0x67, 0x75, 0x61, 0x6e, 0x67, 0x2f, 0x67, 0x6f,
	0x2d, 0x73, 0x72, 0x76, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x6b, 0x69, 0x74, 0x2f, 0x70, 0x61, 0x67,
	0x65, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2a, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x61, 0x70,
	0x69, 0x2f, 0x6f, 0x72, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x5f, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x72, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x07, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x95, 0x02, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x28, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x96, 0x05, 0x0a, 0x03, 0x4f, 0x72, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x67, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x6f, 0x72, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x43, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x6f,
	0x72, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6f,
	0x72, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x5a, 0x69,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f,
	0x72, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0,
	0x01, 0x01, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x22, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x6f, 0x72, 0x67, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0xd0, 0x01, 0x01, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x4d,
	0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x20, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd6, 0x01,
	0x0a, 0x10, 0x4f, 0x6e, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x26, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x6f, 0x72,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0a, 0x6f, 0x72, 0x67, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0, 0x01, 0x01, 0x52, 0x09, 0x6f, 0x72,
	0x67, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x4d, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x61, 0x61, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x67, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x03, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20,
	0x00, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02,
	0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x67, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x0c, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0, 0x01, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x27, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0,
	0x01, 0x01, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0, 0x01, 0x01, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xaa, 0x02, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x52, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xfa, 0x02, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x65, 0x0a, 0x0f, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e,
	0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x5d, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x22, 0xa7, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x12, 0x2a, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x45, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x67,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46,
	0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x9e, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x8b, 0x04, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x32, 0x02, 0x20, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x00,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x7c, 0x0a, 0x13,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x73, 0x61, 0x61, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x74, 0x0a, 0x14, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x12, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x22, 0xe0, 0x02, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x64, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x52, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x22, 0xad, 0x02, 0x0a, 0x13, 0x4a, 0x6f, 0x69, 0x6e, 0x42,
	0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x24,
	0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0x80, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0, 0x01, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x27, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0,
	0x01, 0x01, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0, 0x01, 0x01, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xb9, 0x02, 0x0a, 0x14, 0x4a, 0x6f, 0x69, 0x6e, 0x42,
	0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76,
	0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73,
	0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xff, 0x02, 0x0a, 0x18, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x65,
	0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x73,
	0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x16, 0x41, 0x67, 0x72, 0x65, 0x65, 0x4f, 0x72,
	0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x24, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0xd0, 0x01, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x27, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0, 0x01, 0x01, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0xd0, 0x01, 0x01, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0xc2, 0x02, 0x0a, 0x17, 0x41, 0x67, 0x72, 0x65, 0x65, 0x4f, 0x72, 0x52, 0x65, 0x66,
	0x75, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x4f, 0x72, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x72, 0x65, 0x65, 0x4f, 0x72, 0x52,
	0x65, 0x66, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x03, 0x0a, 0x1b, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x4f, 0x72, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x65, 0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x0d,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x72,
	0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0c, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x2f, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x98, 0x02, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x04, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x73, 0x22,
	0xa0, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x41, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x0b, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x22, 0xb0, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x04, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64,
	0x73, 0x22, 0xb8, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x41, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x09, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x64, 0x22,
	0xbc, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x48,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x27, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x64, 0x20,
	0x03, 0x28, 0x04, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x64, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x61, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x85, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x70, 0x6b, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x51, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x70, 0x6b, 0x67,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x70, 0x6b, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x65, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x66, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xbf, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x59, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x61, 0x61, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x93, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x70, 0x6b, 0x67,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x87, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x70, 0x6b, 0x67, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x66, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x67, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xcb, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9b, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x61, 0x67, 0x65, 0x70, 0x6b, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb4, 0x01,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x2a, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x69,
	0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x55, 0x0a,
	0x0a, 0x6f, 0x72, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x53, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x4b,
	0x0a, 0x0a, 0x6f, 0x72, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x09, 0x6f, 0x72, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x88, 0x01, 0x0a, 0x17,
	0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x42, 0x14, 0x53, 0x61, 0x61, 0x73, 0x41, 0x70, 0x69,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x31, 0x50, 0x01, 0x5a,
	0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x61, 0x61, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3b, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_org_service_v1_resources_org_resource_v1_proto_rawDescOnce sync.Once
	file_api_org_service_v1_resources_org_resource_v1_proto_rawDescData = file_api_org_service_v1_resources_org_resource_v1_proto_rawDesc
)

func file_api_org_service_v1_resources_org_resource_v1_proto_rawDescGZIP() []byte {
	file_api_org_service_v1_resources_org_resource_v1_proto_rawDescOnce.Do(func() {
		file_api_org_service_v1_resources_org_resource_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_org_service_v1_resources_org_resource_v1_proto_rawDescData)
	})
	return file_api_org_service_v1_resources_org_resource_v1_proto_rawDescData
}

var file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_api_org_service_v1_resources_org_resource_v1_proto_goTypes = []any{
	(*PingReq)(nil),                               // 0: saas.api.org.resourcev1.PingReq
	(*PingResp)(nil),                              // 1: saas.api.org.resourcev1.PingResp
	(*PingRespData)(nil),                          // 2: saas.api.org.resourcev1.PingRespData
	(*Org)(nil),                                   // 3: saas.api.org.resourcev1.Org
	(*CreateOrgReq)(nil),                          // 4: saas.api.org.resourcev1.CreateOrgReq
	(*OnlyCreateOrgReq)(nil),                      // 5: saas.api.org.resourcev1.OnlyCreateOrgReq
	(*CreateOrgResp)(nil),                         // 6: saas.api.org.resourcev1.CreateOrgResp
	(*CreateOrgRespData)(nil),                     // 7: saas.api.org.resourcev1.CreateOrgRespData
	(*AddEmployeeReq)(nil),                        // 8: saas.api.org.resourcev1.AddEmployeeReq
	(*AddEmployeeResp)(nil),                       // 9: saas.api.org.resourcev1.AddEmployeeResp
	(*AddEmployeeRespData)(nil),                   // 10: saas.api.org.resourcev1.AddEmployeeRespData
	(*CreateInviteRecordForLinkReq)(nil),          // 11: saas.api.org.resourcev1.CreateInviteRecordForLinkReq
	(*CreateInviteRecordForLinkResp)(nil),         // 12: saas.api.org.resourcev1.CreateInviteRecordForLinkResp
	(*CreateInviteRecordForLinkRespData)(nil),     // 13: saas.api.org.resourcev1.CreateInviteRecordForLinkRespData
	(*CreateInviteRecordForEmployeeReq)(nil),      // 14: saas.api.org.resourcev1.CreateInviteRecordForEmployeeReq
	(*CreateInviteRecordForEmployeeResp)(nil),     // 15: saas.api.org.resourcev1.CreateInviteRecordForEmployeeResp
	(*CreateInviteRecordForEmployeeRespData)(nil), // 16: saas.api.org.resourcev1.CreateInviteRecordForEmployeeRespData
	(*JoinByInviteLinkReq)(nil),                   // 17: saas.api.org.resourcev1.JoinByInviteLinkReq
	(*JoinByInviteLinkResp)(nil),                  // 18: saas.api.org.resourcev1.JoinByInviteLinkResp
	(*JoinByInviteLinkRespData)(nil),              // 19: saas.api.org.resourcev1.JoinByInviteLinkRespData
	(*AgreeOrRefuseInviteReq)(nil),                // 20: saas.api.org.resourcev1.AgreeOrRefuseInviteReq
	(*AgreeOrRefuseInviteResp)(nil),               // 21: saas.api.org.resourcev1.AgreeOrRefuseInviteResp
	(*AgreeOrRefuseInviteRespData)(nil),           // 22: saas.api.org.resourcev1.AgreeOrRefuseInviteRespData
	(*GetOrgInfoReq)(nil),                         // 23: saas.api.org.resourcev1.GetOrgInfoReq
	(*GetOrgInfoResp)(nil),                        // 24: saas.api.org.resourcev1.GetOrgInfoResp
	(*GetOrgInfoListReq)(nil),                     // 25: saas.api.org.resourcev1.GetOrgInfoListReq
	(*GetOrgInfoListResp)(nil),                    // 26: saas.api.org.resourcev1.GetOrgInfoListResp
	(*GetOrgEmployeeInfoReq)(nil),                 // 27: saas.api.org.resourcev1.GetOrgEmployeeInfoReq
	(*GetUserOrgEmployeeInfoReq)(nil),             // 28: saas.api.org.resourcev1.GetUserOrgEmployeeInfoReq
	(*GetOrgEmployeeInfoResp)(nil),                // 29: saas.api.org.resourcev1.GetOrgEmployeeInfoResp
	(*GetOrgEmployeeInfoListReq)(nil),             // 30: saas.api.org.resourcev1.GetOrgEmployeeInfoListReq
	(*GetOrgEmployeeInfoListResp)(nil),            // 31: saas.api.org.resourcev1.GetOrgEmployeeInfoListResp
	(*GetOrgInviteRecordInfoReq)(nil),             // 32: saas.api.org.resourcev1.GetOrgInviteRecordInfoReq
	(*GetOrgInviteRecordInfoResp)(nil),            // 33: saas.api.org.resourcev1.GetOrgInviteRecordInfoResp
	(*GetOrgInviteRecordInfoListReq)(nil),         // 34: saas.api.org.resourcev1.GetOrgInviteRecordInfoListReq
	(*GetOrgInviteRecordInfoListResp)(nil),        // 35: saas.api.org.resourcev1.GetOrgInviteRecordInfoListResp
	(*GetOrgListReq)(nil),                         // 36: saas.api.org.resourcev1.GetOrgListReq
	(*GetOrgListResp)(nil),                        // 37: saas.api.org.resourcev1.GetOrgListResp
	(*GetOrgListRespData)(nil),                    // 38: saas.api.org.resourcev1.GetOrgListRespData
	(*GetOrgEmployeeListReq)(nil),                 // 39: saas.api.org.resourcev1.GetOrgEmployeeListReq
	(*GetOrgEmployeeListResp)(nil),                // 40: saas.api.org.resourcev1.GetOrgEmployeeListResp
	(*GetOrgEmployeeListRespData)(nil),            // 41: saas.api.org.resourcev1.GetOrgEmployeeListRespData
	(*GetOrgInviteRecordListReq)(nil),             // 42: saas.api.org.resourcev1.GetOrgInviteRecordListReq
	(*GetOrgInviteRecordListResp)(nil),            // 43: saas.api.org.resourcev1.GetOrgInviteRecordListResp
	(*GetOrgInviteRecordListRespData)(nil),        // 44: saas.api.org.resourcev1.GetOrgInviteRecordListRespData
	(*SetOrgStatusReq)(nil),                       // 45: saas.api.org.resourcev1.SetOrgStatusReq
	(*SetOrgStatusResp)(nil),                      // 46: saas.api.org.resourcev1.SetOrgStatusResp
	(*SetOrgStatusRespData)(nil),                  // 47: saas.api.org.resourcev1.SetOrgStatusRespData
	nil,                                           // 48: saas.api.org.resourcev1.PingResp.MetadataEntry
	nil,                                           // 49: saas.api.org.resourcev1.CreateOrgResp.MetadataEntry
	nil,                                           // 50: saas.api.org.resourcev1.AddEmployeeResp.MetadataEntry
	nil,                                           // 51: saas.api.org.resourcev1.CreateInviteRecordForLinkResp.MetadataEntry
	nil,                                           // 52: saas.api.org.resourcev1.CreateInviteRecordForEmployeeResp.MetadataEntry
	nil,                                           // 53: saas.api.org.resourcev1.JoinByInviteLinkResp.MetadataEntry
	nil,                                           // 54: saas.api.org.resourcev1.AgreeOrRefuseInviteResp.MetadataEntry
	nil,                                           // 55: saas.api.org.resourcev1.GetOrgInfoResp.MetadataEntry
	nil,                                           // 56: saas.api.org.resourcev1.GetOrgInfoListResp.MetadataEntry
	nil,                                           // 57: saas.api.org.resourcev1.GetOrgEmployeeInfoResp.MetadataEntry
	nil,                                           // 58: saas.api.org.resourcev1.GetOrgEmployeeInfoListResp.MetadataEntry
	nil,                                           // 59: saas.api.org.resourcev1.GetOrgInviteRecordInfoResp.MetadataEntry
	nil,                                           // 60: saas.api.org.resourcev1.GetOrgInviteRecordInfoListResp.MetadataEntry
	nil,                                           // 61: saas.api.org.resourcev1.GetOrgListResp.MetadataEntry
	nil,                                           // 62: saas.api.org.resourcev1.GetOrgEmployeeListResp.MetadataEntry
	nil,                                           // 63: saas.api.org.resourcev1.GetOrgInviteRecordListResp.MetadataEntry
	nil,                                           // 64: saas.api.org.resourcev1.SetOrgStatusResp.MetadataEntry
	(enums.OrgTypeEnum_OrgType)(0),                // 65: saas.api.org.enumv1.OrgTypeEnum.OrgType
	(enums.OrgStatusEnum_OrgStatus)(0),            // 66: saas.api.org.enumv1.OrgStatusEnum.OrgStatus
	(enums.OrgEmployeeRoleEnum_OrgEmployeeRole)(0),           // 67: saas.api.org.enumv1.OrgEmployeeRoleEnum.OrgEmployeeRole
	(enums.OrgEmployeeStatusEnum_OrgEmployeeStatus)(0),       // 68: saas.api.org.enumv1.OrgEmployeeStatusEnum.OrgEmployeeStatus
	(*timestamppb.Timestamp)(nil),                            // 69: google.protobuf.Timestamp
	(enums.OrgInviteAccountTypeEnum_OrgInviteAccountType)(0), // 70: saas.api.org.enumv1.OrgInviteAccountTypeEnum.OrgInviteAccountType
	(*OrgEmployee)(nil),                                      // 71: saas.api.org.resourcev1.OrgEmployee
	(*OrgInviteRecord)(nil),                                  // 72: saas.api.org.resourcev1.OrgInviteRecord
	(*page.PageRequest)(nil),                                 // 73: kit.page.pagepkg.PageRequest
	(*page.PageResponse)(nil),                                // 74: kit.page.pagepkg.PageResponse
}
var file_api_org_service_v1_resources_org_resource_v1_proto_depIdxs = []int32{
	48, // 0: saas.api.org.resourcev1.PingResp.metadata:type_name -> saas.api.org.resourcev1.PingResp.MetadataEntry
	2,  // 1: saas.api.org.resourcev1.PingResp.data:type_name -> saas.api.org.resourcev1.PingRespData
	65, // 2: saas.api.org.resourcev1.Org.org_type:type_name -> saas.api.org.enumv1.OrgTypeEnum.OrgType
	66, // 3: saas.api.org.resourcev1.Org.org_status:type_name -> saas.api.org.enumv1.OrgStatusEnum.OrgStatus
	65, // 4: saas.api.org.resourcev1.CreateOrgReq.org_type:type_name -> saas.api.org.enumv1.OrgTypeEnum.OrgType
	65, // 5: saas.api.org.resourcev1.OnlyCreateOrgReq.org_type:type_name -> saas.api.org.enumv1.OrgTypeEnum.OrgType
	49, // 6: saas.api.org.resourcev1.CreateOrgResp.metadata:type_name -> saas.api.org.resourcev1.CreateOrgResp.MetadataEntry
	7,  // 7: saas.api.org.resourcev1.CreateOrgResp.data:type_name -> saas.api.org.resourcev1.CreateOrgRespData
	65, // 8: saas.api.org.resourcev1.CreateOrgRespData.org_type:type_name -> saas.api.org.enumv1.OrgTypeEnum.OrgType
	67, // 9: saas.api.org.resourcev1.AddEmployeeReq.employee_role:type_name -> saas.api.org.enumv1.OrgEmployeeRoleEnum.OrgEmployeeRole
	50, // 10: saas.api.org.resourcev1.AddEmployeeResp.metadata:type_name -> saas.api.org.resourcev1.AddEmployeeResp.MetadataEntry
	10, // 11: saas.api.org.resourcev1.AddEmployeeResp.data:type_name -> saas.api.org.resourcev1.AddEmployeeRespData
	68, // 12: saas.api.org.resourcev1.AddEmployeeRespData.employee_status:type_name -> saas.api.org.enumv1.OrgEmployeeStatusEnum.OrgEmployeeStatus
	67, // 13: saas.api.org.resourcev1.AddEmployeeRespData.employee_role:type_name -> saas.api.org.enumv1.OrgEmployeeRoleEnum.OrgEmployeeRole
	69, // 14: saas.api.org.resourcev1.CreateInviteRecordForLinkReq.expire_time:type_name -> google.protobuf.Timestamp
	67, // 15: saas.api.org.resourcev1.CreateInviteRecordForLinkReq.invite_employee_role:type_name -> saas.api.org.enumv1.OrgEmployeeRoleEnum.OrgEmployeeRole
	51, // 16: saas.api.org.resourcev1.CreateInviteRecordForLinkResp.metadata:type_name -> saas.api.org.resourcev1.CreateInviteRecordForLinkResp.MetadataEntry
	13, // 17: saas.api.org.resourcev1.CreateInviteRecordForLinkResp.data:type_name -> saas.api.org.resourcev1.CreateInviteRecordForLinkRespData
	69, // 18: saas.api.org.resourcev1.CreateInviteRecordForLinkRespData.expire_time:type_name -> google.protobuf.Timestamp
	69, // 19: saas.api.org.resourcev1.CreateInviteRecordForEmployeeReq.expire_time:type_name -> google.protobuf.Timestamp
	70, // 20: saas.api.org.resourcev1.CreateInviteRecordForEmployeeReq.invite_account_type:type_name -> saas.api.org.enumv1.OrgInviteAccountTypeEnum.OrgInviteAccountType
	67, // 21: saas.api.org.resourcev1.CreateInviteRecordForEmployeeReq.invite_employee_role:type_name -> saas.api.org.enumv1.OrgEmployeeRoleEnum.OrgEmployeeRole
	52, // 22: saas.api.org.resourcev1.CreateInviteRecordForEmployeeResp.metadata:type_name -> saas.api.org.resourcev1.CreateInviteRecordForEmployeeResp.MetadataEntry
	16, // 23: saas.api.org.resourcev1.CreateInviteRecordForEmployeeResp.data:type_name -> saas.api.org.resourcev1.CreateInviteRecordForEmployeeRespData
	69, // 24: saas.api.org.resourcev1.CreateInviteRecordForEmployeeRespData.expire_time:type_name -> google.protobuf.Timestamp
	53, // 25: saas.api.org.resourcev1.JoinByInviteLinkResp.metadata:type_name -> saas.api.org.resourcev1.JoinByInviteLinkResp.MetadataEntry
	19, // 26: saas.api.org.resourcev1.JoinByInviteLinkResp.data:type_name -> saas.api.org.resourcev1.JoinByInviteLinkRespData
	68, // 27: saas.api.org.resourcev1.JoinByInviteLinkRespData.employee_status:type_name -> saas.api.org.enumv1.OrgEmployeeStatusEnum.OrgEmployeeStatus
	67, // 28: saas.api.org.resourcev1.JoinByInviteLinkRespData.employee_role:type_name -> saas.api.org.enumv1.OrgEmployeeRoleEnum.OrgEmployeeRole
	54, // 29: saas.api.org.resourcev1.AgreeOrRefuseInviteResp.metadata:type_name -> saas.api.org.resourcev1.AgreeOrRefuseInviteResp.MetadataEntry
	22, // 30: saas.api.org.resourcev1.AgreeOrRefuseInviteResp.data:type_name -> saas.api.org.resourcev1.AgreeOrRefuseInviteRespData
	68, // 31: saas.api.org.resourcev1.AgreeOrRefuseInviteRespData.employee_status:type_name -> saas.api.org.enumv1.OrgEmployeeStatusEnum.OrgEmployeeStatus
	67, // 32: saas.api.org.resourcev1.AgreeOrRefuseInviteRespData.employee_role:type_name -> saas.api.org.enumv1.OrgEmployeeRoleEnum.OrgEmployeeRole
	55, // 33: saas.api.org.resourcev1.GetOrgInfoResp.metadata:type_name -> saas.api.org.resourcev1.GetOrgInfoResp.MetadataEntry
	3,  // 34: saas.api.org.resourcev1.GetOrgInfoResp.data:type_name -> saas.api.org.resourcev1.Org
	56, // 35: saas.api.org.resourcev1.GetOrgInfoListResp.metadata:type_name -> saas.api.org.resourcev1.GetOrgInfoListResp.MetadataEntry
	3,  // 36: saas.api.org.resourcev1.GetOrgInfoListResp.data:type_name -> saas.api.org.resourcev1.Org
	57, // 37: saas.api.org.resourcev1.GetOrgEmployeeInfoResp.metadata:type_name -> saas.api.org.resourcev1.GetOrgEmployeeInfoResp.MetadataEntry
	71, // 38: saas.api.org.resourcev1.GetOrgEmployeeInfoResp.data:type_name -> saas.api.org.resourcev1.OrgEmployee
	58, // 39: saas.api.org.resourcev1.GetOrgEmployeeInfoListResp.metadata:type_name -> saas.api.org.resourcev1.GetOrgEmployeeInfoListResp.MetadataEntry
	71, // 40: saas.api.org.resourcev1.GetOrgEmployeeInfoListResp.data:type_name -> saas.api.org.resourcev1.OrgEmployee
	59, // 41: saas.api.org.resourcev1.GetOrgInviteRecordInfoResp.metadata:type_name -> saas.api.org.resourcev1.GetOrgInviteRecordInfoResp.MetadataEntry
	72, // 42: saas.api.org.resourcev1.GetOrgInviteRecordInfoResp.data:type_name -> saas.api.org.resourcev1.OrgInviteRecord
	60, // 43: saas.api.org.resourcev1.GetOrgInviteRecordInfoListResp.metadata:type_name -> saas.api.org.resourcev1.GetOrgInviteRecordInfoListResp.MetadataEntry
	72, // 44: saas.api.org.resourcev1.GetOrgInviteRecordInfoListResp.data:type_name -> saas.api.org.resourcev1.OrgInviteRecord
	73, // 45: saas.api.org.resourcev1.GetOrgListReq.page_request:type_name -> kit.page.pagepkg.PageRequest
	61, // 46: saas.api.org.resourcev1.GetOrgListResp.metadata:type_name -> saas.api.org.resourcev1.GetOrgListResp.MetadataEntry
	38, // 47: saas.api.org.resourcev1.GetOrgListResp.data:type_name -> saas.api.org.resourcev1.GetOrgListRespData
	3,  // 48: saas.api.org.resourcev1.GetOrgListRespData.list:type_name -> saas.api.org.resourcev1.Org
	74, // 49: saas.api.org.resourcev1.GetOrgListRespData.page_info:type_name -> kit.page.pagepkg.PageResponse
	73, // 50: saas.api.org.resourcev1.GetOrgEmployeeListReq.page_request:type_name -> kit.page.pagepkg.PageRequest
	62, // 51: saas.api.org.resourcev1.GetOrgEmployeeListResp.metadata:type_name -> saas.api.org.resourcev1.GetOrgEmployeeListResp.MetadataEntry
	41, // 52: saas.api.org.resourcev1.GetOrgEmployeeListResp.data:type_name -> saas.api.org.resourcev1.GetOrgEmployeeListRespData
	71, // 53: saas.api.org.resourcev1.GetOrgEmployeeListRespData.list:type_name -> saas.api.org.resourcev1.OrgEmployee
	74, // 54: saas.api.org.resourcev1.GetOrgEmployeeListRespData.page_info:type_name -> kit.page.pagepkg.PageResponse
	73, // 55: saas.api.org.resourcev1.GetOrgInviteRecordListReq.page_request:type_name -> kit.page.pagepkg.PageRequest
	63, // 56: saas.api.org.resourcev1.GetOrgInviteRecordListResp.metadata:type_name -> saas.api.org.resourcev1.GetOrgInviteRecordListResp.MetadataEntry
	44, // 57: saas.api.org.resourcev1.GetOrgInviteRecordListResp.data:type_name -> saas.api.org.resourcev1.GetOrgInviteRecordListRespData
	72, // 58: saas.api.org.resourcev1.GetOrgInviteRecordListRespData.list:type_name -> saas.api.org.resourcev1.OrgInviteRecord
	74, // 59: saas.api.org.resourcev1.GetOrgInviteRecordListRespData.page_info:type_name -> kit.page.pagepkg.PageResponse
	66, // 60: saas.api.org.resourcev1.SetOrgStatusReq.org_status:type_name -> saas.api.org.enumv1.OrgStatusEnum.OrgStatus
	64, // 61: saas.api.org.resourcev1.SetOrgStatusResp.metadata:type_name -> saas.api.org.resourcev1.SetOrgStatusResp.MetadataEntry
	47, // 62: saas.api.org.resourcev1.SetOrgStatusResp.data:type_name -> saas.api.org.resourcev1.SetOrgStatusRespData
	66, // 63: saas.api.org.resourcev1.SetOrgStatusRespData.org_status:type_name -> saas.api.org.enumv1.OrgStatusEnum.OrgStatus
	64, // [64:64] is the sub-list for method output_type
	64, // [64:64] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_api_org_service_v1_resources_org_resource_v1_proto_init() }
func file_api_org_service_v1_resources_org_resource_v1_proto_init() {
	if File_api_org_service_v1_resources_org_resource_v1_proto != nil {
		return
	}
	file_api_org_service_v1_resources_org_employee_resource_v1_proto_init()
	file_api_org_service_v1_resources_org_invite_record_resource_v1_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PingRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Org); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CreateOrgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*OnlyCreateOrgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CreateOrgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CreateOrgRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*AddEmployeeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AddEmployeeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*AddEmployeeRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CreateInviteRecordForLinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CreateInviteRecordForLinkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CreateInviteRecordForLinkRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CreateInviteRecordForEmployeeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CreateInviteRecordForEmployeeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CreateInviteRecordForEmployeeRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*JoinByInviteLinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*JoinByInviteLinkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*JoinByInviteLinkRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*AgreeOrRefuseInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*AgreeOrRefuseInviteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*AgreeOrRefuseInviteRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgInfoListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgInfoListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgEmployeeInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserOrgEmployeeInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgEmployeeInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgEmployeeInfoListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgEmployeeInfoListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgInviteRecordInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgInviteRecordInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgInviteRecordInfoListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgInviteRecordInfoListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgListRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgEmployeeListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgEmployeeListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgEmployeeListRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgInviteRecordListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgInviteRecordListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgInviteRecordListRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*SetOrgStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*SetOrgStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*SetOrgStatusRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_org_service_v1_resources_org_resource_v1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   65,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_org_service_v1_resources_org_resource_v1_proto_goTypes,
		DependencyIndexes: file_api_org_service_v1_resources_org_resource_v1_proto_depIdxs,
		MessageInfos:      file_api_org_service_v1_resources_org_resource_v1_proto_msgTypes,
	}.Build()
	File_api_org_service_v1_resources_org_resource_v1_proto = out.File
	file_api_org_service_v1_resources_org_resource_v1_proto_rawDesc = nil
	file_api_org_service_v1_resources_org_resource_v1_proto_goTypes = nil
	file_api_org_service_v1_resources_org_resource_v1_proto_depIdxs = nil
}
