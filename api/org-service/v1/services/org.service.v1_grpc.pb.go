// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/org-service/v1/services/org.service.v1.proto

package servicev1

import (
	context "context"
	resources "github.com/go-micro-saas/organization-service/api/org-service/v1/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SrvOrgV1_Ping_FullMethodName                          = "/saas.api.org.servicev1.SrvOrgV1/Ping"
	SrvOrgV1_CreateOrg_FullMethodName                     = "/saas.api.org.servicev1.SrvOrgV1/CreateOrg"
	SrvOrgV1_OnlyCreateOrg_FullMethodName                 = "/saas.api.org.servicev1.SrvOrgV1/OnlyCreateOrg"
	SrvOrgV1_AddEmployee_FullMethodName                   = "/saas.api.org.servicev1.SrvOrgV1/AddEmployee"
	SrvOrgV1_CreateInviteRecordForLink_FullMethodName     = "/saas.api.org.servicev1.SrvOrgV1/CreateInviteRecordForLink"
	SrvOrgV1_CreateInviteRecordForEmployee_FullMethodName = "/saas.api.org.servicev1.SrvOrgV1/CreateInviteRecordForEmployee"
	SrvOrgV1_JoinByInviteLink_FullMethodName              = "/saas.api.org.servicev1.SrvOrgV1/JoinByInviteLink"
)

// SrvOrgV1Client is the client API for SrvOrgV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SrvOrgV1
type SrvOrgV1Client interface {
	// Ping ping
	Ping(ctx context.Context, in *resources.PingReq, opts ...grpc.CallOption) (*resources.PingResp, error)
	CreateOrg(ctx context.Context, in *resources.CreateOrgReq, opts ...grpc.CallOption) (*resources.CreateOrgResp, error)
	OnlyCreateOrg(ctx context.Context, in *resources.OnlyCreateOrgReq, opts ...grpc.CallOption) (*resources.CreateOrgResp, error)
	AddEmployee(ctx context.Context, in *resources.AddEmployeeReq, opts ...grpc.CallOption) (*resources.AddEmployeeResp, error)
	CreateInviteRecordForLink(ctx context.Context, in *resources.CreateInviteRecordForLinkReq, opts ...grpc.CallOption) (*resources.CreateInviteRecordForLinkResp, error)
	CreateInviteRecordForEmployee(ctx context.Context, in *resources.CreateInviteRecordForEmployeeReq, opts ...grpc.CallOption) (*resources.CreateInviteRecordForEmployeeResp, error)
	JoinByInviteLink(ctx context.Context, in *resources.JoinByInviteLinkReq, opts ...grpc.CallOption) (*resources.JoinByInviteLinkResp, error)
}

type srvOrgV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSrvOrgV1Client(cc grpc.ClientConnInterface) SrvOrgV1Client {
	return &srvOrgV1Client{cc}
}

func (c *srvOrgV1Client) Ping(ctx context.Context, in *resources.PingReq, opts ...grpc.CallOption) (*resources.PingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.PingResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) CreateOrg(ctx context.Context, in *resources.CreateOrgReq, opts ...grpc.CallOption) (*resources.CreateOrgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.CreateOrgResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_CreateOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) OnlyCreateOrg(ctx context.Context, in *resources.OnlyCreateOrgReq, opts ...grpc.CallOption) (*resources.CreateOrgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.CreateOrgResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_OnlyCreateOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) AddEmployee(ctx context.Context, in *resources.AddEmployeeReq, opts ...grpc.CallOption) (*resources.AddEmployeeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.AddEmployeeResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_AddEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) CreateInviteRecordForLink(ctx context.Context, in *resources.CreateInviteRecordForLinkReq, opts ...grpc.CallOption) (*resources.CreateInviteRecordForLinkResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.CreateInviteRecordForLinkResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_CreateInviteRecordForLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) CreateInviteRecordForEmployee(ctx context.Context, in *resources.CreateInviteRecordForEmployeeReq, opts ...grpc.CallOption) (*resources.CreateInviteRecordForEmployeeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.CreateInviteRecordForEmployeeResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_CreateInviteRecordForEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) JoinByInviteLink(ctx context.Context, in *resources.JoinByInviteLinkReq, opts ...grpc.CallOption) (*resources.JoinByInviteLinkResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.JoinByInviteLinkResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_JoinByInviteLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvOrgV1Server is the server API for SrvOrgV1 service.
// All implementations must embed UnimplementedSrvOrgV1Server
// for forward compatibility.
//
// SrvOrgV1
type SrvOrgV1Server interface {
	// Ping ping
	Ping(context.Context, *resources.PingReq) (*resources.PingResp, error)
	CreateOrg(context.Context, *resources.CreateOrgReq) (*resources.CreateOrgResp, error)
	OnlyCreateOrg(context.Context, *resources.OnlyCreateOrgReq) (*resources.CreateOrgResp, error)
	AddEmployee(context.Context, *resources.AddEmployeeReq) (*resources.AddEmployeeResp, error)
	CreateInviteRecordForLink(context.Context, *resources.CreateInviteRecordForLinkReq) (*resources.CreateInviteRecordForLinkResp, error)
	CreateInviteRecordForEmployee(context.Context, *resources.CreateInviteRecordForEmployeeReq) (*resources.CreateInviteRecordForEmployeeResp, error)
	JoinByInviteLink(context.Context, *resources.JoinByInviteLinkReq) (*resources.JoinByInviteLinkResp, error)
	mustEmbedUnimplementedSrvOrgV1Server()
}

// UnimplementedSrvOrgV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSrvOrgV1Server struct{}

func (UnimplementedSrvOrgV1Server) Ping(context.Context, *resources.PingReq) (*resources.PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSrvOrgV1Server) CreateOrg(context.Context, *resources.CreateOrgReq) (*resources.CreateOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrg not implemented")
}
func (UnimplementedSrvOrgV1Server) OnlyCreateOrg(context.Context, *resources.OnlyCreateOrgReq) (*resources.CreateOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlyCreateOrg not implemented")
}
func (UnimplementedSrvOrgV1Server) AddEmployee(context.Context, *resources.AddEmployeeReq) (*resources.AddEmployeeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmployee not implemented")
}
func (UnimplementedSrvOrgV1Server) CreateInviteRecordForLink(context.Context, *resources.CreateInviteRecordForLinkReq) (*resources.CreateInviteRecordForLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInviteRecordForLink not implemented")
}
func (UnimplementedSrvOrgV1Server) CreateInviteRecordForEmployee(context.Context, *resources.CreateInviteRecordForEmployeeReq) (*resources.CreateInviteRecordForEmployeeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInviteRecordForEmployee not implemented")
}
func (UnimplementedSrvOrgV1Server) JoinByInviteLink(context.Context, *resources.JoinByInviteLinkReq) (*resources.JoinByInviteLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinByInviteLink not implemented")
}
func (UnimplementedSrvOrgV1Server) mustEmbedUnimplementedSrvOrgV1Server() {}
func (UnimplementedSrvOrgV1Server) testEmbeddedByValue()                  {}

// UnsafeSrvOrgV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvOrgV1Server will
// result in compilation errors.
type UnsafeSrvOrgV1Server interface {
	mustEmbedUnimplementedSrvOrgV1Server()
}

func RegisterSrvOrgV1Server(s grpc.ServiceRegistrar, srv SrvOrgV1Server) {
	// If the following call pancis, it indicates UnimplementedSrvOrgV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SrvOrgV1_ServiceDesc, srv)
}

func _SrvOrgV1_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).Ping(ctx, req.(*resources.PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_CreateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).CreateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_CreateOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).CreateOrg(ctx, req.(*resources.CreateOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_OnlyCreateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.OnlyCreateOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).OnlyCreateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_OnlyCreateOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).OnlyCreateOrg(ctx, req.(*resources.OnlyCreateOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_AddEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.AddEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).AddEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_AddEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).AddEmployee(ctx, req.(*resources.AddEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_CreateInviteRecordForLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateInviteRecordForLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).CreateInviteRecordForLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_CreateInviteRecordForLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).CreateInviteRecordForLink(ctx, req.(*resources.CreateInviteRecordForLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_CreateInviteRecordForEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateInviteRecordForEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).CreateInviteRecordForEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_CreateInviteRecordForEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).CreateInviteRecordForEmployee(ctx, req.(*resources.CreateInviteRecordForEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_JoinByInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.JoinByInviteLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).JoinByInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_JoinByInviteLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).JoinByInviteLink(ctx, req.(*resources.JoinByInviteLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvOrgV1_ServiceDesc is the grpc.ServiceDesc for SrvOrgV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvOrgV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saas.api.org.servicev1.SrvOrgV1",
	HandlerType: (*SrvOrgV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SrvOrgV1_Ping_Handler,
		},
		{
			MethodName: "CreateOrg",
			Handler:    _SrvOrgV1_CreateOrg_Handler,
		},
		{
			MethodName: "OnlyCreateOrg",
			Handler:    _SrvOrgV1_OnlyCreateOrg_Handler,
		},
		{
			MethodName: "AddEmployee",
			Handler:    _SrvOrgV1_AddEmployee_Handler,
		},
		{
			MethodName: "CreateInviteRecordForLink",
			Handler:    _SrvOrgV1_CreateInviteRecordForLink_Handler,
		},
		{
			MethodName: "CreateInviteRecordForEmployee",
			Handler:    _SrvOrgV1_CreateInviteRecordForEmployee_Handler,
		},
		{
			MethodName: "JoinByInviteLink",
			Handler:    _SrvOrgV1_JoinByInviteLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/org-service/v1/services/org.service.v1.proto",
}
