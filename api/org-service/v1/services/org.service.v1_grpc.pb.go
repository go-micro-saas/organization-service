// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/org-service/v1/services/org.service.v1.proto

package servicev1

import (
	context "context"
	resources "github.com/go-micro-saas/organization-service/api/org-service/v1/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SrvOrgV1_Ping_FullMethodName                          = "/saas.api.org.servicev1.SrvOrgV1/Ping"
	SrvOrgV1_CreateOrg_FullMethodName                     = "/saas.api.org.servicev1.SrvOrgV1/CreateOrg"
	SrvOrgV1_OnlyCreateOrg_FullMethodName                 = "/saas.api.org.servicev1.SrvOrgV1/OnlyCreateOrg"
	SrvOrgV1_AddEmployee_FullMethodName                   = "/saas.api.org.servicev1.SrvOrgV1/AddEmployee"
	SrvOrgV1_CreateInviteRecordForLink_FullMethodName     = "/saas.api.org.servicev1.SrvOrgV1/CreateInviteRecordForLink"
	SrvOrgV1_CreateInviteRecordForEmployee_FullMethodName = "/saas.api.org.servicev1.SrvOrgV1/CreateInviteRecordForEmployee"
	SrvOrgV1_JoinByInviteLink_FullMethodName              = "/saas.api.org.servicev1.SrvOrgV1/JoinByInviteLink"
	SrvOrgV1_AgreeOrRefuseInvite_FullMethodName           = "/saas.api.org.servicev1.SrvOrgV1/AgreeOrRefuseInvite"
	SrvOrgV1_SetOrgStatus_FullMethodName                  = "/saas.api.org.servicev1.SrvOrgV1/SetOrgStatus"
	SrvOrgV1_RemoveEmployee_FullMethodName                = "/saas.api.org.servicev1.SrvOrgV1/RemoveEmployee"
	SrvOrgV1_SetEmployeeRole_FullMethodName               = "/saas.api.org.servicev1.SrvOrgV1/SetEmployeeRole"
	SrvOrgV1_SetEmployeeStatus_FullMethodName             = "/saas.api.org.servicev1.SrvOrgV1/SetEmployeeStatus"
	SrvOrgV1_GetOrgInfo_FullMethodName                    = "/saas.api.org.servicev1.SrvOrgV1/GetOrgInfo"
	SrvOrgV1_GetOrgInfoList_FullMethodName                = "/saas.api.org.servicev1.SrvOrgV1/GetOrgInfoList"
	SrvOrgV1_GetOrgEmployeeInfo_FullMethodName            = "/saas.api.org.servicev1.SrvOrgV1/GetOrgEmployeeInfo"
	SrvOrgV1_GetOrgEmployeeInfoList_FullMethodName        = "/saas.api.org.servicev1.SrvOrgV1/GetOrgEmployeeInfoList"
	SrvOrgV1_GetOrgInviteRecordInfo_FullMethodName        = "/saas.api.org.servicev1.SrvOrgV1/GetOrgInviteRecordInfo"
	SrvOrgV1_GetOrgInviteRecordInfoList_FullMethodName    = "/saas.api.org.servicev1.SrvOrgV1/GetOrgInviteRecordInfoList"
	SrvOrgV1_GetOrgList_FullMethodName                    = "/saas.api.org.servicev1.SrvOrgV1/GetOrgList"
	SrvOrgV1_GetOrgEmployeeList_FullMethodName            = "/saas.api.org.servicev1.SrvOrgV1/GetOrgEmployeeList"
	SrvOrgV1_GetOrgInviteRecordList_FullMethodName        = "/saas.api.org.servicev1.SrvOrgV1/GetOrgInviteRecordList"
)

// SrvOrgV1Client is the client API for SrvOrgV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SrvOrgV1
type SrvOrgV1Client interface {
	// Ping ping
	Ping(ctx context.Context, in *resources.PingReq, opts ...grpc.CallOption) (*resources.PingResp, error)
	// 组织-创建组织&添加成员
	CreateOrg(ctx context.Context, in *resources.CreateOrgReq, opts ...grpc.CallOption) (*resources.CreateOrgResp, error)
	// 组织-仅创建组织
	OnlyCreateOrg(ctx context.Context, in *resources.OnlyCreateOrgReq, opts ...grpc.CallOption) (*resources.CreateOrgResp, error)
	// 组织-添加成员
	AddEmployee(ctx context.Context, in *resources.AddEmployeeReq, opts ...grpc.CallOption) (*resources.AddEmployeeResp, error)
	// 组织-创建邀请链接记录
	CreateInviteRecordForLink(ctx context.Context, in *resources.CreateInviteRecordForLinkReq, opts ...grpc.CallOption) (*resources.CreateInviteRecordForLinkResp, error)
	// 组织-创建邀请成员记录
	CreateInviteRecordForEmployee(ctx context.Context, in *resources.CreateInviteRecordForEmployeeReq, opts ...grpc.CallOption) (*resources.CreateInviteRecordForEmployeeResp, error)
	// 组织-通过邀请链接加入组织
	JoinByInviteLink(ctx context.Context, in *resources.JoinByInviteLinkReq, opts ...grpc.CallOption) (*resources.JoinByInviteLinkResp, error)
	// 组织-同意或拒绝邀请
	AgreeOrRefuseInvite(ctx context.Context, in *resources.AgreeOrRefuseInviteReq, opts ...grpc.CallOption) (*resources.AgreeOrRefuseInviteResp, error)
	// 组织-设置组织状态
	SetOrgStatus(ctx context.Context, in *resources.SetOrgStatusReq, opts ...grpc.CallOption) (*resources.SetOrgStatusResp, error)
	// 组织-移除组织成员
	RemoveEmployee(ctx context.Context, in *resources.RemoveEmployeeReq, opts ...grpc.CallOption) (*resources.RemoveEmployeeResp, error)
	// 组织-设置组织成员角色
	SetEmployeeRole(ctx context.Context, in *resources.SetEmployeeRoleReq, opts ...grpc.CallOption) (*resources.SetEmployeeRoleResp, error)
	// 组织-设置组织成员状态
	SetEmployeeStatus(ctx context.Context, in *resources.SetEmployeeStatusReq, opts ...grpc.CallOption) (*resources.SetEmployeeStatusResp, error)
	// 组织-获取组织信息
	GetOrgInfo(ctx context.Context, in *resources.GetOrgInfoReq, opts ...grpc.CallOption) (*resources.GetOrgInfoResp, error)
	// 组织-获取组织信息列表
	GetOrgInfoList(ctx context.Context, in *resources.GetOrgInfoListReq, opts ...grpc.CallOption) (*resources.GetOrgInfoListResp, error)
	// 组织-获取组织成员信息
	GetOrgEmployeeInfo(ctx context.Context, in *resources.GetOrgEmployeeInfoReq, opts ...grpc.CallOption) (*resources.GetOrgEmployeeInfoResp, error)
	// 组织-获取组织成员信息列表
	GetOrgEmployeeInfoList(ctx context.Context, in *resources.GetOrgEmployeeInfoListReq, opts ...grpc.CallOption) (*resources.GetOrgEmployeeInfoListResp, error)
	// 组织-获取组织邀请记录信息
	GetOrgInviteRecordInfo(ctx context.Context, in *resources.GetOrgInviteRecordInfoReq, opts ...grpc.CallOption) (*resources.GetOrgInviteRecordInfoResp, error)
	// 组织-获取组织邀请记录信息列表
	GetOrgInviteRecordInfoList(ctx context.Context, in *resources.GetOrgInviteRecordInfoListReq, opts ...grpc.CallOption) (*resources.GetOrgInviteRecordInfoListResp, error)
	// 组织-获取组织列表
	GetOrgList(ctx context.Context, in *resources.GetOrgListReq, opts ...grpc.CallOption) (*resources.GetOrgListResp, error)
	// 组织-获取组织成员列表
	GetOrgEmployeeList(ctx context.Context, in *resources.GetOrgEmployeeListReq, opts ...grpc.CallOption) (*resources.GetOrgEmployeeListResp, error)
	// 组织-获取组织邀请记录列表
	GetOrgInviteRecordList(ctx context.Context, in *resources.GetOrgInviteRecordListReq, opts ...grpc.CallOption) (*resources.GetOrgInviteRecordListResp, error)
}

type srvOrgV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSrvOrgV1Client(cc grpc.ClientConnInterface) SrvOrgV1Client {
	return &srvOrgV1Client{cc}
}

func (c *srvOrgV1Client) Ping(ctx context.Context, in *resources.PingReq, opts ...grpc.CallOption) (*resources.PingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.PingResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) CreateOrg(ctx context.Context, in *resources.CreateOrgReq, opts ...grpc.CallOption) (*resources.CreateOrgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.CreateOrgResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_CreateOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) OnlyCreateOrg(ctx context.Context, in *resources.OnlyCreateOrgReq, opts ...grpc.CallOption) (*resources.CreateOrgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.CreateOrgResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_OnlyCreateOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) AddEmployee(ctx context.Context, in *resources.AddEmployeeReq, opts ...grpc.CallOption) (*resources.AddEmployeeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.AddEmployeeResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_AddEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) CreateInviteRecordForLink(ctx context.Context, in *resources.CreateInviteRecordForLinkReq, opts ...grpc.CallOption) (*resources.CreateInviteRecordForLinkResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.CreateInviteRecordForLinkResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_CreateInviteRecordForLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) CreateInviteRecordForEmployee(ctx context.Context, in *resources.CreateInviteRecordForEmployeeReq, opts ...grpc.CallOption) (*resources.CreateInviteRecordForEmployeeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.CreateInviteRecordForEmployeeResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_CreateInviteRecordForEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) JoinByInviteLink(ctx context.Context, in *resources.JoinByInviteLinkReq, opts ...grpc.CallOption) (*resources.JoinByInviteLinkResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.JoinByInviteLinkResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_JoinByInviteLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) AgreeOrRefuseInvite(ctx context.Context, in *resources.AgreeOrRefuseInviteReq, opts ...grpc.CallOption) (*resources.AgreeOrRefuseInviteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.AgreeOrRefuseInviteResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_AgreeOrRefuseInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) SetOrgStatus(ctx context.Context, in *resources.SetOrgStatusReq, opts ...grpc.CallOption) (*resources.SetOrgStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SetOrgStatusResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_SetOrgStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) RemoveEmployee(ctx context.Context, in *resources.RemoveEmployeeReq, opts ...grpc.CallOption) (*resources.RemoveEmployeeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.RemoveEmployeeResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_RemoveEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) SetEmployeeRole(ctx context.Context, in *resources.SetEmployeeRoleReq, opts ...grpc.CallOption) (*resources.SetEmployeeRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SetEmployeeRoleResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_SetEmployeeRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) SetEmployeeStatus(ctx context.Context, in *resources.SetEmployeeStatusReq, opts ...grpc.CallOption) (*resources.SetEmployeeStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SetEmployeeStatusResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_SetEmployeeStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) GetOrgInfo(ctx context.Context, in *resources.GetOrgInfoReq, opts ...grpc.CallOption) (*resources.GetOrgInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.GetOrgInfoResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_GetOrgInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) GetOrgInfoList(ctx context.Context, in *resources.GetOrgInfoListReq, opts ...grpc.CallOption) (*resources.GetOrgInfoListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.GetOrgInfoListResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_GetOrgInfoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) GetOrgEmployeeInfo(ctx context.Context, in *resources.GetOrgEmployeeInfoReq, opts ...grpc.CallOption) (*resources.GetOrgEmployeeInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.GetOrgEmployeeInfoResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_GetOrgEmployeeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) GetOrgEmployeeInfoList(ctx context.Context, in *resources.GetOrgEmployeeInfoListReq, opts ...grpc.CallOption) (*resources.GetOrgEmployeeInfoListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.GetOrgEmployeeInfoListResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_GetOrgEmployeeInfoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) GetOrgInviteRecordInfo(ctx context.Context, in *resources.GetOrgInviteRecordInfoReq, opts ...grpc.CallOption) (*resources.GetOrgInviteRecordInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.GetOrgInviteRecordInfoResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_GetOrgInviteRecordInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) GetOrgInviteRecordInfoList(ctx context.Context, in *resources.GetOrgInviteRecordInfoListReq, opts ...grpc.CallOption) (*resources.GetOrgInviteRecordInfoListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.GetOrgInviteRecordInfoListResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_GetOrgInviteRecordInfoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) GetOrgList(ctx context.Context, in *resources.GetOrgListReq, opts ...grpc.CallOption) (*resources.GetOrgListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.GetOrgListResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_GetOrgList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) GetOrgEmployeeList(ctx context.Context, in *resources.GetOrgEmployeeListReq, opts ...grpc.CallOption) (*resources.GetOrgEmployeeListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.GetOrgEmployeeListResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_GetOrgEmployeeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgV1Client) GetOrgInviteRecordList(ctx context.Context, in *resources.GetOrgInviteRecordListReq, opts ...grpc.CallOption) (*resources.GetOrgInviteRecordListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.GetOrgInviteRecordListResp)
	err := c.cc.Invoke(ctx, SrvOrgV1_GetOrgInviteRecordList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvOrgV1Server is the server API for SrvOrgV1 service.
// All implementations must embed UnimplementedSrvOrgV1Server
// for forward compatibility.
//
// SrvOrgV1
type SrvOrgV1Server interface {
	// Ping ping
	Ping(context.Context, *resources.PingReq) (*resources.PingResp, error)
	// 组织-创建组织&添加成员
	CreateOrg(context.Context, *resources.CreateOrgReq) (*resources.CreateOrgResp, error)
	// 组织-仅创建组织
	OnlyCreateOrg(context.Context, *resources.OnlyCreateOrgReq) (*resources.CreateOrgResp, error)
	// 组织-添加成员
	AddEmployee(context.Context, *resources.AddEmployeeReq) (*resources.AddEmployeeResp, error)
	// 组织-创建邀请链接记录
	CreateInviteRecordForLink(context.Context, *resources.CreateInviteRecordForLinkReq) (*resources.CreateInviteRecordForLinkResp, error)
	// 组织-创建邀请成员记录
	CreateInviteRecordForEmployee(context.Context, *resources.CreateInviteRecordForEmployeeReq) (*resources.CreateInviteRecordForEmployeeResp, error)
	// 组织-通过邀请链接加入组织
	JoinByInviteLink(context.Context, *resources.JoinByInviteLinkReq) (*resources.JoinByInviteLinkResp, error)
	// 组织-同意或拒绝邀请
	AgreeOrRefuseInvite(context.Context, *resources.AgreeOrRefuseInviteReq) (*resources.AgreeOrRefuseInviteResp, error)
	// 组织-设置组织状态
	SetOrgStatus(context.Context, *resources.SetOrgStatusReq) (*resources.SetOrgStatusResp, error)
	// 组织-移除组织成员
	RemoveEmployee(context.Context, *resources.RemoveEmployeeReq) (*resources.RemoveEmployeeResp, error)
	// 组织-设置组织成员角色
	SetEmployeeRole(context.Context, *resources.SetEmployeeRoleReq) (*resources.SetEmployeeRoleResp, error)
	// 组织-设置组织成员状态
	SetEmployeeStatus(context.Context, *resources.SetEmployeeStatusReq) (*resources.SetEmployeeStatusResp, error)
	// 组织-获取组织信息
	GetOrgInfo(context.Context, *resources.GetOrgInfoReq) (*resources.GetOrgInfoResp, error)
	// 组织-获取组织信息列表
	GetOrgInfoList(context.Context, *resources.GetOrgInfoListReq) (*resources.GetOrgInfoListResp, error)
	// 组织-获取组织成员信息
	GetOrgEmployeeInfo(context.Context, *resources.GetOrgEmployeeInfoReq) (*resources.GetOrgEmployeeInfoResp, error)
	// 组织-获取组织成员信息列表
	GetOrgEmployeeInfoList(context.Context, *resources.GetOrgEmployeeInfoListReq) (*resources.GetOrgEmployeeInfoListResp, error)
	// 组织-获取组织邀请记录信息
	GetOrgInviteRecordInfo(context.Context, *resources.GetOrgInviteRecordInfoReq) (*resources.GetOrgInviteRecordInfoResp, error)
	// 组织-获取组织邀请记录信息列表
	GetOrgInviteRecordInfoList(context.Context, *resources.GetOrgInviteRecordInfoListReq) (*resources.GetOrgInviteRecordInfoListResp, error)
	// 组织-获取组织列表
	GetOrgList(context.Context, *resources.GetOrgListReq) (*resources.GetOrgListResp, error)
	// 组织-获取组织成员列表
	GetOrgEmployeeList(context.Context, *resources.GetOrgEmployeeListReq) (*resources.GetOrgEmployeeListResp, error)
	// 组织-获取组织邀请记录列表
	GetOrgInviteRecordList(context.Context, *resources.GetOrgInviteRecordListReq) (*resources.GetOrgInviteRecordListResp, error)
	mustEmbedUnimplementedSrvOrgV1Server()
}

// UnimplementedSrvOrgV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSrvOrgV1Server struct{}

func (UnimplementedSrvOrgV1Server) Ping(context.Context, *resources.PingReq) (*resources.PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSrvOrgV1Server) CreateOrg(context.Context, *resources.CreateOrgReq) (*resources.CreateOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrg not implemented")
}
func (UnimplementedSrvOrgV1Server) OnlyCreateOrg(context.Context, *resources.OnlyCreateOrgReq) (*resources.CreateOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlyCreateOrg not implemented")
}
func (UnimplementedSrvOrgV1Server) AddEmployee(context.Context, *resources.AddEmployeeReq) (*resources.AddEmployeeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmployee not implemented")
}
func (UnimplementedSrvOrgV1Server) CreateInviteRecordForLink(context.Context, *resources.CreateInviteRecordForLinkReq) (*resources.CreateInviteRecordForLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInviteRecordForLink not implemented")
}
func (UnimplementedSrvOrgV1Server) CreateInviteRecordForEmployee(context.Context, *resources.CreateInviteRecordForEmployeeReq) (*resources.CreateInviteRecordForEmployeeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInviteRecordForEmployee not implemented")
}
func (UnimplementedSrvOrgV1Server) JoinByInviteLink(context.Context, *resources.JoinByInviteLinkReq) (*resources.JoinByInviteLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinByInviteLink not implemented")
}
func (UnimplementedSrvOrgV1Server) AgreeOrRefuseInvite(context.Context, *resources.AgreeOrRefuseInviteReq) (*resources.AgreeOrRefuseInviteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreeOrRefuseInvite not implemented")
}
func (UnimplementedSrvOrgV1Server) SetOrgStatus(context.Context, *resources.SetOrgStatusReq) (*resources.SetOrgStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrgStatus not implemented")
}
func (UnimplementedSrvOrgV1Server) RemoveEmployee(context.Context, *resources.RemoveEmployeeReq) (*resources.RemoveEmployeeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEmployee not implemented")
}
func (UnimplementedSrvOrgV1Server) SetEmployeeRole(context.Context, *resources.SetEmployeeRoleReq) (*resources.SetEmployeeRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEmployeeRole not implemented")
}
func (UnimplementedSrvOrgV1Server) SetEmployeeStatus(context.Context, *resources.SetEmployeeStatusReq) (*resources.SetEmployeeStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEmployeeStatus not implemented")
}
func (UnimplementedSrvOrgV1Server) GetOrgInfo(context.Context, *resources.GetOrgInfoReq) (*resources.GetOrgInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgInfo not implemented")
}
func (UnimplementedSrvOrgV1Server) GetOrgInfoList(context.Context, *resources.GetOrgInfoListReq) (*resources.GetOrgInfoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgInfoList not implemented")
}
func (UnimplementedSrvOrgV1Server) GetOrgEmployeeInfo(context.Context, *resources.GetOrgEmployeeInfoReq) (*resources.GetOrgEmployeeInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgEmployeeInfo not implemented")
}
func (UnimplementedSrvOrgV1Server) GetOrgEmployeeInfoList(context.Context, *resources.GetOrgEmployeeInfoListReq) (*resources.GetOrgEmployeeInfoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgEmployeeInfoList not implemented")
}
func (UnimplementedSrvOrgV1Server) GetOrgInviteRecordInfo(context.Context, *resources.GetOrgInviteRecordInfoReq) (*resources.GetOrgInviteRecordInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgInviteRecordInfo not implemented")
}
func (UnimplementedSrvOrgV1Server) GetOrgInviteRecordInfoList(context.Context, *resources.GetOrgInviteRecordInfoListReq) (*resources.GetOrgInviteRecordInfoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgInviteRecordInfoList not implemented")
}
func (UnimplementedSrvOrgV1Server) GetOrgList(context.Context, *resources.GetOrgListReq) (*resources.GetOrgListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgList not implemented")
}
func (UnimplementedSrvOrgV1Server) GetOrgEmployeeList(context.Context, *resources.GetOrgEmployeeListReq) (*resources.GetOrgEmployeeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgEmployeeList not implemented")
}
func (UnimplementedSrvOrgV1Server) GetOrgInviteRecordList(context.Context, *resources.GetOrgInviteRecordListReq) (*resources.GetOrgInviteRecordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgInviteRecordList not implemented")
}
func (UnimplementedSrvOrgV1Server) mustEmbedUnimplementedSrvOrgV1Server() {}
func (UnimplementedSrvOrgV1Server) testEmbeddedByValue()                  {}

// UnsafeSrvOrgV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvOrgV1Server will
// result in compilation errors.
type UnsafeSrvOrgV1Server interface {
	mustEmbedUnimplementedSrvOrgV1Server()
}

func RegisterSrvOrgV1Server(s grpc.ServiceRegistrar, srv SrvOrgV1Server) {
	// If the following call pancis, it indicates UnimplementedSrvOrgV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SrvOrgV1_ServiceDesc, srv)
}

func _SrvOrgV1_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).Ping(ctx, req.(*resources.PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_CreateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).CreateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_CreateOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).CreateOrg(ctx, req.(*resources.CreateOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_OnlyCreateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.OnlyCreateOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).OnlyCreateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_OnlyCreateOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).OnlyCreateOrg(ctx, req.(*resources.OnlyCreateOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_AddEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.AddEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).AddEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_AddEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).AddEmployee(ctx, req.(*resources.AddEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_CreateInviteRecordForLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateInviteRecordForLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).CreateInviteRecordForLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_CreateInviteRecordForLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).CreateInviteRecordForLink(ctx, req.(*resources.CreateInviteRecordForLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_CreateInviteRecordForEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateInviteRecordForEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).CreateInviteRecordForEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_CreateInviteRecordForEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).CreateInviteRecordForEmployee(ctx, req.(*resources.CreateInviteRecordForEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_JoinByInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.JoinByInviteLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).JoinByInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_JoinByInviteLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).JoinByInviteLink(ctx, req.(*resources.JoinByInviteLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_AgreeOrRefuseInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.AgreeOrRefuseInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).AgreeOrRefuseInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_AgreeOrRefuseInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).AgreeOrRefuseInvite(ctx, req.(*resources.AgreeOrRefuseInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_SetOrgStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SetOrgStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).SetOrgStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_SetOrgStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).SetOrgStatus(ctx, req.(*resources.SetOrgStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_RemoveEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.RemoveEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).RemoveEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_RemoveEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).RemoveEmployee(ctx, req.(*resources.RemoveEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_SetEmployeeRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SetEmployeeRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).SetEmployeeRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_SetEmployeeRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).SetEmployeeRole(ctx, req.(*resources.SetEmployeeRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_SetEmployeeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SetEmployeeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).SetEmployeeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_SetEmployeeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).SetEmployeeStatus(ctx, req.(*resources.SetEmployeeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_GetOrgInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetOrgInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).GetOrgInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_GetOrgInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).GetOrgInfo(ctx, req.(*resources.GetOrgInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_GetOrgInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetOrgInfoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).GetOrgInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_GetOrgInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).GetOrgInfoList(ctx, req.(*resources.GetOrgInfoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_GetOrgEmployeeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetOrgEmployeeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).GetOrgEmployeeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_GetOrgEmployeeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).GetOrgEmployeeInfo(ctx, req.(*resources.GetOrgEmployeeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_GetOrgEmployeeInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetOrgEmployeeInfoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).GetOrgEmployeeInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_GetOrgEmployeeInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).GetOrgEmployeeInfoList(ctx, req.(*resources.GetOrgEmployeeInfoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_GetOrgInviteRecordInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetOrgInviteRecordInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).GetOrgInviteRecordInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_GetOrgInviteRecordInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).GetOrgInviteRecordInfo(ctx, req.(*resources.GetOrgInviteRecordInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_GetOrgInviteRecordInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetOrgInviteRecordInfoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).GetOrgInviteRecordInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_GetOrgInviteRecordInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).GetOrgInviteRecordInfoList(ctx, req.(*resources.GetOrgInviteRecordInfoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_GetOrgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetOrgListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).GetOrgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_GetOrgList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).GetOrgList(ctx, req.(*resources.GetOrgListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_GetOrgEmployeeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetOrgEmployeeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).GetOrgEmployeeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_GetOrgEmployeeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).GetOrgEmployeeList(ctx, req.(*resources.GetOrgEmployeeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrgV1_GetOrgInviteRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetOrgInviteRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgV1Server).GetOrgInviteRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvOrgV1_GetOrgInviteRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgV1Server).GetOrgInviteRecordList(ctx, req.(*resources.GetOrgInviteRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvOrgV1_ServiceDesc is the grpc.ServiceDesc for SrvOrgV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvOrgV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saas.api.org.servicev1.SrvOrgV1",
	HandlerType: (*SrvOrgV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SrvOrgV1_Ping_Handler,
		},
		{
			MethodName: "CreateOrg",
			Handler:    _SrvOrgV1_CreateOrg_Handler,
		},
		{
			MethodName: "OnlyCreateOrg",
			Handler:    _SrvOrgV1_OnlyCreateOrg_Handler,
		},
		{
			MethodName: "AddEmployee",
			Handler:    _SrvOrgV1_AddEmployee_Handler,
		},
		{
			MethodName: "CreateInviteRecordForLink",
			Handler:    _SrvOrgV1_CreateInviteRecordForLink_Handler,
		},
		{
			MethodName: "CreateInviteRecordForEmployee",
			Handler:    _SrvOrgV1_CreateInviteRecordForEmployee_Handler,
		},
		{
			MethodName: "JoinByInviteLink",
			Handler:    _SrvOrgV1_JoinByInviteLink_Handler,
		},
		{
			MethodName: "AgreeOrRefuseInvite",
			Handler:    _SrvOrgV1_AgreeOrRefuseInvite_Handler,
		},
		{
			MethodName: "SetOrgStatus",
			Handler:    _SrvOrgV1_SetOrgStatus_Handler,
		},
		{
			MethodName: "RemoveEmployee",
			Handler:    _SrvOrgV1_RemoveEmployee_Handler,
		},
		{
			MethodName: "SetEmployeeRole",
			Handler:    _SrvOrgV1_SetEmployeeRole_Handler,
		},
		{
			MethodName: "SetEmployeeStatus",
			Handler:    _SrvOrgV1_SetEmployeeStatus_Handler,
		},
		{
			MethodName: "GetOrgInfo",
			Handler:    _SrvOrgV1_GetOrgInfo_Handler,
		},
		{
			MethodName: "GetOrgInfoList",
			Handler:    _SrvOrgV1_GetOrgInfoList_Handler,
		},
		{
			MethodName: "GetOrgEmployeeInfo",
			Handler:    _SrvOrgV1_GetOrgEmployeeInfo_Handler,
		},
		{
			MethodName: "GetOrgEmployeeInfoList",
			Handler:    _SrvOrgV1_GetOrgEmployeeInfoList_Handler,
		},
		{
			MethodName: "GetOrgInviteRecordInfo",
			Handler:    _SrvOrgV1_GetOrgInviteRecordInfo_Handler,
		},
		{
			MethodName: "GetOrgInviteRecordInfoList",
			Handler:    _SrvOrgV1_GetOrgInviteRecordInfoList_Handler,
		},
		{
			MethodName: "GetOrgList",
			Handler:    _SrvOrgV1_GetOrgList_Handler,
		},
		{
			MethodName: "GetOrgEmployeeList",
			Handler:    _SrvOrgV1_GetOrgEmployeeList_Handler,
		},
		{
			MethodName: "GetOrgInviteRecordList",
			Handler:    _SrvOrgV1_GetOrgInviteRecordList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/org-service/v1/services/org.service.v1.proto",
}
